import requests
import clipboard
import json
import click
import json
import os
import sys
from PyInquirer import style_from_dict, Token, prompt
from PyInquirer import Validator, ValidationError
from cerberusctl.user_interaction import UserInteraction

@click.group()
def cerberuscli():
    pass

class CerberusCtl():

    def __init__(self, configurations):
        self.BASE_URL = configurations['project_url']
        self.ui = UserInteraction()

    def start(self):
        cerberuscli()

    # this function is responsible for requesting the api for the secret
    @cerberuscli.command()
    @click.option("--secret_title", "-t", help="The title of the secret you need")
    def get_secret(self, secret_title):
        header = {'x-api-key': configurations['api_key']}
        response = requests.get('{}/get_secret?secret_title={}'.format(BASE_URL, secret_title), headers=header)
        if response.status_code == 200:
            found_secrets = json.loads(response.text)['RequestResult']['FoundSecrets']
            answer = self.ui.choose_secret(found_secrets)
            if answer:
                for secret in found_secrets:
                    if secret['title'] == answer['title']:
                        username = self.ui.ask_if_needs_username()
                        if username:
                            clipboard.copy(repr(secret['username']).replace('\'', ''))
                            print('I\'ve coppied the username to the clipboard')
                            self.ui.wait_for_confirmation()
                        clipboard.copy(repr(secret['secret']).replace('\'', ''))
                        print('I\'ve coppied the secret to the clipboard')
                        break
        else:
            print(self.ui.colorize('\nError: {}\n'.format(response.text), 'red'))

    # This function is responsible for handling the process of adding a secret to the database
    @cerberuscli.command()
    @click.option('--secret_title', '-t', help='Title of the secret you wanna add')
    @click.option('--description', '-d', help='The description of the secret')
    @click.option('--user', '-u', help='The username/email of the secret')
    @click.option('--secret', '-p', help='The secret value')
    @click.option('--lenght', '-l', default=64, help='The lenght of the secret')
    @click.option('--prompt_secret', '-P', flag_value=True, default=False, help='If enabled, you will be prompted to enter the secret')
    @click.option('--autogenerate', 'autogenerate', flag_value=True, default=False, help='If enabled, the secret will be auto generated')
    def add_secret(self, secret_title, description=None, user=None, secret=None, lenght=64, prompt_secret=False, autogenerate=False):

        if prompt_secret and secret != None:
            print(self.ui.colorize('\nError: Cannot prompt secret and pass it at the same time\n', 'red'))
        elif prompt_secret and autogenerate:
            print(self.ui.colorize('\nError: Cannot prompt secret and autogenerate it\n', 'red'))
        elif secret != None and autogenerate:
            print(self.ui.colorize('\nError: Cannot pass secret and autogenerate it\n', 'red'))
        elif prompt_secret:
            secret = self.ui.ask_secret()
        elif secret != None:
            pass
        elif autogenerate:
            pass
        else:
            print(self.ui.colorize('\nError: You hafta define a secret or ask it to be autogenerated\n', 'red'))

        data = {
            'title': secret_title,
            'secret': secret,
            'username': user,
            'description': description,
            'secret_size': lenght,
            'autogenerate': autogenerate
        }

        header = {'x-api-key': configurations['api_key'], 'Content-Type': 'application/json'}
        response = json.loads(requests.post('{}/add_secret'.format(BASE_URL), headers=header, data=json.dumps(data)).text)
        try:
            if response['RequestResult']['status_code'] == 201:
                print(self.ui.colorize('\nSuccess: {}\n'.format(response['RequestResult']['Message']), 'green'))
            elif response['RequestResult']['status_code'] == 200:
                try:
                    if response['RequestResult']['Warning']:
                        print(self.ui.colorize('\nWarning: {}\n'.format(response['RequestResult']['Message']), 'yellow'))
                except:
                    print(self.ui.colorize('\nUnknownSuccess: {}\n'.format(response['RequestResult']['Message']), 'grey'))
            elif response['RequestResult']['status_code'] == 500:
                print(self.ui.colorize('\nError: {}\n'.format(response['RequestResult']['Message']), 'red'))
            else:
                print(self.ui.colorize('\nUnknown: {}\n'.format(response['RequestResult']['Message']), 'grey'))
        except:
            print(self.ui.colorize('\nError: {}\n'.format(response), 'red'))
