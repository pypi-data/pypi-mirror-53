import requests
import clipboard
import json
import click
import json
import os
import sys
from PyInquirer import style_from_dict, Token, prompt
from PyInquirer import Validator, ValidationError
from cerberusctl.user_interaction import UserInteraction

try:
    file = open('{}/.cerberus/config.json'.format(os.path.expanduser("~")), 'r').read()
    configurations = json.loads(file)
except FileNotFoundError:
    print("You need to create the configuration in ~/.cerberus/config.json")
    exit()

ui = UserInteraction()

@click.group()
def cerberuscli():
    pass

# this function is responsible for requesting the api for the secret
@cerberuscli.command()
@click.option("--secret_title", "-t", help="The title of the secret you need")
def get_secret(secret_title):
    header = {'x-api-key': configurations['api_key']}
    response = requests.get('{}/get_secret?secret_title={}'.format(configurations['project_url'], secret_title), headers=header)
    if response.status_code == 200:
        found_secrets = json.loads(response.text)['RequestResult']['FoundSecrets']
        answer = ui.choose_secret(found_secrets)
        if answer:
            for secret in found_secrets:
                if secret['title'] == answer['title']:
                    username = ui.ask_if_needs_username()
                    if username:
                        clipboard.copy(repr(secret['username']).replace('\'', ''))
                        print('I\'ve coppied the username to the clipboard')
                        ui.wait_for_confirmation()
                    clipboard.copy(repr(secret['secret']).replace('\'', ''))
                    print('I\'ve coppied the secret to the clipboard')
                    break
    else:
        print(ui.colorize('\nError: {}\n'.format(response.text), 'red'))

# This function is responsible for handling the process of adding a secret to the database
@cerberuscli.command()
@click.option('--secret_title', '-t', help='Title of the secret you wanna add')
@click.option('--description', '-d', help='The description of the secret')
@click.option('--user', '-u', help='The username/email of the secret')
@click.option('--secret', '-p', help='The secret value')
@click.option('--lenght', '-l', default=64, help='The lenght of the secret')
@click.option('--prompt_secret', '-P', flag_value=True, default=False, help='If enabled, you will be prompted to enter the secret')
@click.option('--autogenerate', 'autogenerate', flag_value=True, default=False, help='If enabled, the secret will be auto generated')
def add_secret(secret_title, description=None, user=None, secret=None, lenght=64, prompt_secret=False, autogenerate=False):

    if prompt_secret and secret != None:
        print(ui.colorize('\nError: Cannot prompt secret and pass it at the same time\n', 'red'))
    elif prompt_secret and autogenerate:
        print(ui.colorize('\nError: Cannot prompt secret and autogenerate it\n', 'red'))
    elif secret != None and autogenerate:
        print(ui.colorize('\nError: Cannot pass secret and autogenerate it\n', 'red'))
    elif prompt_secret:
        secret = ui.ask_secret()
    elif secret != None:
        pass
    elif autogenerate:
        pass
    else:
        print(ui.colorize('\nError: You hafta define a secret or ask it to be autogenerated\n', 'red'))

    data = {
        'title': secret_title,
        'secret': secret,
        'username': user,
        'description': description,
        'secret_size': lenght,
        'autogenerate': autogenerate
    }

    header = {'x-api-key': configurations['api_key'], 'Content-Type': 'application/json'}
    response = json.loads(requests.post('{}/add_secret'.format(configurations['project_url']), headers=header, data=json.dumps(data)).text)
    try:
        if response['RequestResult']['status_code'] == 201:
            print(ui.colorize('\nSuccess: {}\n'.format(response['RequestResult']['Message']), 'green'))
        elif response['RequestResult']['status_code'] == 200:
            try:
                if response['RequestResult']['Warning']:
                    print(ui.colorize('\nWarning: {}\n'.format(response['RequestResult']['Message']), 'yellow'))
            except:
                print(ui.colorize('\nUnknownSuccess: {}\n'.format(response['RequestResult']['Message']), 'grey'))
        elif response['RequestResult']['status_code'] == 500:
            print(ui.colorize('\nError: {}\n'.format(response['RequestResult']['Message']), 'red'))
        else:
            print(ui.colorize('\nUnknown: {}\n'.format(response['RequestResult']['Message']), 'grey'))
    except:
        print(ui.colorize('\nError: {}\n'.format(response), 'red'))
