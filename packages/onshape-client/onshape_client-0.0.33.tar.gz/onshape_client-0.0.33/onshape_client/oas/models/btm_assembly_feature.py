# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.104
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTMAssemblyFeature(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'node_id': 'str',
        'namespace': 'str',
        'import_microversion': 'str',
        'name': 'str',
        'suppressed': 'bool',
        'parameters': 'list[BTMParameter]',
        'feature_id': 'str',
        'feature_type': 'str',
        'return_after_subfeatures': 'bool',
        'occurrence_queries_from_all_configurations': 'list[BTMIndividualQueryWithOccurrenceBase]',
        'feature_list_field_index': 'int',
        'auxiliary_assembly_feature': 'bool',
        'version': 'int'
    }

    attribute_map = {
        'node_id': 'nodeId',
        'namespace': 'namespace',
        'import_microversion': 'importMicroversion',
        'name': 'name',
        'suppressed': 'suppressed',
        'parameters': 'parameters',
        'feature_id': 'featureId',
        'feature_type': 'featureType',
        'return_after_subfeatures': 'returnAfterSubfeatures',
        'occurrence_queries_from_all_configurations': 'occurrenceQueriesFromAllConfigurations',
        'feature_list_field_index': 'featureListFieldIndex',
        'auxiliary_assembly_feature': 'auxiliaryAssemblyFeature',
        'version': 'version'
    }

    def __init__(self, node_id=None, namespace=None, import_microversion=None, name=None, suppressed=None, parameters=None, feature_id=None, feature_type=None, return_after_subfeatures=None, occurrence_queries_from_all_configurations=None, feature_list_field_index=None, auxiliary_assembly_feature=None, version=None):  # noqa: E501
        """BTMAssemblyFeature - a model defined in OpenAPI"""  # noqa: E501

        self._node_id = None
        self._namespace = None
        self._import_microversion = None
        self._name = None
        self._suppressed = None
        self._parameters = None
        self._feature_id = None
        self._feature_type = None
        self._return_after_subfeatures = None
        self._occurrence_queries_from_all_configurations = None
        self._feature_list_field_index = None
        self._auxiliary_assembly_feature = None
        self._version = None
        self.discriminator = None

        if node_id is not None:
            self.node_id = node_id
        if namespace is not None:
            self.namespace = namespace
        if import_microversion is not None:
            self.import_microversion = import_microversion
        if name is not None:
            self.name = name
        if suppressed is not None:
            self.suppressed = suppressed
        if parameters is not None:
            self.parameters = parameters
        if feature_id is not None:
            self.feature_id = feature_id
        if feature_type is not None:
            self.feature_type = feature_type
        if return_after_subfeatures is not None:
            self.return_after_subfeatures = return_after_subfeatures
        if occurrence_queries_from_all_configurations is not None:
            self.occurrence_queries_from_all_configurations = occurrence_queries_from_all_configurations
        if feature_list_field_index is not None:
            self.feature_list_field_index = feature_list_field_index
        if auxiliary_assembly_feature is not None:
            self.auxiliary_assembly_feature = auxiliary_assembly_feature
        if version is not None:
            self.version = version

    @property
    def node_id(self):
        """Gets the node_id of this BTMAssemblyFeature.  # noqa: E501


        :return: The node_id of this BTMAssemblyFeature.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this BTMAssemblyFeature.


        :param node_id: The node_id of this BTMAssemblyFeature.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def namespace(self):
        """Gets the namespace of this BTMAssemblyFeature.  # noqa: E501


        :return: The namespace of this BTMAssemblyFeature.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this BTMAssemblyFeature.


        :param namespace: The namespace of this BTMAssemblyFeature.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def import_microversion(self):
        """Gets the import_microversion of this BTMAssemblyFeature.  # noqa: E501


        :return: The import_microversion of this BTMAssemblyFeature.  # noqa: E501
        :rtype: str
        """
        return self._import_microversion

    @import_microversion.setter
    def import_microversion(self, import_microversion):
        """Sets the import_microversion of this BTMAssemblyFeature.


        :param import_microversion: The import_microversion of this BTMAssemblyFeature.  # noqa: E501
        :type: str
        """

        self._import_microversion = import_microversion

    @property
    def name(self):
        """Gets the name of this BTMAssemblyFeature.  # noqa: E501


        :return: The name of this BTMAssemblyFeature.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BTMAssemblyFeature.


        :param name: The name of this BTMAssemblyFeature.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def suppressed(self):
        """Gets the suppressed of this BTMAssemblyFeature.  # noqa: E501


        :return: The suppressed of this BTMAssemblyFeature.  # noqa: E501
        :rtype: bool
        """
        return self._suppressed

    @suppressed.setter
    def suppressed(self, suppressed):
        """Sets the suppressed of this BTMAssemblyFeature.


        :param suppressed: The suppressed of this BTMAssemblyFeature.  # noqa: E501
        :type: bool
        """

        self._suppressed = suppressed

    @property
    def parameters(self):
        """Gets the parameters of this BTMAssemblyFeature.  # noqa: E501


        :return: The parameters of this BTMAssemblyFeature.  # noqa: E501
        :rtype: list[BTMParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this BTMAssemblyFeature.


        :param parameters: The parameters of this BTMAssemblyFeature.  # noqa: E501
        :type: list[BTMParameter]
        """

        self._parameters = parameters

    @property
    def feature_id(self):
        """Gets the feature_id of this BTMAssemblyFeature.  # noqa: E501


        :return: The feature_id of this BTMAssemblyFeature.  # noqa: E501
        :rtype: str
        """
        return self._feature_id

    @feature_id.setter
    def feature_id(self, feature_id):
        """Sets the feature_id of this BTMAssemblyFeature.


        :param feature_id: The feature_id of this BTMAssemblyFeature.  # noqa: E501
        :type: str
        """

        self._feature_id = feature_id

    @property
    def feature_type(self):
        """Gets the feature_type of this BTMAssemblyFeature.  # noqa: E501


        :return: The feature_type of this BTMAssemblyFeature.  # noqa: E501
        :rtype: str
        """
        return self._feature_type

    @feature_type.setter
    def feature_type(self, feature_type):
        """Sets the feature_type of this BTMAssemblyFeature.


        :param feature_type: The feature_type of this BTMAssemblyFeature.  # noqa: E501
        :type: str
        """

        self._feature_type = feature_type

    @property
    def return_after_subfeatures(self):
        """Gets the return_after_subfeatures of this BTMAssemblyFeature.  # noqa: E501


        :return: The return_after_subfeatures of this BTMAssemblyFeature.  # noqa: E501
        :rtype: bool
        """
        return self._return_after_subfeatures

    @return_after_subfeatures.setter
    def return_after_subfeatures(self, return_after_subfeatures):
        """Sets the return_after_subfeatures of this BTMAssemblyFeature.


        :param return_after_subfeatures: The return_after_subfeatures of this BTMAssemblyFeature.  # noqa: E501
        :type: bool
        """

        self._return_after_subfeatures = return_after_subfeatures

    @property
    def occurrence_queries_from_all_configurations(self):
        """Gets the occurrence_queries_from_all_configurations of this BTMAssemblyFeature.  # noqa: E501


        :return: The occurrence_queries_from_all_configurations of this BTMAssemblyFeature.  # noqa: E501
        :rtype: list[BTMIndividualQueryWithOccurrenceBase]
        """
        return self._occurrence_queries_from_all_configurations

    @occurrence_queries_from_all_configurations.setter
    def occurrence_queries_from_all_configurations(self, occurrence_queries_from_all_configurations):
        """Sets the occurrence_queries_from_all_configurations of this BTMAssemblyFeature.


        :param occurrence_queries_from_all_configurations: The occurrence_queries_from_all_configurations of this BTMAssemblyFeature.  # noqa: E501
        :type: list[BTMIndividualQueryWithOccurrenceBase]
        """

        self._occurrence_queries_from_all_configurations = occurrence_queries_from_all_configurations

    @property
    def feature_list_field_index(self):
        """Gets the feature_list_field_index of this BTMAssemblyFeature.  # noqa: E501


        :return: The feature_list_field_index of this BTMAssemblyFeature.  # noqa: E501
        :rtype: int
        """
        return self._feature_list_field_index

    @feature_list_field_index.setter
    def feature_list_field_index(self, feature_list_field_index):
        """Sets the feature_list_field_index of this BTMAssemblyFeature.


        :param feature_list_field_index: The feature_list_field_index of this BTMAssemblyFeature.  # noqa: E501
        :type: int
        """

        self._feature_list_field_index = feature_list_field_index

    @property
    def auxiliary_assembly_feature(self):
        """Gets the auxiliary_assembly_feature of this BTMAssemblyFeature.  # noqa: E501


        :return: The auxiliary_assembly_feature of this BTMAssemblyFeature.  # noqa: E501
        :rtype: bool
        """
        return self._auxiliary_assembly_feature

    @auxiliary_assembly_feature.setter
    def auxiliary_assembly_feature(self, auxiliary_assembly_feature):
        """Sets the auxiliary_assembly_feature of this BTMAssemblyFeature.


        :param auxiliary_assembly_feature: The auxiliary_assembly_feature of this BTMAssemblyFeature.  # noqa: E501
        :type: bool
        """

        self._auxiliary_assembly_feature = auxiliary_assembly_feature

    @property
    def version(self):
        """Gets the version of this BTMAssemblyFeature.  # noqa: E501


        :return: The version of this BTMAssemblyFeature.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BTMAssemblyFeature.


        :param version: The version of this BTMAssemblyFeature.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTMAssemblyFeature):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
