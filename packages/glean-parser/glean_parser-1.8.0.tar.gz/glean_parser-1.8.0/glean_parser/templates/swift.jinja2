// -*- mode: Swift -*-

// AUTOGENERATED BY glean_parser.  DO NOT EDIT.
{# The rendered markdown is autogenerated, but this
Jinja2 template is not. Please file bugs! #}

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
{% macro obj_declaration(obj, suffix='', access='') %}
{{ access }}static let {{ obj.name|camelize }}{{ suffix }} = {{ obj|type_name }}(
        {% for arg_name in extra_args if obj[arg_name] is defined %}
        {{ arg_name|camelize }}: {{ obj[arg_name]|swift }}{{ "," if not loop.last }}
        {% endfor %}
    )
{% endmacro %}

import Glean

{% if is_ping_type %}
internal class {{ category_name|Camelize }} {
  public static let shared = {{ category_name|Camelize }}()
  private init() {
    // Intentionally left private, no external user can instantiate a new global object.
  }

{% for obj in objs.values() %}
  /// {{ obj.description|wordwrap(wrapstring='\n  /// ') }}
  let {{ obj.name|camelize }} = {{obj|type_name}}(name: {{ obj.name|swift }}, includeClientId: {{obj.include_client_id|swift}})

{% endfor %}
}
{%- else %}
internal enum {{ category_name|Camelize }} {
{% for obj in objs.values() %}
    {% if obj.extra_keys|length %}
    {# TODO: Events are not yet support
    enum {{ obj.name|camelize }}Keys {
    {% for key in obj.allowed_extra_keys %}
        case {{ key|camelize }}
    {% endfor %}
    }
    #}
    {% endif %}
{% endfor %}
{% for obj in objs.values() %}
    {% if obj.labeled %}
    {# TODO: Labeled metrics are not yet supported
    {{ obj_declaration(obj, 'Label', 'private ') }}
    /// {{ obj.description|wordwrap(wrapstring='\n     /// ') }}
    static let {{ obj.name|camelize }}: LabeledMetricType<{{ obj|type_name }}> = LabeledMetricType(
            category: {{ obj.category|swift }},
            name: {{ obj.name|swift }},
            sendInPings: {{ obj.send_in_pings|swift }},
            lifetime: {{ obj.lifetime|swift }},
            disabled: {{ obj.is_disabled()|swift }},
            subMetric: {{ obj.name|camelize }}Label,
            labels: {{ obj.labels|swift }}
        )
    }
    #}
    {% else %}
    /// {{ obj.description|wordwrap(wrapstring='\n    /// ') }}
    {{ obj_declaration(obj) }}
    {% endif %}
{%- endfor %}
}
{%- endif %}
