{"code": "\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar p = require(\"core/properties\");\nvar object_1 = require(\"core/util/object\");\nvar html_box_1 = require(\"models/layouts/html_box\");\nvar _ = window._;\nvar Plotly = window.Plotly;\nfunction isPlainObject(obj) {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n}\nvar filterEventData = function (gd, eventData, event) {\n    // Ported from dash-core-components/src/components/Graph.react.js\n    var filteredEventData = Array.isArray(eventData) ? [] : {};\n    if (event === \"click\" || event === \"hover\" || event === \"selected\") {\n        var points = [];\n        if (eventData === undefined || eventData === null) {\n            return null;\n        }\n        /*\n         * remove `data`, `layout`, `xaxis`, etc\n         * objects from the event data since they're so big\n         * and cause JSON stringify ciricular structure errors.\n         *\n         * also, pull down the `customdata` point from the data array\n         * into the event object\n         */\n        var data = gd.data;\n        for (var i = 0; i < eventData.points.length; i++) {\n            var fullPoint = eventData.points[i];\n            var pointData = {};\n            for (var property in fullPoint) {\n                var val = fullPoint[property];\n                if (fullPoint.hasOwnProperty(property) &&\n                    !Array.isArray(val) && !isPlainObject(val)) {\n                    pointData[property] = val;\n                }\n            }\n            if (fullPoint !== undefined && fullPoint !== null) {\n                if (fullPoint.hasOwnProperty(\"curveNumber\") &&\n                    fullPoint.hasOwnProperty(\"pointNumber\") &&\n                    data[fullPoint[\"curveNumber\"]].hasOwnProperty(\"customdata\")) {\n                    pointData[\"customdata\"] =\n                        data[fullPoint[\"curveNumber\"]].customdata[fullPoint[\"pointNumber\"]];\n                }\n                // specific to histogram. see https://github.com/plotly/plotly.js/pull/2113/\n                if (fullPoint.hasOwnProperty('pointNumbers')) {\n                    pointData[\"pointNumbers\"] = fullPoint.pointNumbers;\n                }\n            }\n            points[i] = pointData;\n        }\n        filteredEventData[\"points\"] = points;\n    }\n    else if (event === 'relayout' || event === 'restyle') {\n        /*\n         * relayout shouldn't include any big objects\n         * it will usually just contain the ranges of the axes like\n         * \"xaxis.range[0]\": 0.7715822247381828,\n         * \"xaxis.range[1]\": 3.0095292008680063`\n         */\n        for (var property in eventData) {\n            if (eventData.hasOwnProperty(property)) {\n                filteredEventData[property] = eventData[property];\n            }\n        }\n    }\n    if (eventData.hasOwnProperty('range')) {\n        filteredEventData[\"range\"] = eventData[\"range\"];\n    }\n    if (eventData.hasOwnProperty('lassoPoints')) {\n        filteredEventData[\"lassoPoints\"] = eventData[\"lassoPoints\"];\n    }\n    return filteredEventData;\n};\nvar PlotlyPlotView = /** @class */ (function (_super) {\n    __extends(PlotlyPlotView, _super);\n    function PlotlyPlotView() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._settingViewport = false;\n        _this._plotInitialized = false;\n        _this._reacting = false;\n        _this._relayouting = false;\n        _this._end_relayouting = _.debounce(function () {\n            _this._relayouting = false;\n        }, 2000, { leading: false });\n        return _this;\n    }\n    PlotlyPlotView.prototype.connect_signals = function () {\n        _super.prototype.connect_signals.call(this);\n        this.connect(this.model.properties.viewport_update_policy.change, this._updateSetViewportFunction);\n        this.connect(this.model.properties.viewport_update_throttle.change, this._updateSetViewportFunction);\n        this.connect(this.model.properties._render_count.change, this.render);\n        this.connect(this.model.properties.viewport.change, this._updateViewportFromProperty);\n    };\n    PlotlyPlotView.prototype.render = function () {\n        var _this = this;\n        if (!window.Plotly) {\n            return;\n        }\n        var data = [];\n        for (var i = 0; i < this.model.data.length; i++) {\n            data.push(this._get_trace(i, false));\n        }\n        var newLayout = _.cloneDeep(this.model.layout);\n        if (this._relayouting) {\n            var layout = this.el.layout;\n            // For each xaxis* and yaxis* property of layout, if the value has a 'range'\n            // property then use this in newLayout\n            _.forOwn(layout, function (value, key) {\n                if (key.slice(1, 5) === \"axis\" && _.has(value, 'range')) {\n                    newLayout[key].range = value.range;\n                }\n            });\n        }\n        this._reacting = true;\n        Plotly.react(this.el, data, newLayout, this.model.config).then(function () {\n            _this._updateSetViewportFunction();\n            _this._updateViewportProperty();\n            if (!_this._plotInitialized) {\n                // Install callbacks\n                //  - plotly_relayout\n                (_this.el).on('plotly_relayout', function (eventData) {\n                    if (eventData['_update_from_property'] !== true) {\n                        _this.model.relayout_data = filterEventData(_this.el, eventData, 'relayout');\n                        _this._updateViewportProperty();\n                        _this._end_relayouting();\n                    }\n                });\n                //  - plotly_relayouting\n                (_this.el).on('plotly_relayouting', function () {\n                    if (_this.model.viewport_update_policy !== 'mouseup') {\n                        _this._relayouting = true;\n                        _this._updateViewportProperty();\n                    }\n                });\n                //  - plotly_restyle\n                (_this.el).on('plotly_restyle', function (eventData) {\n                    _this.model.restyle_data = filterEventData(_this.el, eventData, 'restyle');\n                    _this._updateViewportProperty();\n                });\n                //  - plotly_click\n                (_this.el).on('plotly_click', function (eventData) {\n                    _this.model.click_data = filterEventData(_this.el, eventData, 'click');\n                });\n                //  - plotly_hover\n                (_this.el).on('plotly_hover', function (eventData) {\n                    _this.model.hover_data = filterEventData(_this.el, eventData, 'hover');\n                });\n                //  - plotly_selected\n                (_this.el).on('plotly_selected', function (eventData) {\n                    _this.model.selected_data = filterEventData(_this.el, eventData, 'selected');\n                });\n                //  - plotly_clickannotation\n                (_this.el).on('plotly_clickannotation', function (eventData) {\n                    delete eventData[\"event\"];\n                    delete eventData[\"fullAnnotation\"];\n                    _this.model.clickannotation_data = eventData;\n                });\n                //  - plotly_deselect\n                (_this.el).on('plotly_deselect', function () {\n                    _this.model.selected_data = null;\n                });\n                //  - plotly_unhover\n                (_this.el).on('plotly_unhover', function () {\n                    _this.model.hover_data = null;\n                });\n            }\n            _this._plotInitialized = true;\n            _this._reacting = false;\n        });\n    };\n    PlotlyPlotView.prototype._get_trace = function (index, update) {\n        var trace = object_1.clone(this.model.data[index]);\n        var cds = this.model.data_sources[index];\n        for (var _i = 0, _a = cds.columns(); _i < _a.length; _i++) {\n            var column = _a[_i];\n            var shape = cds._shapes[column][0];\n            var array = cds.get_array(column)[0];\n            if (shape.length > 1) {\n                var arrays = [];\n                for (var s = 0; s < shape[0]; s++) {\n                    arrays.push(array.slice(s * shape[1], (s + 1) * shape[1]));\n                }\n                array = arrays;\n            }\n            var prop_path = column.split(\".\");\n            var prop = prop_path[prop_path.length - 1];\n            var prop_parent = trace;\n            for (var _b = 0, _c = prop_path.slice(0, -1); _b < _c.length; _b++) {\n                var k = _c[_b];\n                prop_parent = prop_parent[k];\n            }\n            if (update && prop_path.length == 1) {\n                prop_parent[prop] = [array];\n            }\n            else {\n                prop_parent[prop] = array;\n            }\n        }\n        return trace;\n    };\n    PlotlyPlotView.prototype._updateViewportFromProperty = function () {\n        var _this = this;\n        if (!Plotly || this._settingViewport || this._reacting || !this.model.viewport) {\n            return;\n        }\n        var fullLayout = this.el._fullLayout;\n        // Call relayout if viewport differs from fullLayout\n        _.forOwn(this.model.viewport, function (value, key) {\n            if (!_.isEqual(_.get(fullLayout, key), value)) {\n                var clonedViewport = _.cloneDeep(_this.model.viewport);\n                clonedViewport['_update_from_property'] = true;\n                Plotly.relayout(_this.el, clonedViewport);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    };\n    PlotlyPlotView.prototype._updateViewportProperty = function () {\n        var fullLayout = this.el._fullLayout;\n        var viewport = {};\n        // Get range for all xaxis and yaxis properties\n        for (var prop in fullLayout) {\n            if (!fullLayout.hasOwnProperty(prop)) {\n                continue;\n            }\n            var maybe_axis = prop.slice(0, 5);\n            if (maybe_axis === 'xaxis' || maybe_axis === 'yaxis') {\n                viewport[prop + '.range'] = _.cloneDeep(fullLayout[prop].range);\n            }\n        }\n        if (!_.isEqual(viewport, this.model.viewport)) {\n            this._setViewport(viewport);\n        }\n    };\n    PlotlyPlotView.prototype._updateSetViewportFunction = function () {\n        var _this = this;\n        if (this.model.viewport_update_policy === \"continuous\" ||\n            this.model.viewport_update_policy === \"mouseup\") {\n            this._setViewport = function (viewport) {\n                if (!_this._settingViewport) {\n                    _this._settingViewport = true;\n                    _this.model.viewport = viewport;\n                    _this._settingViewport = false;\n                }\n            };\n        }\n        else {\n            this._setViewport = _.throttle(function (viewport) {\n                if (!_this._settingViewport) {\n                    _this._settingViewport = true;\n                    _this.model.viewport = viewport;\n                    _this._settingViewport = false;\n                }\n            }, this.model.viewport_update_throttle);\n        }\n    };\n    PlotlyPlotView.__name__ = \"PlotlyPlotView\";\n    return PlotlyPlotView;\n}(html_box_1.HTMLBoxView));\nexports.PlotlyPlotView = PlotlyPlotView;\nvar PlotlyPlot = /** @class */ (function (_super) {\n    __extends(PlotlyPlot, _super);\n    function PlotlyPlot(attrs) {\n        return _super.call(this, attrs) || this;\n    }\n    PlotlyPlot.initClass = function () {\n        this.prototype.type = \"PlotlyPlot\";\n        this.prototype.default_view = PlotlyPlotView;\n        this.define({\n            data: [p.Array, []],\n            layout: [p.Any, {}],\n            config: [p.Any, {}],\n            data_sources: [p.Array, []],\n            relayout_data: [p.Any, {}],\n            restyle_data: [p.Array, []],\n            click_data: [p.Any, {}],\n            hover_data: [p.Any, {}],\n            clickannotation_data: [p.Any, {}],\n            selected_data: [p.Any, {}],\n            viewport: [p.Any, {}],\n            viewport_update_policy: [p.String, \"mouseup\"],\n            viewport_update_throttle: [p.Number, 200],\n            _render_count: [p.Number, 0],\n        });\n    };\n    PlotlyPlot.__name__ = \"PlotlyPlot\";\n    return PlotlyPlot;\n}(html_box_1.HTMLBox));\nexports.PlotlyPlot = PlotlyPlot;\nPlotlyPlot.initClass();\n", "deps": ["core/properties", "core/util/object", "models/layouts/html_box"], "hash": "e5cd184a08d44e26225e481f97063ee739078e345ca4bf83e8ce5808d0019241"}