# coding: utf-8

"""
    ConfigTree API

    ConfigTree API definitions  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class OrganizationGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'users': 'str',
        'permissions': 'str',
        'created_at': 'str',
        'last_updated_at': 'str',
        'created_by': 'str',
        'last_updated_by': 'str',
        'is_admin_group': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'users': 'users',
        'permissions': 'permissions',
        'created_at': 'createdAt',
        'last_updated_at': 'lastUpdatedAt',
        'created_by': 'createdBy',
        'last_updated_by': 'lastUpdatedBy',
        'is_admin_group': 'is_admin_group'
    }

    def __init__(self, id=None, name=None, users=None, permissions=None, created_at=None, last_updated_at=None, created_by=None, last_updated_by=None, is_admin_group=None):  # noqa: E501
        """OrganizationGroup - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._users = None
        self._permissions = None
        self._created_at = None
        self._last_updated_at = None
        self._created_by = None
        self._last_updated_by = None
        self._is_admin_group = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        if users is not None:
            self.users = users
        if permissions is not None:
            self.permissions = permissions
        if created_at is not None:
            self.created_at = created_at
        if last_updated_at is not None:
            self.last_updated_at = last_updated_at
        if created_by is not None:
            self.created_by = created_by
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        if is_admin_group is not None:
            self.is_admin_group = is_admin_group

    @property
    def id(self):
        """Gets the id of this OrganizationGroup.  # noqa: E501


        :return: The id of this OrganizationGroup.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganizationGroup.


        :param id: The id of this OrganizationGroup.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this OrganizationGroup.  # noqa: E501


        :return: The name of this OrganizationGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganizationGroup.


        :param name: The name of this OrganizationGroup.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def users(self):
        """Gets the users of this OrganizationGroup.  # noqa: E501


        :return: The users of this OrganizationGroup.  # noqa: E501
        :rtype: str
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this OrganizationGroup.


        :param users: The users of this OrganizationGroup.  # noqa: E501
        :type: str
        """

        self._users = users

    @property
    def permissions(self):
        """Gets the permissions of this OrganizationGroup.  # noqa: E501


        :return: The permissions of this OrganizationGroup.  # noqa: E501
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this OrganizationGroup.


        :param permissions: The permissions of this OrganizationGroup.  # noqa: E501
        :type: str
        """

        self._permissions = permissions

    @property
    def created_at(self):
        """Gets the created_at of this OrganizationGroup.  # noqa: E501


        :return: The created_at of this OrganizationGroup.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this OrganizationGroup.


        :param created_at: The created_at of this OrganizationGroup.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this OrganizationGroup.  # noqa: E501


        :return: The last_updated_at of this OrganizationGroup.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this OrganizationGroup.


        :param last_updated_at: The last_updated_at of this OrganizationGroup.  # noqa: E501
        :type: str
        """

        self._last_updated_at = last_updated_at

    @property
    def created_by(self):
        """Gets the created_by of this OrganizationGroup.  # noqa: E501


        :return: The created_by of this OrganizationGroup.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this OrganizationGroup.


        :param created_by: The created_by of this OrganizationGroup.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this OrganizationGroup.  # noqa: E501


        :return: The last_updated_by of this OrganizationGroup.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this OrganizationGroup.


        :param last_updated_by: The last_updated_by of this OrganizationGroup.  # noqa: E501
        :type: str
        """

        self._last_updated_by = last_updated_by

    @property
    def is_admin_group(self):
        """Gets the is_admin_group of this OrganizationGroup.  # noqa: E501


        :return: The is_admin_group of this OrganizationGroup.  # noqa: E501
        :rtype: bool
        """
        return self._is_admin_group

    @is_admin_group.setter
    def is_admin_group(self, is_admin_group):
        """Sets the is_admin_group of this OrganizationGroup.


        :param is_admin_group: The is_admin_group of this OrganizationGroup.  # noqa: E501
        :type: bool
        """

        self._is_admin_group = is_admin_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganizationGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
