{"version":3,"file":"pandas.js","sources":["../../node_modules/@wq/chart/src/pandas.js"],"sourcesContent":["import * as d3 from 'd3';\nimport 'whatwg-fetch';\n\nvar pandas = {};\n\npandas.parse = function(str) {\n    /* Parses a CSV string with the following structure:\n\n    ,value,value,value              // values header\n    site,SITE1,SITE2,SITE3          // meta header #1 (site)\n    parameter,PARAM1,PARAM1,PARAM2  // meta header #2 (parameter)\n    date,,,                         // id columns header\n    2014-01-01,0.5,0.5,0.2          // data row\n    2014-01-02,0.1,0.5,0.2          // \" \"\n\n    Into an array of datasets with the following structure:\n    [\n        {\n            'site': 'SITE1',\n            'parameter': 'PARAM1',\n            'data': [\n                {'date': '2014-01-01', 'value': 0.5},\n                {'date': '2014-01-02', 'value': 0.1}\n            ]\n        }\n        // etc for SITE2/PARAM1 and SITE3/PARAM2...\n    ]\n\n\n    Also supports multi-valued datasets, e.g.:\n\n    ,val1,val2\n    site,SITE1,SITE1,\n    parameter,PARAM1,PARAM1\n    date,,\n    2014-01-01,0.6,0.3\n\n    Will be parsed into:\n    [\n        {\n            'site': 'SITE1',\n            'parameter': 'PARAM1',\n            'data': [\n                {'date': '2014-01-01', 'val1': 0.6, 'val2': 0.3}\n            ]\n        }\n    ]\n\n    */\n\n    var idColumns,\n        metadata = [],\n        datasets = [],\n        col2dataset = [],\n        data,\n        valuesHeader,\n        rows;\n    if (str.charAt(0) != ',') {\n        // Assume plain CSV (single series with one-row header)\n        data = [];\n        d3.csvParse(str).forEach(function(row) {\n            var key, val;\n            for (key in row) {\n                val = row[key];\n                if (row[key] !== '') {\n                    row[key] = isNaN(+val) ? val : +val;\n                }\n            }\n            data.push(row);\n        });\n        return [\n            {\n                data: data\n            }\n        ];\n    }\n\n    // Parse CSV headers and data\n    rows = d3.csvParseRows(str);\n    rows.forEach(function(row, i) {\n        if (data) {\n            parseData(row);\n        } else if (i === 0 && row[0] === '') {\n            parseValuesHeader(row);\n        } else if (valuesHeader && row[row.length - 1] !== '') {\n            parseMetaHeader(row);\n        } else if (valuesHeader) {\n            parseIdHeader(row);\n            findDatasets();\n            data = true;\n        } else {\n            parseSimpleHeader(row);\n            data = true;\n        }\n    });\n\n    function parseValuesHeader(row) {\n        // Blank first column => this row has value column labels\n        valuesHeader = row;\n    }\n\n    function parseMetaHeader(row) {\n        // First & last column aren't blank => this row contains metadata\n        var metaname = row[0];\n        var metaStart = valuesHeader.lastIndexOf('') + 1;\n        row.slice(metaStart).forEach(function(d, i) {\n            if (!metadata[i]) {\n                metadata[i] = {};\n            }\n            if (d == '-') {\n                metadata[i][metaname] = null;\n            } else {\n                metadata[i][metaname] = d;\n            }\n        });\n    }\n\n    function parseIdHeader(row) {\n        // Blank last column => this row has index column labels\n        if (row.indexOf('') != valuesHeader.lastIndexOf('') + 1) {\n            throw 'Header mismatch!';\n        }\n        idColumns = row.slice(0, row.indexOf(''));\n    }\n\n    function findDatasets() {\n        // Ensure that datasets[] has only one entry for each dataset, as\n        // datasets that may span multiple columns.  Hash the metadata values\n        // to get a unique key.\n        var datasetIndex = {};\n        metadata.forEach(function(meta, i) {\n            var metaHash = hash(meta);\n            var index = datasetIndex[metaHash];\n            if (index === undefined) {\n                index = datasets.length;\n                datasetIndex[metaHash] = index;\n                meta.data = [];\n                datasets.push(meta);\n            }\n            col2dataset[i] = index;\n        });\n    }\n\n    function parseSimpleHeader(row) {\n        // No values header found, assume single-row header\n        // - first column is row id (i.e. date)\n        // - all other columns are individual timeseries\n        // - (if parsing a single multi-valued timeseries, just use d3.csv)\n        idColumns = [row[0]];\n        valuesHeader = [];\n        row.slice(1).forEach(function(s, i) {\n            datasets[i] = { id: s, data: [] };\n            col2dataset[i] = i;\n            valuesHeader[i + 1] = 'value';\n        });\n    }\n\n    function parseData(row) {\n        // Parse a row of data, using header information as appropriate\n        var id = {};\n        idColumns.forEach(function(c, i) {\n            id[c] = row[i];\n        });\n\n        var rowdata = [];\n        row.slice(idColumns.length).forEach(function(d, i) {\n            var c, item, dsi, valname;\n            if (d === '') {\n                return;\n            }\n            dsi = col2dataset[i];\n            valname = valuesHeader[i + idColumns.length];\n            item = rowdata[dsi];\n            if (!item) {\n                item = {};\n                for (c in id) {\n                    item[c] = id[c];\n                }\n                rowdata[dsi] = item;\n            }\n            item[valname] = isNaN(+d) ? d : +d;\n        });\n        rowdata.forEach(function(d, i) {\n            datasets[i].data.push(d);\n        });\n    }\n    return datasets;\n};\n\npandas.get = function(url, callback) {\n    return fetch(url)\n        .then(response => response.text())\n        .then(text => pandas.parse(text))\n        .then(callback);\n};\n\nfunction hash(obj) {\n    var str = '';\n    d3.keys(obj)\n        .sort()\n        .forEach(function(key) {\n            str += key + '=' + obj[key] + '\\n';\n        });\n    return str;\n}\n\nexport default pandas;\n"],"names":["pandas","parse","str","idColumns","metadata","datasets","col2dataset","data","valuesHeader","rows","charAt","d3","forEach","row","key","val","isNaN","push","i","parseData","parseValuesHeader","length","parseMetaHeader","parseIdHeader","findDatasets","parseSimpleHeader","metaname","metaStart","lastIndexOf","slice","d","indexOf","datasetIndex","meta","metaHash","hash","index","undefined","s","id","c","rowdata","item","dsi","valname","get","url","callback","fetch","then","response","text","obj","sort"],"mappings":"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"}