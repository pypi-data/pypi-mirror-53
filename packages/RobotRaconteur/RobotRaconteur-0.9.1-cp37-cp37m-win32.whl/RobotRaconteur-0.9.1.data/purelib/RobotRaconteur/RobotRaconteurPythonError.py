# Copyright 2011-2019 Wason Technology, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file is automatically generated. Do not edit.

from __future__ import absolute_import

from . import RobotRaconteurPython
import threading
import string


class RobotRaconteurException(Exception):
    def __init__(self,errorcode,errorname,errormessage):
        self.errorcode=errorcode
        self.errorname=errorname
        self.message=errormessage
    def __str__(self):
        return self.errorname + " " + self.message


class ConnectionException(RobotRaconteurException):
    def __init__(self,message=""):
        super(ConnectionException,self).__init__(RobotRaconteurPython.MessageErrorType_ConnectionError, "RobotRaconteur.ConnectionError",message)

class ProtocolException(RobotRaconteurException):
    def __init__(self,message=""):
        super(ProtocolException,self).__init__(RobotRaconteurPython.MessageErrorType_ProtocolError, "RobotRaconteur.ProtocolError",message)

class ServiceNotFoundException(RobotRaconteurException):
    def __init__(self,message=""):
        super(ServiceNotFoundException,self).__init__(RobotRaconteurPython.MessageErrorType_ServiceNotFound, "RobotRaconteur.ServiceNotFound",message)

class ObjectNotFoundException(RobotRaconteurException):
    def __init__(self,message=""):
        super(ObjectNotFoundException,self).__init__(RobotRaconteurPython.MessageErrorType_ObjectNotFound, "RobotRaconteur.ObjectNotFound",message)

class InvalidEndpointException(RobotRaconteurException):
    def __init__(self,message=""):
        super(InvalidEndpointException,self).__init__(RobotRaconteurPython.MessageErrorType_InvalidEndpoint, "RobotRaconteur.InvalidEndpoint",message)

class EndpointCommunicationFatalException(RobotRaconteurException):
    def __init__(self,message=""):
        super(EndpointCommunicationFatalException,self).__init__(RobotRaconteurPython.MessageErrorType_EndpointCommunicationFatalError, "RobotRaconteur.EndpointCommunicationFatalError",message)

class NodeNotFoundException(RobotRaconteurException):
    def __init__(self,message=""):
        super(NodeNotFoundException,self).__init__(RobotRaconteurPython.MessageErrorType_NodeNotFound, "RobotRaconteur.NodeNotFound",message)

class ServiceException(RobotRaconteurException):
    def __init__(self,message=""):
        super(ServiceException,self).__init__(RobotRaconteurPython.MessageErrorType_ServiceError, "RobotRaconteur.ServiceError",message)

class MemberNotFoundException(RobotRaconteurException):
    def __init__(self,message=""):
        super(MemberNotFoundException,self).__init__(RobotRaconteurPython.MessageErrorType_MemberNotFound, "RobotRaconteur.MemberNotFound",message)

class MemberFormatMismatchException(RobotRaconteurException):
    def __init__(self,message=""):
        super(MemberFormatMismatchException,self).__init__(RobotRaconteurPython.MessageErrorType_MemberFormatMismatch, "RobotRaconteur.MemberFormatMismatch",message)

class DataTypeMismatchException(RobotRaconteurException):
    def __init__(self,message=""):
        super(DataTypeMismatchException,self).__init__(RobotRaconteurPython.MessageErrorType_DataTypeMismatch, "RobotRaconteur.DataTypeMismatch",message)

class DataTypeException(RobotRaconteurException):
    def __init__(self,message=""):
        super(DataTypeException,self).__init__(RobotRaconteurPython.MessageErrorType_DataTypeError, "RobotRaconteur.DataTypeError",message)

class DataSerializationException(RobotRaconteurException):
    def __init__(self,message=""):
        super(DataSerializationException,self).__init__(RobotRaconteurPython.MessageErrorType_DataSerializationError, "RobotRaconteur.DataSerializationError",message)

class MessageEntryNotFoundException(RobotRaconteurException):
    def __init__(self,message=""):
        super(MessageEntryNotFoundException,self).__init__(RobotRaconteurPython.MessageErrorType_MessageEntryNotFound, "RobotRaconteur.MessageEntryNotFound",message)

class MessageElementNotFoundException(RobotRaconteurException):
    def __init__(self,message=""):
        super(MessageElementNotFoundException,self).__init__(RobotRaconteurPython.MessageErrorType_MessageElementNotFound, "RobotRaconteur.MessageElementNotFound",message)

class UnknownException(RobotRaconteurException):
    def __init__(self,name,message):
        super(UnknownException,self).__init__(RobotRaconteurPython.MessageErrorType_UnknownError, name,message)

class InvalidOperationException(RobotRaconteurException):
    def __init__(self,message=""):
        super(InvalidOperationException,self).__init__(RobotRaconteurPython.MessageErrorType_InvalidOperation, "RobotRaconteur.InvalidOperation",message)

class InvalidArgumentException(RobotRaconteurException):
    def __init__(self,message=""):
        super(InvalidArgumentException,self).__init__(RobotRaconteurPython.MessageErrorType_InvalidArgument, "RobotRaconteur.InvalidArgument",message)

class OperationFailedException(RobotRaconteurException):
    def __init__(self,message=""):
        super(OperationFailedException,self).__init__(RobotRaconteurPython.MessageErrorType_OperationFailed, "RobotRaconteur.OperationFailed",message)

class NullValueException(RobotRaconteurException):
    def __init__(self,message=""):
        super(NullValueException,self).__init__(RobotRaconteurPython.MessageErrorType_NullValue, "RobotRaconteur.NullValue",message)

class InternalErrorException(RobotRaconteurException):
    def __init__(self,message=""):
        super(InternalErrorException,self).__init__(RobotRaconteurPython.MessageErrorType_InternalError, "RobotRaconteur.InternalError",message)

class SystemResourcePermissionDeniedException(RobotRaconteurException):
    def __init__(self,message=""):
        super(SystemResourcePermissionDeniedException,self).__init__(RobotRaconteurPython.MessageErrorType_SystemResourcePermissionDenied, "RobotRaconteur.SystemResourcePermissionDenied",message)

class OutOfSystemResourceException(RobotRaconteurException):
    def __init__(self,message=""):
        super(OutOfSystemResourceException,self).__init__(RobotRaconteurPython.MessageErrorType_OutOfSystemResource, "RobotRaconteur.OutOfSystemResource",message)

class SystemResourceException(RobotRaconteurException):
    def __init__(self,message=""):
        super(SystemResourceException,self).__init__(RobotRaconteurPython.MessageErrorType_SystemResourceError, "RobotRaconteur.SystemResourceError",message)

class ResourceNotFoundException(RobotRaconteurException):
    def __init__(self,message=""):
        super(ResourceNotFoundException,self).__init__(RobotRaconteurPython.MessageErrorType_ResourceNotFound, "RobotRaconteur.ResourceNotFound",message)

class IOException(RobotRaconteurException):
    def __init__(self,message=""):
        super(IOException,self).__init__(RobotRaconteurPython.MessageErrorType_IOError, "RobotRaconteur.IOError",message)

class BufferLimitViolationException(RobotRaconteurException):
    def __init__(self,message=""):
        super(BufferLimitViolationException,self).__init__(RobotRaconteurPython.MessageErrorType_BufferLimitViolation, "RobotRaconteur.BufferLimitViolation",message)

class ServiceDefinitionException(RobotRaconteurException):
    def __init__(self,message=""):
        super(ServiceDefinitionException,self).__init__(RobotRaconteurPython.MessageErrorType_ServiceDefinitionError, "RobotRaconteur.ServiceDefinitionError",message)

class OutOfRangeException(RobotRaconteurException):
    def __init__(self,message=""):
        super(OutOfRangeException,self).__init__(RobotRaconteurPython.MessageErrorType_OutOfRange, "RobotRaconteur.OutOfRange",message)

class KeyNotFoundException(RobotRaconteurException):
    def __init__(self,message=""):
        super(KeyNotFoundException,self).__init__(RobotRaconteurPython.MessageErrorType_KeyNotFound, "RobotRaconteur.KeyNotFound",message)

class RobotRaconteurRemoteException(RobotRaconteurException):
    def __init__(self,name,message):
        super(RobotRaconteurRemoteException,self).__init__(RobotRaconteurPython.MessageErrorType_RemoteError, name,message)

class RequestTimeoutException(RobotRaconteurException):
    def __init__(self,message=""):
        super(RequestTimeoutException,self).__init__(RobotRaconteurPython.MessageErrorType_RequestTimeout, "RobotRaconteur.RequestTimeout",message)

class ReadOnlyMemberException(RobotRaconteurException):
    def __init__(self,message=""):
        super(ReadOnlyMemberException,self).__init__(RobotRaconteurPython.MessageErrorType_ReadOnlyMember, "RobotRaconteur.ReadOnlyMember",message)

class WriteOnlyMemberException(RobotRaconteurException):
    def __init__(self,message=""):
        super(WriteOnlyMemberException,self).__init__(RobotRaconteurPython.MessageErrorType_WriteOnlyMember, "RobotRaconteur.WriteOnlyMember",message)

class NotImplementedException(RobotRaconteurException):
    def __init__(self,message=""):
        super(NotImplementedException,self).__init__(RobotRaconteurPython.MessageErrorType_NotImplementedError, "RobotRaconteur.NotImplementedError",message)

class MemberBusyException(RobotRaconteurException):
    def __init__(self,message=""):
        super(MemberBusyException,self).__init__(RobotRaconteurPython.MessageErrorType_MemberBusy, "RobotRaconteur.MemberBusy",message)

class ValueNotSetException(RobotRaconteurException):
    def __init__(self,message=""):
        super(ValueNotSetException,self).__init__(RobotRaconteurPython.MessageErrorType_ValueNotSet, "RobotRaconteur.ValueNotSet",message)

class AuthenticationException(RobotRaconteurException):
    def __init__(self,message=""):
        super(AuthenticationException,self).__init__(RobotRaconteurPython.MessageErrorType_AuthenticationError, "RobotRaconteur.AuthenticationError",message)

class ObjectLockedException(RobotRaconteurException):
    def __init__(self,message=""):
        super(ObjectLockedException,self).__init__(RobotRaconteurPython.MessageErrorType_ObjectLockedError, "RobotRaconteur.ObjectLockedError",message)

class PermissionDeniedException(RobotRaconteurException):
    def __init__(self,message=""):
        super(PermissionDeniedException,self).__init__(RobotRaconteurPython.MessageErrorType_PermissionDenied, "RobotRaconteur.PermissionDenied",message)

class AbortOperationException(RobotRaconteurException):
    def __init__(self,message=""):
        super(AbortOperationException,self).__init__(RobotRaconteurPython.MessageErrorType_AbortOperation, "RobotRaconteur.AbortOperation",message)

class OperationAbortedException(RobotRaconteurException):
    def __init__(self,message=""):
        super(OperationAbortedException,self).__init__(RobotRaconteurPython.MessageErrorType_OperationAborted, "RobotRaconteur.OperationAborted",message)

class StopIterationException(RobotRaconteurException):
    def __init__(self,message=""):
        super(StopIterationException,self).__init__(RobotRaconteurPython.MessageErrorType_StopIteration, "RobotRaconteur.StopIteration",message)


class RobotRaconteurExceptionUtil:

    @staticmethod
    def ExceptionToErrorCode(exception, entry):

        if (isinstance(exception,RobotRaconteurException)):
            return exception.errorcode, exception.errorname, exception.message
        else:
            return RobotRaconteurPython.MessageErrorType_RemoteError, type(exception).__name__, exception.message

    @staticmethod
    def ErrorCodeToException(code,name,errstr):
        if (code==RobotRaconteurPython.MessageErrorType_RemoteError):
            e= GetExceptionType(name)
            return e(errstr)


        if (code==RobotRaconteurPython.MessageErrorType_ConnectionError):
            return ConnectionException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_ProtocolError):
            return ProtocolException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_ServiceNotFound):
            return ServiceNotFoundException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_ObjectNotFound):
            return ObjectNotFoundException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_InvalidEndpoint):
            return InvalidEndpointException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_EndpointCommunicationFatalError):
            return EndpointCommunicationFatalException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_NodeNotFound):
            return NodeNotFoundException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_ServiceError):
            return ServiceException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_MemberNotFound):
            return MemberNotFoundException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_MemberFormatMismatch):
            return MemberFormatMismatchException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_DataTypeMismatch):
            return DataTypeMismatchException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_DataTypeError):
            return DataTypeException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_DataSerializationError):
            return DataSerializationException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_MessageEntryNotFound):
            return MessageEntryNotFoundException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_MessageElementNotFound):
            return MessageElementNotFoundException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_UnknownError):
            return UnknownException(name,errstr)

        if (code==RobotRaconteurPython.MessageErrorType_InvalidOperation):
            return InvalidOperationException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_InvalidArgument):
            return InvalidArgumentException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_OperationFailed):
            return OperationFailedException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_NullValue):
            return NullValueException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_InternalError):
            return InternalErrorException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_SystemResourcePermissionDenied):
            return SystemResourcePermissionDeniedException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_OutOfSystemResource):
            return OutOfSystemResourceException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_SystemResourceError):
            return SystemResourceException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_ResourceNotFound):
            return ResourceNotFoundException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_IOError):
            return IOException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_BufferLimitViolation):
            return BufferLimitViolationException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_ServiceDefinitionError):
            return ServiceDefinitionException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_OutOfRange):
            return OutOfRangeException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_KeyNotFound):
            return KeyNotFoundException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_RemoteError):
            return RobotRaconteurRemoteException(name,errstr)

        if (code==RobotRaconteurPython.MessageErrorType_RequestTimeout):
            return RequestTimeoutException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_ReadOnlyMember):
            return ReadOnlyMemberException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_WriteOnlyMember):
            return WriteOnlyMemberException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_NotImplementedError):
            return NotImplementedException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_MemberBusy):
            return MemberBusyException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_ValueNotSet):
            return ValueNotSetException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_AuthenticationError):
            return AuthenticationException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_ObjectLockedError):
            return ObjectLockedException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_PermissionDenied):
            return PermissionDeniedException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_AbortOperation):
            return AbortOperationException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_OperationAborted):
            return OperationAbortedException(errstr)

        if (code==RobotRaconteurPython.MessageErrorType_StopIteration):
            return StopIterationException(errstr)
        
        return RobotRaconteurException(code,name,errstr)

_generated_exceptions=dict()
_generated_exceptions_lock=threading.Lock()

def _ExceptionFactory(name):
    def __init__(self,message):
        super(self.__class__,self).__init__(name,message)
    return type(name, (RobotRaconteurRemoteException,), {"__init__": __init__})

def GetExceptionType(exception_name):
    if (not (isinstance(exception_name,str) or isinstance(exception_name,unicode))):
        return Exception
    ex1=exception_name.replace('.','__')
    ex2=''.join([x for x in ex1 if x in (string.ascii_letters + string.digits + "_")])
    with _generated_exceptions_lock:
        if (exception_name in _generated_exceptions):
            return _generated_exceptions[exception_name]
        else:
            newexp=_ExceptionFactory(exception_name)
            _generated_exceptions[exception_name]=newexp
            return newexp
