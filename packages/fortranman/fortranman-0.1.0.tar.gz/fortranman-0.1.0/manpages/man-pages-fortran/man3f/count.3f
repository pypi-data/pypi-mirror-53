." Copyright (C) 1999-2015 Free Software Foundation, Inc.

." Permission is granted to copy, distribute and/or modify this document
." under the terms of the GNU Free Documentation License, Version 1.3 or
." any later version published by the Free Software Foundation; with the
." Invariant Sections being ``Funding Free Software'', the Front-Cover
." Texts being (a) (see below), and with the Back-Cover Texts being (b)
." (see below).  A copy of the license is included in the section entitled
." ``GNU Free Documentation License''.

." (a) The FSF's Front-Cover Text is:

."      A GNU Manual

." (b) The FSF's Back-Cover Text is:

."      You have freedom to copy and modify this GNU Manual, like GNU
."      software.  Copies published by the Free Software Foundation raise
."      funds for GNU development.
.PP


.TH "COUNT" "3f" "Sun Mar 27 2016" "Intrinsic Fortran procedures" "Intrinsic Fortran procedures"

     
.SH DESCRIPTION

Counts the number of \fI.TRUE.\fP elements in a logical \fIMASK\fP,
or, if the \fIDIM\fP argument is supplied, counts the number of
elements along each row of the array in the \fIDIM\fP direction. 
If the array has zero size, or all of the elements of \fIMASK\fP are
\fI.FALSE.\fP, then the result is \fI0\fP.

.SH STANDARD
Fortran 95 and later, with \fIKIND\fP argument Fortran 2003 and later

.SH CLASS
Transformational function

.SH SYNTAX
\fIRESULT = COUNT(MASK [, DIM, KIND])\fP

.SH ARGUMENTS

.PP
\fIMASK\fP The type shall be \fILOGICAL\fP. 
\fIDIM\fP  (Optional) The type shall be \fIINTEGER\fP. 
\fIKIND\fP (Optional) An \fIINTEGER\fP initialization
expression indicating the kind parameter of the result.

.SH RETURN VALUE
The return value is of type \fIINTEGER\fP and of kind \fIKIND\fP. If
\fIKIND\fP is absent, the return value is of default integer kind. 
If \fIDIM\fP is present, the result is an array with a rank one less
than the rank of \fIARRAY\fP, and a size corresponding to the shape
of \fIARRAY\fP with the \fIDIM\fP dimension removed.

.SH EXAMPLE

          program test_count
              integer, dimension(2,3) :: a, b
              logical, dimension(2,3) :: mask
              a = reshape( (/ 1, 2, 3, 4, 5, 6 /), (/ 2, 3 /))
              b = reshape( (/ 0, 7, 3, 4, 5, 8 /), (/ 2, 3 /))
              print '(3i3)', a(1,:)
              print '(3i3)', a(2,:)
              print *
              print '(3i3)', b(1,:)
              print '(3i3)', b(2,:)
              print *
              mask = a.ne.b
              print '(3l3)', mask(1,:)
              print '(3l3)', mask(2,:)
              print *
              print '(3i3)', count(mask)
              print *
              print '(3i3)', count(mask, 1)
              print *
              print '(3i3)', count(mask, 2)
          end program test_count
     

.SH AUTHOR
.PP
This information was taken from the GFortran documentation (\fBhttps://gcc.gnu.org/onlinedocs/gcc-5.3.0/gfortran/\fP) and converted to a manpage by AstroFloyd (\fBhttp://astrofloyd.org\fP).

