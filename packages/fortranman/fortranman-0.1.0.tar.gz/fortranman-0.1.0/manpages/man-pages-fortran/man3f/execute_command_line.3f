." Copyright (C) 1999-2015 Free Software Foundation, Inc.

." Permission is granted to copy, distribute and/or modify this document
." under the terms of the GNU Free Documentation License, Version 1.3 or
." any later version published by the Free Software Foundation; with the
." Invariant Sections being ``Funding Free Software'', the Front-Cover
." Texts being (a) (see below), and with the Back-Cover Texts being (b)
." (see below).  A copy of the license is included in the section entitled
." ``GNU Free Documentation License''.

." (a) The FSF's Front-Cover Text is:

."      A GNU Manual

." (b) The FSF's Back-Cover Text is:

."      You have freedom to copy and modify this GNU Manual, like GNU
."      software.  Copies published by the Free Software Foundation raise
."      funds for GNU development.
.PP


.TH "EXECUTE_COMMAND_LINE" "3f" "Sun Mar 27 2016" "Intrinsic Fortran procedures" "Intrinsic Fortran procedures"

     
.SH DESCRIPTION
\fIEXECUTE_COMMAND_LINE\fP runs a shell command, synchronously or
asynchronously.

.PP
The \fICOMMAND\fP argument is passed to the shell and executed, using
the C library's \fIsystem\fP call.  (The shell is \fIsh\fP on Unix
systems, and \fIcmd.exe\fP on Windows.)  If \fIWAIT\fP is present
and has the value false, the execution of the command is asynchronous
if the system supports it; otherwise, the command is executed
synchronously.

.PP
The three last arguments allow the user to get status information.  After
synchronous execution, \fIEXITSTAT\fP contains the integer exit code of
the command, as returned by \fIsystem\fP.  \fICMDSTAT\fP is set to zero
if the command line was executed (whatever its exit status was). 
\fICMDMSG\fP is assigned an error message if an error has occurred.

.PP
Note that the \fIsystem\fP function need not be thread-safe. It is
the responsibility of the user to ensure that \fIsystem\fP is not
called concurrently.

.SH STANDARD
Fortran 2008 and later

.SH CLASS
Subroutine

.SH SYNTAX
\fICALL EXECUTE_COMMAND_LINE(COMMAND [, WAIT, EXITSTAT, CMDSTAT, CMDMSG ])\fP

.SH ARGUMENTS

.PP
\fICOMMAND\fP Shall be a default \fICHARACTER\fP scalar. 
\fIWAIT\fP (Optional) Shall be a default \fILOGICAL\fP scalar. 
\fIEXITSTAT\fP (Optional) Shall be an \fIINTEGER\fP of the
default kind. 
\fICMDSTAT\fP (Optional) Shall be an \fIINTEGER\fP of the
default kind. 
\fICMDMSG\fP (Optional) Shall be an \fICHARACTER\fP scalar of the
default kind.

.SH EXAMPLE

          program test_exec
            integer :: i
          
            call execute_command_line ("external_prog.exe", exitstat=i)
            print *, "Exit status of external_prog.exe was ", i
          
            call execute_command_line ("reindex_files.exe", wait=.false.)
            print *, "Now reindexing files in the background"
          
          end program test_exec
.SH NOTE

Because this intrinsic is implemented in terms of the \fIsystem\fP
function call, its behavior with respect to signaling is processor
dependent. In particular, on POSIX-compliant systems, the SIGINT and
SIGQUIT signals will be ignored, and the SIGCHLD will be blocked. As
such, if the parent process is terminated, the child process might not be
terminated alongside.

.SH SEE ALSO
SYSTEM


.SH AUTHOR
.PP
This information was taken from the GFortran documentation (\fBhttps://gcc.gnu.org/onlinedocs/gcc-5.3.0/gfortran/\fP) and converted to a manpage by AstroFloyd (\fBhttp://astrofloyd.org\fP).

