." Copyright (C) 1999-2015 Free Software Foundation, Inc.

." Permission is granted to copy, distribute and/or modify this document
." under the terms of the GNU Free Documentation License, Version 1.3 or
." any later version published by the Free Software Foundation; with the
." Invariant Sections being ``Funding Free Software'', the Front-Cover
." Texts being (a) (see below), and with the Back-Cover Texts being (b)
." (see below).  A copy of the license is included in the section entitled
." ``GNU Free Documentation License''.

." (a) The FSF's Front-Cover Text is:

."      A GNU Manual

." (b) The FSF's Back-Cover Text is:

."      You have freedom to copy and modify this GNU Manual, like GNU
."      software.  Copies published by the Free Software Foundation raise
."      funds for GNU development.
.PP


.TH "DOT_PRODUCT" "3f" "Sun Mar 27 2016" "Intrinsic Fortran procedures" "Intrinsic Fortran procedures"

     
.SH DESCRIPTION
\fIDOT_PRODUCT(VECTOR_A, VECTOR_B)\fP computes the dot product multiplication
of two vectors \fIVECTOR_A\fP and \fIVECTOR_B\fP.  The two vectors may be
either numeric or logical and must be arrays of rank one and of equal size. If
the vectors are \fIINTEGER\fP or \fIREAL\fP, the result is
\fISUM(VECTOR_A*VECTOR_B)\fP. If the vectors are \fICOMPLEX\fP, the result
is \fISUM(CONJG(VECTOR_A)*VECTOR_B)\fP. If the vectors are \fILOGICAL\fP,
the result is \fIANY(VECTOR_A .AND. VECTOR_B)\fP.

.SH STANDARD
Fortran 95 and later

.SH CLASS
Transformational function

.SH SYNTAX
\fIRESULT = DOT_PRODUCT(VECTOR_A, VECTOR_B)\fP

.SH ARGUMENTS

.PP
\fIVECTOR_A\fP The type shall be numeric or \fILOGICAL\fP, rank 1. 
\fIVECTOR_B\fP The type shall be numeric if \fIVECTOR_A\fP is of numeric type or \fILOGICAL\fP if \fIVECTOR_A\fP is of type \fILOGICAL\fP. \fIVECTOR_B\fP shall be a rank-one array.

.SH RETURN VALUE
If the arguments are numeric, the return value is a scalar of numeric type,
\fIINTEGER\fP, \fIREAL\fP, or \fICOMPLEX\fP.  If the arguments are
\fILOGICAL\fP, the return value is \fI.TRUE.\fP or \fI.FALSE.\fP.

.SH EXAMPLE

          program test_dot_prod
              integer, dimension(3) :: a, b
              a = (/ 1, 2, 3 /)
              b = (/ 4, 5, 6 /)
              print '(3i3)', a
              print *
              print '(3i3)', b
              print *
              print *, dot_product(a,b)
          end program test_dot_prod
     

.SH AUTHOR
.PP
This information was taken from the GFortran documentation (\fBhttps://gcc.gnu.org/onlinedocs/gcc-5.3.0/gfortran/\fP) and converted to a manpage by AstroFloyd (\fBhttp://astrofloyd.org\fP).

