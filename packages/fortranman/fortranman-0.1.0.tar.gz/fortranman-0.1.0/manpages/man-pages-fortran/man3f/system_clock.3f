." Copyright (C) 1999-2015 Free Software Foundation, Inc.

." Permission is granted to copy, distribute and/or modify this document
." under the terms of the GNU Free Documentation License, Version 1.3 or
." any later version published by the Free Software Foundation; with the
." Invariant Sections being ``Funding Free Software'', the Front-Cover
." Texts being (a) (see below), and with the Back-Cover Texts being (b)
." (see below).  A copy of the license is included in the section entitled
." ``GNU Free Documentation License''.

." (a) The FSF's Front-Cover Text is:

."      A GNU Manual

." (b) The FSF's Back-Cover Text is:

."      You have freedom to copy and modify this GNU Manual, like GNU
."      software.  Copies published by the Free Software Foundation raise
."      funds for GNU development.
.PP


.TH "SYSTEM_CLOCK" "3f" "Sun Mar 27 2016" "Intrinsic Fortran procedures" "Intrinsic Fortran procedures"

     
.SH DESCRIPTION
Determines the \fICOUNT\fP of a processor clock since an unspecified
time in the past modulo \fICOUNT_MAX\fP, \fICOUNT_RATE\fP determines
the number of clock ticks per second.  If the platform supports a
monotonic clock, that clock is used and can, depending on the platform
clock implementation, provide up to nanosecond resolution.  If a
monotonic clock is not available, the implementation falls back to a
realtime clock.

.PP
\fICOUNT_RATE\fP is system dependent and can vary depending on the kind of
the arguments. For \fIkind=4\fP arguments (and smaller integer kinds),
\fICOUNT\fP represents milliseconds, while for \fIkind=8\fP arguments (and
larger integer kinds), \fICOUNT\fP typically represents micro- or
nanoseconds depending on resolution of the underlying platform clock. 
\fICOUNT_MAX\fP usually equals \fIHUGE(COUNT_MAX)\fP. Note that the
millisecond resolution of the \fIkind=4\fP version implies that the
\fICOUNT\fP will wrap around in roughly 25 days. In order to avoid issues
with the wrap around and for more precise timing, please use the
\fIkind=8\fP version.

.PP
If there is no clock, or querying the clock fails, \fICOUNT\fP is set
to \fI-HUGE(COUNT)\fP, and \fICOUNT_RATE\fP and \fICOUNT_MAX\fP are
set to zero.

.PP
When running on a platform using the GNU C library (glibc) version
2.16 or older, or a derivative thereof, the high resolution monotonic
clock is available only when linking with the \fIrt\fP library.  This
can be done explicitly by adding the \fI-lrt\fP flag when linking the
application, but is also done implicitly when using OpenMP.

.PP
On the Windows platform, the version with \fIkind=4\fP arguments uses
the \fIGetTickCount\fP function, whereas the \fIkind=8\fP version
uses \fIQueryPerformanceCounter\fP and
\fIQueryPerformanceCounterFrequency\fP. For more information, and
potential caveats, please see the platform documentation.

.SH STANDARD
Fortran 95 and later

.SH CLASS
Subroutine

.SH SYNTAX
\fICALL SYSTEM_CLOCK([COUNT, COUNT_RATE, COUNT_MAX])\fP

.SH ARGUMENTS

.PP
\fICOUNT\fP      (Optional) shall be a scalar of type
\fIINTEGER\fP with \fIINTENT(OUT)\fP. 
\fICOUNT_RATE\fP (Optional) shall be a scalar of type
\fIINTEGER\fP or \fIREAL\fP, with \fIINTENT(OUT)\fP. 
\fICOUNT_MAX\fP  (Optional) shall be a scalar of type
\fIINTEGER\fP with \fIINTENT(OUT)\fP.

.SH EXAMPLE

          PROGRAM test_system_clock
            INTEGER :: count, count_rate, count_max
            CALL SYSTEM_CLOCK(count, count_rate, count_max)
            WRITE(*,*) count, count_rate, count_max
          END PROGRAM
.SH SEE ALSO
DATE_AND_TIME, CPU_TIME


.SH AUTHOR
.PP
This information was taken from the GFortran documentation (\fBhttps://gcc.gnu.org/onlinedocs/gcc-5.3.0/gfortran/\fP) and converted to a manpage by AstroFloyd (\fBhttp://astrofloyd.org\fP).

