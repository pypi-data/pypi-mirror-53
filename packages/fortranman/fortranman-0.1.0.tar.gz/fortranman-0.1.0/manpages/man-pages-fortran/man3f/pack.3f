." Copyright (C) 1999-2015 Free Software Foundation, Inc.

." Permission is granted to copy, distribute and/or modify this document
." under the terms of the GNU Free Documentation License, Version 1.3 or
." any later version published by the Free Software Foundation; with the
." Invariant Sections being ``Funding Free Software'', the Front-Cover
." Texts being (a) (see below), and with the Back-Cover Texts being (b)
." (see below).  A copy of the license is included in the section entitled
." ``GNU Free Documentation License''.

." (a) The FSF's Front-Cover Text is:

."      A GNU Manual

." (b) The FSF's Back-Cover Text is:

."      You have freedom to copy and modify this GNU Manual, like GNU
."      software.  Copies published by the Free Software Foundation raise
."      funds for GNU development.
.PP


.TH "PACK" "3f" "Sun Mar 27 2016" "Intrinsic Fortran procedures" "Intrinsic Fortran procedures"

     
.SH DESCRIPTION
Stores the elements of \fIARRAY\fP in an array of rank one.

.PP
The beginning of the resulting array is made up of elements whose \fIMASK\fP
equals \fITRUE\fP. Afterwards, positions are filled with elements taken from
\fIVECTOR\fP.

.SH STANDARD
Fortran 95 and later

.SH CLASS
Transformational function

.SH SYNTAX
\fIRESULT = PACK(ARRAY, MASK[,VECTOR])\fP

.SH ARGUMENTS

.PP
\fIARRAY\fP  Shall be an array of any type. 
\fIMASK\fP   Shall be an array of type \fILOGICAL\fP and
of the same size as \fIARRAY\fP. Alternatively, it may be a \fILOGICAL\fP
scalar. 
\fIVECTOR\fP (Optional) shall be an array of the same type
as \fIARRAY\fP and of rank one. If present, the number of elements in
\fIVECTOR\fP shall be equal to or greater than the number of true elements
in \fIMASK\fP. If \fIMASK\fP is scalar, the number of elements in
\fIVECTOR\fP shall be equal to or greater than the number of elements in
\fIARRAY\fP.

.SH RETURN VALUE
The result is an array of rank one and the same type as that of \fIARRAY\fP. 
If \fIVECTOR\fP is present, the result size is that of \fIVECTOR\fP, the
number of \fITRUE\fP values in \fIMASK\fP otherwise.

.SH EXAMPLE
Gathering nonzero elements from an array:
          PROGRAM test_pack_1
            INTEGER :: m(6)
            m = (/ 1, 0, 0, 0, 5, 0 /)
            WRITE(*, FMT="(6(I0, ' '))") pack(m, m /= 0)  ! "1 5"
          END PROGRAM
.PP
Gathering nonzero elements from an array and appending elements from \fIVECTOR\fP:
          PROGRAM test_pack_2
            INTEGER :: m(4)
            m = (/ 1, 0, 0, 2 /)
            WRITE(*, FMT="(4(I0, ' '))") pack(m, m /= 0, (/ 0, 0, 3, 4 /))  ! "1 2 3 4"
          END PROGRAM
.SH SEE ALSO
UNPACK


.SH AUTHOR
.PP
This information was taken from the GFortran documentation (\fBhttps://gcc.gnu.org/onlinedocs/gcc-5.3.0/gfortran/\fP) and converted to a manpage by AstroFloyd (\fBhttp://astrofloyd.org\fP).

