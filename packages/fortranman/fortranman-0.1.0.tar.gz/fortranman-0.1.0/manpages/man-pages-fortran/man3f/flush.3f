." Copyright (C) 1999-2015 Free Software Foundation, Inc.

." Permission is granted to copy, distribute and/or modify this document
." under the terms of the GNU Free Documentation License, Version 1.3 or
." any later version published by the Free Software Foundation; with the
." Invariant Sections being ``Funding Free Software'', the Front-Cover
." Texts being (a) (see below), and with the Back-Cover Texts being (b)
." (see below).  A copy of the license is included in the section entitled
." ``GNU Free Documentation License''.

." (a) The FSF's Front-Cover Text is:

."      A GNU Manual

." (b) The FSF's Back-Cover Text is:

."      You have freedom to copy and modify this GNU Manual, like GNU
."      software.  Copies published by the Free Software Foundation raise
."      funds for GNU development.
.PP


.TH "FLUSH" "3f" "Sun Mar 27 2016" "Intrinsic Fortran procedures" "Intrinsic Fortran procedures"

     
.SH DESCRIPTION
Flushes Fortran unit(s) currently open for output. Without the optional
argument, all units are flushed, otherwise just the unit specified.

.SH STANDARD
GNU extension

.SH CLASS
Subroutine

.SH SYNTAX
\fICALL FLUSH(UNIT)\fP

.SH ARGUMENTS

.PP
\fIUNIT\fP (Optional) The type shall be \fIINTEGER\fP.

.SH NOTE
Beginning with the Fortran 2003 standard, there is a \fIFLUSH\fP
statement that should be preferred over the \fIFLUSH\fP intrinsic.

.PP
The \fIFLUSH\fP intrinsic and the Fortran 2003 \fIFLUSH\fP statement
have identical effect: they flush the runtime library's I/O buffer so
that the data becomes visible to other processes. This does not guarantee
that the data is committed to disk.

.PP
On POSIX systems, you can request that all data is transferred  to  the
storage device by calling the \fIfsync\fP function, with the POSIX file
descriptor of the I/O unit as argument (retrieved with GNU intrinsic
\fIFNUM\fP). The following example shows how:

            ! Declare the interface for POSIX fsync function
            interface
              function fsync (fd) bind(c,name="fsync")
              use iso_c_binding, only: c_int
                integer(c_int), value :: fd
                integer(c_int) :: fsync
              end function fsync
            end interface
          
            ! Variable declaration
            integer :: ret
          
            ! Opening unit 10
            open (10,file="foo")
          
            ! ...
            ! Perform I/O on unit 10
            ! ...
          
            ! Flush and sync
            flush(10)
            ret = fsync(fnum(10))
          
            ! Handle possible error
            if (ret /= 0) stop "Error calling FSYNC"
     

.SH AUTHOR
.PP
This information was taken from the GFortran documentation (\fBhttps://gcc.gnu.org/onlinedocs/gcc-5.3.0/gfortran/\fP) and converted to a manpage by AstroFloyd (\fBhttp://astrofloyd.org\fP).

