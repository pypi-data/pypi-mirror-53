#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2015-2019 Bitergia
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#     Alvaro del Castillo San Felix <acs@bitergia.com>
#

import argparse
import logging
import os
import sys

from datetime import date, timedelta, timezone

from dateutil import parser

# To execute it without installing it
sys.path.insert(0, '.')
from manuscripts.report import Report
from manuscripts.config import Config
from manuscripts._version import __version__

from manuscripts.esquery import get_first_date_of_index

def get_params():
    """Parse command line arguments"""

    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--version', action='version', version=__version__,
                        help="Show version")
    parser.add_argument('-d', '--data-dir', default='data',
                        help="Directory to store the data results (default: data)")
    parser.add_argument('-e', '--end-date', default='now',
                        help="End date for the report (UTC) (<) (default: now)")
    parser.add_argument('-f', '--filters', nargs='*',
                        help='Filters to be applied to all the report data: "field1:value1" "field2:value2". \
                              Use *field for the inverse filter.')
    parser.add_argument('-g', '--debug', dest='debug', action='store_true')
    parser.add_argument('-i', '--interval', default='month', help="Analysis interval (month (default), quarter, year)")
    parser.add_argument('-s', '--start-date', default=None,
                        help="Start date for the report (UTC) (>=) (default: None)")
    parser.add_argument('--offset', help="Offset to be used in date histogram aggregations (e.g.: +31d)")
    parser.add_argument('-u', '--elastic-url', help="Elastic URL with the enriched indexes")
    parser.add_argument('--data-sources', nargs='*',
                        help="Data source for the report (git, ...)")
    parser.add_argument('-n', '--name', nargs='?', const="Unnamed", default="Unnamed", help="Report name (default: Unnamed)")
    parser.add_argument('-m', '--mordred-config', help="Mordred config file")
    parser.add_argument('-p', '--projects', action='store_true', help="Generate per project data")
    parser.add_argument('--indices', default=[], nargs='*',
                        help="Indices to be used to generate the report (git_index, github_index ...)")
    parser.add_argument('-l', '--logo', help="Provide a logo for the report, Formats allowed .png,.pdf,.jpg,.mps,.jpeg,.jbig2,.jb2,.PNG,.PDF,.JPG,.JPEG,.JBIG2,.JB2,.eps")
    
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    return parser.parse_args()


def get_offset_days(offset):
    """ offset format supported: '+31d' """
    days = int(offset[1:-1])
    return days

def get_min_date(url, indices, data_sources):
    """Get the min date from all the data sources/indices available"""
    if indices:
        min_date = min([get_first_date_of_index(url, index) for index in indices])
    else:
        if "github" in data_sources:
            data_sources.remove("github")
            data_sources.append("github_issues")
            data_sources.append("github_prs")
        min_date = min([get_first_date_of_index(url, Report.ds2index[Report.ds2class[ds]]) \
                   for ds in data_sources])
    return min_date


if __name__ == '__main__':

    args = get_params()

    if args.debug:
        logging.basicConfig(level=logging.DEBUG, format='[%(asctime)s] %(message)s')
        logging.debug("Debug mode activated")
    else:
        logging.basicConfig(level=logging.INFO, format='%(asctime)s %(message)s')
    logging.getLogger("urllib3").setLevel(logging.WARNING)
    logging.getLogger("requests").setLevel(logging.WARNING)

    if not (args.elastic_url and args.data_sources):
        logging.error('Missing needed params for Report: elastic_url and data_sources')
        sys.exit(1)

    # Check if each data source has a corresponding index, if available
    if len(args.data_sources) < len(args.indices):
        logging.error('Number of data sources do not match the corresponding number of indices provided')
        sys.exit(1)

    elastic = args.elastic_url
    report_name = args.name
    data_dir = args.data_dir
    data_sources = args.data_sources
    logo=args.logo

    if not os.path.exists(data_dir):
        os.makedirs(data_dir)

    # All the dates must be UTC, including those from command line
    if args.end_date == 'now':
        end_date = parser.parse(date.today().strftime('%Y-%m-%d')).replace(tzinfo=timezone.utc)
    else:
        end_date = parser.parse(args.end_date).replace(tzinfo=timezone.utc)
    # The end date is not included, the report must finish the day before
    end_date += timedelta(microseconds=-1)

    start_date = args.start_date
    # if start date is not present, it is calculated by querying all the indices given
    if not start_date:
        start_date = get_min_date(elastic, args.indices, args.data_sources)
    start_date = parser.parse(start_date).replace(tzinfo=timezone.utc)

    offset = args.offset if args.offset else None

    # if offset, start and end must be adjusted to it

    if offset:
        logging.debug("Adjusting range %s-%s for offset %s", start_date, end_date, offset)
        offset_days = get_offset_days(offset)
        start_date = start_date + timedelta(days=offset_days)
        end_date = end_date + timedelta(days=offset_days)
        logging.debug("New range %s-%s with offset %s",
                      start_date, end_date, offset)

    if args.mordred_config:
        # Read the mordred config file and configure the data sources according to it
        config = Config(args.mordred_config)
        data_sources = config.get_data_sources()
        elastic = config.conf['es_enrichment']['url']
        if not args.name:
            report_name = config.conf['general']['short_name']

    report = Report(elastic, start=start_date,
                    end=end_date, data_dir=data_dir,
                    filters=Report.get_core_filters(args.filters),
                    interval=args.interval,
                    offset=offset,
                    data_sources=data_sources,
                    report_name=report_name,
                    projects=args.projects,
                    indices=args.indices,
                    logo=logo)
    report.create()
