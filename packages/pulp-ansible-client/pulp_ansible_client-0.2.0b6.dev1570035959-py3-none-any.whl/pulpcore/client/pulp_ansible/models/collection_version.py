# coding: utf-8

"""
    Pulp 3 API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CollectionVersion(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'href': 'str',
        'created': 'datetime',
        'type': 'str',
        'artifact': 'str',
        'relative_path': 'str',
        'file': 'str',
        'repository': 'str',
        'md5': 'str',
        'sha1': 'str',
        'sha224': 'str',
        'sha256': 'str',
        'sha384': 'str',
        'sha512': 'str',
        'id': 'str',
        'authors': 'list[str]',
        'contents': 'list[dict(str, str)]',
        'dependencies': 'dict(str, str)',
        'description': 'str',
        'docs_blob': 'dict(str, str)',
        'documentation': 'str',
        'homepage': 'str',
        'issues': 'str',
        'is_certified': 'bool',
        'license': 'list[str]',
        'name': 'str',
        'namespace': 'str',
        'tags': 'list[TagNested]',
        'version': 'str',
        'expected_name': 'str',
        'expected_namespace': 'str',
        'expected_version': 'str'
    }

    attribute_map = {
        'href': '_href',
        'created': '_created',
        'type': '_type',
        'artifact': 'artifact',
        'relative_path': 'relative_path',
        'file': 'file',
        'repository': 'repository',
        'md5': 'md5',
        'sha1': 'sha1',
        'sha224': 'sha224',
        'sha256': 'sha256',
        'sha384': 'sha384',
        'sha512': 'sha512',
        'id': 'id',
        'authors': 'authors',
        'contents': 'contents',
        'dependencies': 'dependencies',
        'description': 'description',
        'docs_blob': 'docs_blob',
        'documentation': 'documentation',
        'homepage': 'homepage',
        'issues': 'issues',
        'is_certified': 'is_certified',
        'license': 'license',
        'name': 'name',
        'namespace': 'namespace',
        'tags': 'tags',
        'version': 'version',
        'expected_name': 'expected_name',
        'expected_namespace': 'expected_namespace',
        'expected_version': 'expected_version'
    }

    def __init__(self, href=None, created=None, type=None, artifact=None, relative_path=None, file=None, repository=None, md5=None, sha1=None, sha224=None, sha256=None, sha384=None, sha512=None, id=None, authors=None, contents=None, dependencies=None, description=None, docs_blob=None, documentation=None, homepage=None, issues=None, is_certified=None, license=None, name=None, namespace=None, tags=None, version=None, expected_name=None, expected_namespace=None, expected_version=None):  # noqa: E501
        """CollectionVersion - a model defined in OpenAPI"""  # noqa: E501

        self._href = None
        self._created = None
        self._type = None
        self._artifact = None
        self._relative_path = None
        self._file = None
        self._repository = None
        self._md5 = None
        self._sha1 = None
        self._sha224 = None
        self._sha256 = None
        self._sha384 = None
        self._sha512 = None
        self._id = None
        self._authors = None
        self._contents = None
        self._dependencies = None
        self._description = None
        self._docs_blob = None
        self._documentation = None
        self._homepage = None
        self._issues = None
        self._is_certified = None
        self._license = None
        self._name = None
        self._namespace = None
        self._tags = None
        self._version = None
        self._expected_name = None
        self._expected_namespace = None
        self._expected_version = None
        self.discriminator = None

        if href is not None:
            self.href = href
        if created is not None:
            self.created = created
        if type is not None:
            self.type = type
        if artifact is not None:
            self.artifact = artifact
        self.relative_path = relative_path
        if file is not None:
            self.file = file
        if repository is not None:
            self.repository = repository
        if md5 is not None:
            self.md5 = md5
        if sha1 is not None:
            self.sha1 = sha1
        if sha224 is not None:
            self.sha224 = sha224
        if sha256 is not None:
            self.sha256 = sha256
        if sha384 is not None:
            self.sha384 = sha384
        if sha512 is not None:
            self.sha512 = sha512
        if id is not None:
            self.id = id
        if authors is not None:
            self.authors = authors
        if contents is not None:
            self.contents = contents
        if dependencies is not None:
            self.dependencies = dependencies
        if description is not None:
            self.description = description
        if docs_blob is not None:
            self.docs_blob = docs_blob
        if documentation is not None:
            self.documentation = documentation
        if homepage is not None:
            self.homepage = homepage
        if issues is not None:
            self.issues = issues
        if is_certified is not None:
            self.is_certified = is_certified
        if license is not None:
            self.license = license
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if tags is not None:
            self.tags = tags
        if version is not None:
            self.version = version
        if expected_name is not None:
            self.expected_name = expected_name
        if expected_namespace is not None:
            self.expected_namespace = expected_namespace
        if expected_version is not None:
            self.expected_version = expected_version

    @property
    def href(self):
        """Gets the href of this CollectionVersion.  # noqa: E501


        :return: The href of this CollectionVersion.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this CollectionVersion.


        :param href: The href of this CollectionVersion.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def created(self):
        """Gets the created of this CollectionVersion.  # noqa: E501

        Timestamp of creation.  # noqa: E501

        :return: The created of this CollectionVersion.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CollectionVersion.

        Timestamp of creation.  # noqa: E501

        :param created: The created of this CollectionVersion.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def type(self):
        """Gets the type of this CollectionVersion.  # noqa: E501


        :return: The type of this CollectionVersion.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CollectionVersion.


        :param type: The type of this CollectionVersion.  # noqa: E501
        :type: str
        """
        if type is not None and len(type) < 1:
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")  # noqa: E501

        self._type = type

    @property
    def artifact(self):
        """Gets the artifact of this CollectionVersion.  # noqa: E501

        Artifact file representing the physical content  # noqa: E501

        :return: The artifact of this CollectionVersion.  # noqa: E501
        :rtype: str
        """
        return self._artifact

    @artifact.setter
    def artifact(self, artifact):
        """Sets the artifact of this CollectionVersion.

        Artifact file representing the physical content  # noqa: E501

        :param artifact: The artifact of this CollectionVersion.  # noqa: E501
        :type: str
        """

        self._artifact = artifact

    @property
    def relative_path(self):
        """Gets the relative_path of this CollectionVersion.  # noqa: E501

        Path where the artifact is located relative to distributions base_path  # noqa: E501

        :return: The relative_path of this CollectionVersion.  # noqa: E501
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this CollectionVersion.

        Path where the artifact is located relative to distributions base_path  # noqa: E501

        :param relative_path: The relative_path of this CollectionVersion.  # noqa: E501
        :type: str
        """
        if relative_path is None:
            raise ValueError("Invalid value for `relative_path`, must not be `None`")  # noqa: E501
        if relative_path is not None and len(relative_path) < 1:
            raise ValueError("Invalid value for `relative_path`, length must be greater than or equal to `1`")  # noqa: E501

        self._relative_path = relative_path

    @property
    def file(self):
        """Gets the file of this CollectionVersion.  # noqa: E501

        An uploaded file that should be turned into the artifact of the content unit.  # noqa: E501

        :return: The file of this CollectionVersion.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this CollectionVersion.

        An uploaded file that should be turned into the artifact of the content unit.  # noqa: E501

        :param file: The file of this CollectionVersion.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def repository(self):
        """Gets the repository of this CollectionVersion.  # noqa: E501

        A URI of a repository the new content unit should be associated with.  # noqa: E501

        :return: The repository of this CollectionVersion.  # noqa: E501
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this CollectionVersion.

        A URI of a repository the new content unit should be associated with.  # noqa: E501

        :param repository: The repository of this CollectionVersion.  # noqa: E501
        :type: str
        """

        self._repository = repository

    @property
    def md5(self):
        """Gets the md5 of this CollectionVersion.  # noqa: E501

        The MD5 checksum if available.  # noqa: E501

        :return: The md5 of this CollectionVersion.  # noqa: E501
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this CollectionVersion.

        The MD5 checksum if available.  # noqa: E501

        :param md5: The md5 of this CollectionVersion.  # noqa: E501
        :type: str
        """
        if md5 is not None and len(md5) < 1:
            raise ValueError("Invalid value for `md5`, length must be greater than or equal to `1`")  # noqa: E501

        self._md5 = md5

    @property
    def sha1(self):
        """Gets the sha1 of this CollectionVersion.  # noqa: E501

        The SHA-1 checksum if available.  # noqa: E501

        :return: The sha1 of this CollectionVersion.  # noqa: E501
        :rtype: str
        """
        return self._sha1

    @sha1.setter
    def sha1(self, sha1):
        """Sets the sha1 of this CollectionVersion.

        The SHA-1 checksum if available.  # noqa: E501

        :param sha1: The sha1 of this CollectionVersion.  # noqa: E501
        :type: str
        """
        if sha1 is not None and len(sha1) < 1:
            raise ValueError("Invalid value for `sha1`, length must be greater than or equal to `1`")  # noqa: E501

        self._sha1 = sha1

    @property
    def sha224(self):
        """Gets the sha224 of this CollectionVersion.  # noqa: E501

        The SHA-224 checksum if available.  # noqa: E501

        :return: The sha224 of this CollectionVersion.  # noqa: E501
        :rtype: str
        """
        return self._sha224

    @sha224.setter
    def sha224(self, sha224):
        """Sets the sha224 of this CollectionVersion.

        The SHA-224 checksum if available.  # noqa: E501

        :param sha224: The sha224 of this CollectionVersion.  # noqa: E501
        :type: str
        """
        if sha224 is not None and len(sha224) < 1:
            raise ValueError("Invalid value for `sha224`, length must be greater than or equal to `1`")  # noqa: E501

        self._sha224 = sha224

    @property
    def sha256(self):
        """Gets the sha256 of this CollectionVersion.  # noqa: E501

        The SHA-256 checksum if available.  # noqa: E501

        :return: The sha256 of this CollectionVersion.  # noqa: E501
        :rtype: str
        """
        return self._sha256

    @sha256.setter
    def sha256(self, sha256):
        """Sets the sha256 of this CollectionVersion.

        The SHA-256 checksum if available.  # noqa: E501

        :param sha256: The sha256 of this CollectionVersion.  # noqa: E501
        :type: str
        """
        if sha256 is not None and len(sha256) < 1:
            raise ValueError("Invalid value for `sha256`, length must be greater than or equal to `1`")  # noqa: E501

        self._sha256 = sha256

    @property
    def sha384(self):
        """Gets the sha384 of this CollectionVersion.  # noqa: E501

        The SHA-384 checksum if available.  # noqa: E501

        :return: The sha384 of this CollectionVersion.  # noqa: E501
        :rtype: str
        """
        return self._sha384

    @sha384.setter
    def sha384(self, sha384):
        """Sets the sha384 of this CollectionVersion.

        The SHA-384 checksum if available.  # noqa: E501

        :param sha384: The sha384 of this CollectionVersion.  # noqa: E501
        :type: str
        """
        if sha384 is not None and len(sha384) < 1:
            raise ValueError("Invalid value for `sha384`, length must be greater than or equal to `1`")  # noqa: E501

        self._sha384 = sha384

    @property
    def sha512(self):
        """Gets the sha512 of this CollectionVersion.  # noqa: E501

        The SHA-512 checksum if available.  # noqa: E501

        :return: The sha512 of this CollectionVersion.  # noqa: E501
        :rtype: str
        """
        return self._sha512

    @sha512.setter
    def sha512(self, sha512):
        """Sets the sha512 of this CollectionVersion.

        The SHA-512 checksum if available.  # noqa: E501

        :param sha512: The sha512 of this CollectionVersion.  # noqa: E501
        :type: str
        """
        if sha512 is not None and len(sha512) < 1:
            raise ValueError("Invalid value for `sha512`, length must be greater than or equal to `1`")  # noqa: E501

        self._sha512 = sha512

    @property
    def id(self):
        """Gets the id of this CollectionVersion.  # noqa: E501

        A collection identifier.  # noqa: E501

        :return: The id of this CollectionVersion.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CollectionVersion.

        A collection identifier.  # noqa: E501

        :param id: The id of this CollectionVersion.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def authors(self):
        """Gets the authors of this CollectionVersion.  # noqa: E501

        A list of the CollectionVersion content's authors.  # noqa: E501

        :return: The authors of this CollectionVersion.  # noqa: E501
        :rtype: list[str]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this CollectionVersion.

        A list of the CollectionVersion content's authors.  # noqa: E501

        :param authors: The authors of this CollectionVersion.  # noqa: E501
        :type: list[str]
        """

        self._authors = authors

    @property
    def contents(self):
        """Gets the contents of this CollectionVersion.  # noqa: E501

        A JSON field with data about the contents.  # noqa: E501

        :return: The contents of this CollectionVersion.  # noqa: E501
        :rtype: list[dict(str, str)]
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this CollectionVersion.

        A JSON field with data about the contents.  # noqa: E501

        :param contents: The contents of this CollectionVersion.  # noqa: E501
        :type: list[dict(str, str)]
        """

        self._contents = contents

    @property
    def dependencies(self):
        """Gets the dependencies of this CollectionVersion.  # noqa: E501

        A dict declaring Collections that this collection requires to be installed for it to be usable.  # noqa: E501

        :return: The dependencies of this CollectionVersion.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this CollectionVersion.

        A dict declaring Collections that this collection requires to be installed for it to be usable.  # noqa: E501

        :param dependencies: The dependencies of this CollectionVersion.  # noqa: E501
        :type: dict(str, str)
        """

        self._dependencies = dependencies

    @property
    def description(self):
        """Gets the description of this CollectionVersion.  # noqa: E501

        A short summary description of the collection.  # noqa: E501

        :return: The description of this CollectionVersion.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CollectionVersion.

        A short summary description of the collection.  # noqa: E501

        :param description: The description of this CollectionVersion.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def docs_blob(self):
        """Gets the docs_blob of this CollectionVersion.  # noqa: E501

        A JSON field holding the various documentation blobs in the collection.  # noqa: E501

        :return: The docs_blob of this CollectionVersion.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._docs_blob

    @docs_blob.setter
    def docs_blob(self, docs_blob):
        """Sets the docs_blob of this CollectionVersion.

        A JSON field holding the various documentation blobs in the collection.  # noqa: E501

        :param docs_blob: The docs_blob of this CollectionVersion.  # noqa: E501
        :type: dict(str, str)
        """

        self._docs_blob = docs_blob

    @property
    def documentation(self):
        """Gets the documentation of this CollectionVersion.  # noqa: E501

        The URL to any online docs.  # noqa: E501

        :return: The documentation of this CollectionVersion.  # noqa: E501
        :rtype: str
        """
        return self._documentation

    @documentation.setter
    def documentation(self, documentation):
        """Sets the documentation of this CollectionVersion.

        The URL to any online docs.  # noqa: E501

        :param documentation: The documentation of this CollectionVersion.  # noqa: E501
        :type: str
        """
        if documentation is not None and len(documentation) > 128:
            raise ValueError("Invalid value for `documentation`, length must be less than or equal to `128`")  # noqa: E501

        self._documentation = documentation

    @property
    def homepage(self):
        """Gets the homepage of this CollectionVersion.  # noqa: E501

        The URL to the homepage of the collection/project.  # noqa: E501

        :return: The homepage of this CollectionVersion.  # noqa: E501
        :rtype: str
        """
        return self._homepage

    @homepage.setter
    def homepage(self, homepage):
        """Sets the homepage of this CollectionVersion.

        The URL to the homepage of the collection/project.  # noqa: E501

        :param homepage: The homepage of this CollectionVersion.  # noqa: E501
        :type: str
        """
        if homepage is not None and len(homepage) > 128:
            raise ValueError("Invalid value for `homepage`, length must be less than or equal to `128`")  # noqa: E501

        self._homepage = homepage

    @property
    def issues(self):
        """Gets the issues of this CollectionVersion.  # noqa: E501

        The URL to the collection issue tracker.  # noqa: E501

        :return: The issues of this CollectionVersion.  # noqa: E501
        :rtype: str
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this CollectionVersion.

        The URL to the collection issue tracker.  # noqa: E501

        :param issues: The issues of this CollectionVersion.  # noqa: E501
        :type: str
        """
        if issues is not None and len(issues) > 128:
            raise ValueError("Invalid value for `issues`, length must be less than or equal to `128`")  # noqa: E501

        self._issues = issues

    @property
    def is_certified(self):
        """Gets the is_certified of this CollectionVersion.  # noqa: E501

        Indicates that the version is certified  # noqa: E501

        :return: The is_certified of this CollectionVersion.  # noqa: E501
        :rtype: bool
        """
        return self._is_certified

    @is_certified.setter
    def is_certified(self, is_certified):
        """Sets the is_certified of this CollectionVersion.

        Indicates that the version is certified  # noqa: E501

        :param is_certified: The is_certified of this CollectionVersion.  # noqa: E501
        :type: bool
        """

        self._is_certified = is_certified

    @property
    def license(self):
        """Gets the license of this CollectionVersion.  # noqa: E501

        A list of licenses for content inside of a collection.  # noqa: E501

        :return: The license of this CollectionVersion.  # noqa: E501
        :rtype: list[str]
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this CollectionVersion.

        A list of licenses for content inside of a collection.  # noqa: E501

        :param license: The license of this CollectionVersion.  # noqa: E501
        :type: list[str]
        """

        self._license = license

    @property
    def name(self):
        """Gets the name of this CollectionVersion.  # noqa: E501

        The name of the collection.  # noqa: E501

        :return: The name of this CollectionVersion.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CollectionVersion.

        The name of the collection.  # noqa: E501

        :param name: The name of this CollectionVersion.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 32:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `32`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this CollectionVersion.  # noqa: E501

        The namespace of the collection.  # noqa: E501

        :return: The namespace of this CollectionVersion.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this CollectionVersion.

        The namespace of the collection.  # noqa: E501

        :param namespace: The namespace of this CollectionVersion.  # noqa: E501
        :type: str
        """
        if namespace is not None and len(namespace) > 32:
            raise ValueError("Invalid value for `namespace`, length must be less than or equal to `32`")  # noqa: E501
        if namespace is not None and len(namespace) < 1:
            raise ValueError("Invalid value for `namespace`, length must be greater than or equal to `1`")  # noqa: E501

        self._namespace = namespace

    @property
    def tags(self):
        """Gets the tags of this CollectionVersion.  # noqa: E501


        :return: The tags of this CollectionVersion.  # noqa: E501
        :rtype: list[TagNested]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CollectionVersion.


        :param tags: The tags of this CollectionVersion.  # noqa: E501
        :type: list[TagNested]
        """

        self._tags = tags

    @property
    def version(self):
        """Gets the version of this CollectionVersion.  # noqa: E501

        The version of the collection.  # noqa: E501

        :return: The version of this CollectionVersion.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CollectionVersion.

        The version of the collection.  # noqa: E501

        :param version: The version of this CollectionVersion.  # noqa: E501
        :type: str
        """
        if version is not None and len(version) > 32:
            raise ValueError("Invalid value for `version`, length must be less than or equal to `32`")  # noqa: E501
        if version is not None and len(version) < 1:
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `1`")  # noqa: E501

        self._version = version

    @property
    def expected_name(self):
        """Gets the expected_name of this CollectionVersion.  # noqa: E501

        The expected 'name' of the Collection to be verified against the metadata during import.  # noqa: E501

        :return: The expected_name of this CollectionVersion.  # noqa: E501
        :rtype: str
        """
        return self._expected_name

    @expected_name.setter
    def expected_name(self, expected_name):
        """Sets the expected_name of this CollectionVersion.

        The expected 'name' of the Collection to be verified against the metadata during import.  # noqa: E501

        :param expected_name: The expected_name of this CollectionVersion.  # noqa: E501
        :type: str
        """
        if expected_name is not None and len(expected_name) < 1:
            raise ValueError("Invalid value for `expected_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._expected_name = expected_name

    @property
    def expected_namespace(self):
        """Gets the expected_namespace of this CollectionVersion.  # noqa: E501

        The expected 'namespace' of the Collection to be verified against the metadata during import.  # noqa: E501

        :return: The expected_namespace of this CollectionVersion.  # noqa: E501
        :rtype: str
        """
        return self._expected_namespace

    @expected_namespace.setter
    def expected_namespace(self, expected_namespace):
        """Sets the expected_namespace of this CollectionVersion.

        The expected 'namespace' of the Collection to be verified against the metadata during import.  # noqa: E501

        :param expected_namespace: The expected_namespace of this CollectionVersion.  # noqa: E501
        :type: str
        """
        if expected_namespace is not None and len(expected_namespace) < 1:
            raise ValueError("Invalid value for `expected_namespace`, length must be greater than or equal to `1`")  # noqa: E501

        self._expected_namespace = expected_namespace

    @property
    def expected_version(self):
        """Gets the expected_version of this CollectionVersion.  # noqa: E501

        The expected version of the Collection to be verified against the metadata during import.  # noqa: E501

        :return: The expected_version of this CollectionVersion.  # noqa: E501
        :rtype: str
        """
        return self._expected_version

    @expected_version.setter
    def expected_version(self, expected_version):
        """Sets the expected_version of this CollectionVersion.

        The expected version of the Collection to be verified against the metadata during import.  # noqa: E501

        :param expected_version: The expected_version of this CollectionVersion.  # noqa: E501
        :type: str
        """
        if expected_version is not None and len(expected_version) < 1:
            raise ValueError("Invalid value for `expected_version`, length must be greater than or equal to `1`")  # noqa: E501

        self._expected_version = expected_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectionVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
