# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_semsim', [dirname(__file__)])
        except ImportError:
            import _semsim
            return _semsim
        if fp is not None:
            try:
                _mod = imp.load_module('_semsim', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _semsim = swig_import_helper()
    del swig_import_helper
else:
    import _semsim
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _semsim.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _semsim.SwigPyIterator_value(self)
    def incr(self, n=1): return _semsim.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _semsim.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _semsim.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _semsim.SwigPyIterator_equal(self, *args)
    def copy(self): return _semsim.SwigPyIterator_copy(self)
    def next(self): return _semsim.SwigPyIterator_next(self)
    def __next__(self): return _semsim.SwigPyIterator___next__(self)
    def previous(self): return _semsim.SwigPyIterator_previous(self)
    def advance(self, *args): return _semsim.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _semsim.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _semsim.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _semsim.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _semsim.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _semsim.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _semsim.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _semsim.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _semsim.SHARED_PTR_DISOWN
class URI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, URI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, URI, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _semsim.new_URI(*args)
        try: self.this.append(this)
        except: self.this = this
    def toString(self): return _semsim.URI_toString(self)
    def encode(self): return _semsim.URI_encode(self)
    def appendToFrag(self, *args): return _semsim.URI_appendToFrag(self, *args)
    def withFrag(self, *args): return _semsim.URI_withFrag(self, *args)
    def __eq__(self, *args): return _semsim.URI___eq__(self, *args)
    __swig_destroy__ = _semsim.delete_URI
    __del__ = lambda self : None;
URI_swigregister = _semsim.URI_swigregister
URI_swigregister(URI)

class Relation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Relation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Relation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _semsim.new_Relation(*args)
        try: self.this.append(this)
        except: self.this = this
    def toString(self): return _semsim.Relation_toString(self)
    def getURI(self): return _semsim.Relation_getURI(self)
    def humanize(self): return _semsim.Relation_humanize(self)
    def __eq__(self, *args): return _semsim.Relation___eq__(self, *args)
    __swig_destroy__ = _semsim.delete_Relation
    __del__ = lambda self : None;
Relation_swigregister = _semsim.Relation_swigregister
Relation_swigregister(Relation)

class Resource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Resource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Resource, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _semsim.new_Resource(*args)
        try: self.this.append(this)
        except: self.this = this
    def toString(self): return _semsim.Resource_toString(self)
    def getURI(self, *args): return _semsim.Resource_getURI(self, *args)
    def isLocal(self): return _semsim.Resource_isLocal(self)
    def humanize(self): return _semsim.Resource_humanize(self)
    def __eq__(self, *args): return _semsim.Resource___eq__(self, *args)
    __swig_destroy__ = _semsim.delete_Resource
    __del__ = lambda self : None;
Resource_swigregister = _semsim.Resource_swigregister
Resource_swigregister(Resource)

class Term(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Term, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Term, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _semsim.new_Term(*args)
        try: self.this.append(this)
        except: self.this = this
    def getRelation(self): return _semsim.Term_getRelation(self)
    def getResource(self): return _semsim.Term_getResource(self)
    def toString(self): return _semsim.Term_toString(self)
    def isValue(self): return _semsim.Term_isValue(self)
    def getValue(self): return _semsim.Term_getValue(self)
    __swig_destroy__ = _semsim.delete_Term
    __del__ = lambda self : None;
Term_swigregister = _semsim.Term_swigregister
Term_swigregister(Term)

class DescriptorTerm(Term):
    __swig_setmethods__ = {}
    for _s in [Term]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DescriptorTerm, name, value)
    __swig_getmethods__ = {}
    for _s in [Term]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DescriptorTerm, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _semsim.new_DescriptorTerm(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _semsim.delete_DescriptorTerm
    __del__ = lambda self : None;
DescriptorTerm_swigregister = _semsim.DescriptorTerm_swigregister
DescriptorTerm_swigregister(DescriptorTerm)

class EntityBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EntityBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EntityBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _semsim.new_EntityBase(*args)
        try: self.this.append(this)
        except: self.this = this
    def getMetaId(self): return _semsim.EntityBase_getMetaId(self)
    def setMetaId(self, *args): return _semsim.EntityBase_setMetaId(self, *args)
    def getURI(self, *args): return _semsim.EntityBase_getURI(self, *args)
    def getNumDefinitions(self): return _semsim.EntityBase_getNumDefinitions(self)
    def getDefinition(self, *args): return _semsim.EntityBase_getDefinition(self, *args)
    def getDefinitions(self, *args): return _semsim.EntityBase_getDefinitions(self, *args)
    def addDefinition(self, *args): return _semsim.EntityBase_addDefinition(self, *args)
    def matchesDefinition(self, *args): return _semsim.EntityBase_matchesDefinition(self, *args)
    def addExtraneousTerm(self, *args): return _semsim.EntityBase_addExtraneousTerm(self, *args)
    def isEmpty(self): return _semsim.EntityBase_isEmpty(self)
    def toString(self, *args): return _semsim.EntityBase_toString(self, *args)
    def serializeToRDF(self, *args): return _semsim.EntityBase_serializeToRDF(self, *args)
    def humanize(self): return _semsim.EntityBase_humanize(self)
    __swig_destroy__ = _semsim.delete_EntityBase
    __del__ = lambda self : None;
EntityBase_swigregister = _semsim.EntityBase_swigregister
EntityBase_swigregister(EntityBase)

class PhysicalProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhysicalProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PhysicalProperty, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _semsim.new_PhysicalProperty(*args)
        try: self.this.append(this)
        except: self.this = this
    def getResource(self, *args): return _semsim.PhysicalProperty_getResource(self, *args)
    def humanize(self): return _semsim.PhysicalProperty_humanize(self)
    __swig_destroy__ = _semsim.delete_PhysicalProperty
    __del__ = lambda self : None;
PhysicalProperty_swigregister = _semsim.PhysicalProperty_swigregister
PhysicalProperty_swigregister(PhysicalProperty)

class AnnotationBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnnotationBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnnotationBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _semsim.delete_AnnotationBase
    __del__ = lambda self : None;
    def clone(self): return _semsim.AnnotationBase_clone(self)
    def serializeToRDF(self, *args): return _semsim.AnnotationBase_serializeToRDF(self, *args)
    def getRDF(self, *args): return _semsim.AnnotationBase_getRDF(self, *args)
    def getMetaId(self): return _semsim.AnnotationBase_getMetaId(self)
    def humanize(self): return _semsim.AnnotationBase_humanize(self)
    def isComposite(self): return _semsim.AnnotationBase_isComposite(self)
    def makeComposite(self, *args): return _semsim.AnnotationBase_makeComposite(self, *args)
AnnotationBase_swigregister = _semsim.AnnotationBase_swigregister
AnnotationBase_swigregister(AnnotationBase)

class SingularAnnotation(AnnotationBase,EntityBase):
    __swig_setmethods__ = {}
    for _s in [AnnotationBase,EntityBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SingularAnnotation, name, value)
    __swig_getmethods__ = {}
    for _s in [AnnotationBase,EntityBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SingularAnnotation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _semsim.new_SingularAnnotation(*args)
        try: self.this.append(this)
        except: self.this = this
    def getMetaId(self): return _semsim.SingularAnnotation_getMetaId(self)
    def clone(self): return _semsim.SingularAnnotation_clone(self)
    def serializeToRDF(self, *args): return _semsim.SingularAnnotation_serializeToRDF(self, *args)
    def getRDF(self, *args): return _semsim.SingularAnnotation_getRDF(self, *args)
    def getURI(self, *args): return _semsim.SingularAnnotation_getURI(self, *args)
    def humanize(self): return _semsim.SingularAnnotation_humanize(self)
    def isComposite(self): return _semsim.SingularAnnotation_isComposite(self)
    __swig_destroy__ = _semsim.delete_SingularAnnotation
    __del__ = lambda self : None;
SingularAnnotation_swigregister = _semsim.SingularAnnotation_swigregister
SingularAnnotation_swigregister(SingularAnnotation)

class EntityDescriptor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EntityDescriptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EntityDescriptor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _semsim.new_EntityDescriptor(*args)
        try: self.this.append(this)
        except: self.this = this
    def isEmpty(self): return _semsim.EntityDescriptor_isEmpty(self)
    def addTerm(self, *args): return _semsim.EntityDescriptor_addTerm(self, *args)
    def serializeToRDF(self, *args): return _semsim.EntityDescriptor_serializeToRDF(self, *args)
    def humanize(self): return _semsim.EntityDescriptor_humanize(self)
    __swig_destroy__ = _semsim.delete_EntityDescriptor
    __del__ = lambda self : None;
EntityDescriptor_swigregister = _semsim.EntityDescriptor_swigregister
EntityDescriptor_swigregister(EntityDescriptor)

class Entity(EntityBase):
    __swig_setmethods__ = {}
    for _s in [EntityBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Entity, name, value)
    __swig_getmethods__ = {}
    for _s in [EntityBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Entity, name)
    __repr__ = _swig_repr
    def getNumDescriptors(self): return _semsim.Entity_getNumDescriptors(self)
    def __init__(self, *args): 
        this = _semsim.new_Entity(*args)
        try: self.this.append(this)
        except: self.this = this
    def getDescriptors(self, *args): return _semsim.Entity_getDescriptors(self, *args)
    def addDescriptor(self, *args): return _semsim.Entity_addDescriptor(self, *args)
    def getDescriptor(self, *args): return _semsim.Entity_getDescriptor(self, *args)
    def serializeToRDF(self, *args): return _semsim.Entity_serializeToRDF(self, *args)
    def humanize(self): return _semsim.Entity_humanize(self)
    __swig_destroy__ = _semsim.delete_Entity
    __del__ = lambda self : None;
Entity_swigregister = _semsim.Entity_swigregister
Entity_swigregister(Entity)

class CompositeAnnotation(AnnotationBase):
    __swig_setmethods__ = {}
    for _s in [AnnotationBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeAnnotation, name, value)
    __swig_getmethods__ = {}
    for _s in [AnnotationBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeAnnotation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _semsim.new_CompositeAnnotation(*args)
        try: self.this.append(this)
        except: self.this = this
    def isEntityEmpty(self): return _semsim.CompositeAnnotation_isEntityEmpty(self)
    def getEntity(self, *args): return _semsim.CompositeAnnotation_getEntity(self, *args)
    def addTerm(self, *args): return _semsim.CompositeAnnotation_addTerm(self, *args)
    def clone(self): return _semsim.CompositeAnnotation_clone(self)
    def serializeToRDF(self, *args): return _semsim.CompositeAnnotation_serializeToRDF(self, *args)
    def getRDF(self, *args): return _semsim.CompositeAnnotation_getRDF(self, *args)
    def getMetaId(self): return _semsim.CompositeAnnotation_getMetaId(self)
    def setMetaId(self, *args): return _semsim.CompositeAnnotation_setMetaId(self, *args)
    def humanize(self): return _semsim.CompositeAnnotation_humanize(self)
    def isComposite(self): return _semsim.CompositeAnnotation_isComposite(self)
    __swig_destroy__ = _semsim.delete_CompositeAnnotation
    __del__ = lambda self : None;
CompositeAnnotation_swigregister = _semsim.CompositeAnnotation_swigregister
CompositeAnnotation_swigregister(CompositeAnnotation)

class Component(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Component, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Component, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _semsim.new_Component(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _semsim.delete_Component
    __del__ = lambda self : None;
    def clone(self): return _semsim.Component_clone(self)
    def hasAnnotation(self): return _semsim.Component_hasAnnotation(self)
    def hasCompositeAnnotation(self): return _semsim.Component_hasCompositeAnnotation(self)
    def hasSingularAnnotation(self): return _semsim.Component_hasSingularAnnotation(self)
    def getAnnotation(self, *args): return _semsim.Component_getAnnotation(self, *args)
    def getCompositeAnnotation(self, *args): return _semsim.Component_getCompositeAnnotation(self, *args)
    def setAnnotation(self, *args): return _semsim.Component_setAnnotation(self, *args)
    def humanize(self): return _semsim.Component_humanize(self)
    def hasMetaId(self): return _semsim.Component_hasMetaId(self)
    def getMetaId(self): return _semsim.Component_getMetaId(self)
    def setMetaId(self, *args): return _semsim.Component_setMetaId(self, *args)
    def getURI(self, *args): return _semsim.Component_getURI(self, *args)
    def serializeToRDF(self, *args): return _semsim.Component_serializeToRDF(self, *args)
    def isProcess(self): return _semsim.Component_isProcess(self)
    def containsMetaId(self, *args): return _semsim.Component_containsMetaId(self, *args)
    def getRDF(self, *args): return _semsim.Component_getRDF(self, *args)
Component_swigregister = _semsim.Component_swigregister
Component_swigregister(Component)

class Participant(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Participant, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Participant, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _semsim.delete_Participant
    __del__ = lambda self : None;
    def __init__(self): 
        this = _semsim.new_Participant()
        try: self.this.append(this)
        except: self.this = this
Participant_swigregister = _semsim.Participant_swigregister
Participant_swigregister(Participant)

class Source(Participant):
    __swig_setmethods__ = {}
    for _s in [Participant]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Source, name, value)
    __swig_getmethods__ = {}
    for _s in [Participant]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Source, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _semsim.new_Source(*args)
        try: self.this.append(this)
        except: self.this = this
    def containsMetaId(self, *args): return _semsim.Source_containsMetaId(self, *args)
    def serializeToRDF(self, *args): return _semsim.Source_serializeToRDF(self, *args)
    __swig_destroy__ = _semsim.delete_Source
    __del__ = lambda self : None;
Source_swigregister = _semsim.Source_swigregister
Source_swigregister(Source)

class Sink(Participant):
    __swig_setmethods__ = {}
    for _s in [Participant]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sink, name, value)
    __swig_getmethods__ = {}
    for _s in [Participant]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sink, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _semsim.new_Sink(*args)
        try: self.this.append(this)
        except: self.this = this
    def containsMetaId(self, *args): return _semsim.Sink_containsMetaId(self, *args)
    def serializeToRDF(self, *args): return _semsim.Sink_serializeToRDF(self, *args)
    __swig_destroy__ = _semsim.delete_Sink
    __del__ = lambda self : None;
Sink_swigregister = _semsim.Sink_swigregister
Sink_swigregister(Sink)

class Mediator(Participant):
    __swig_setmethods__ = {}
    for _s in [Participant]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mediator, name, value)
    __swig_getmethods__ = {}
    for _s in [Participant]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Mediator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _semsim.new_Mediator(*args)
        try: self.this.append(this)
        except: self.this = this
    def containsMetaId(self, *args): return _semsim.Mediator_containsMetaId(self, *args)
    def serializeToRDF(self, *args): return _semsim.Mediator_serializeToRDF(self, *args)
    __swig_destroy__ = _semsim.delete_Mediator
    __del__ = lambda self : None;
Mediator_swigregister = _semsim.Mediator_swigregister
Mediator_swigregister(Mediator)

class Process(Component):
    __swig_setmethods__ = {}
    for _s in [Component]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Process, name, value)
    __swig_getmethods__ = {}
    for _s in [Component]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Process, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _semsim.new_Process(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self): return _semsim.Process_clone(self)
    def addSource(self, *args): return _semsim.Process_addSource(self, *args)
    def addSink(self, *args): return _semsim.Process_addSink(self, *args)
    def addMediator(self, *args): return _semsim.Process_addMediator(self, *args)
    def serializeToRDF(self, *args): return _semsim.Process_serializeToRDF(self, *args)
    def isProcess(self): return _semsim.Process_isProcess(self)
    def containsMetaId(self, *args): return _semsim.Process_containsMetaId(self, *args)
    __swig_destroy__ = _semsim.delete_Process
    __del__ = lambda self : None;
Process_swigregister = _semsim.Process_swigregister
Process_swigregister(Process)

class Model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _semsim.delete_Model
    __del__ = lambda self : None;
    def addComponent(self, *args): return _semsim.Model_addComponent(self, *args)
    def getComponents(self, *args): return _semsim.Model_getComponents(self, *args)
    def getNumComponents(self): return _semsim.Model_getNumComponents(self)
    def getRDF(self, *args): return _semsim.Model_getRDF(self, *args)
    def humanize(self): return _semsim.Model_humanize(self)
    def encodeXML(self): return _semsim.Model_encodeXML(self)
    def getFormat(self): return _semsim.Model_getFormat(self)
    def hasComponentWithMetaId(self, *args): return _semsim.Model_hasComponentWithMetaId(self, *args)
    def findComponentWithMetaId(self, *args): return _semsim.Model_findComponentWithMetaId(self, *args)
    def containsMetaId(self, *args): return _semsim.Model_containsMetaId(self, *args)
Model_swigregister = _semsim.Model_swigregister
Model_swigregister(Model)

class SBMLModel(Model):
    __swig_setmethods__ = {}
    for _s in [Model]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLModel, name, value)
    __swig_getmethods__ = {}
    for _s in [Model]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLModel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _semsim.new_SBMLModel(*args)
        try: self.this.append(this)
        except: self.this = this
    def getComponentForId(self, *args): return _semsim.SBMLModel_getComponentForId(self, *args)
    def getRDF(self, *args): return _semsim.SBMLModel_getRDF(self, *args)
    def encodeXML(self): return _semsim.SBMLModel_encodeXML(self)
    def getFormat(self): return _semsim.SBMLModel_getFormat(self)
    __swig_destroy__ = _semsim.delete_SBMLModel
    __del__ = lambda self : None;
SBMLModel_swigregister = _semsim.SBMLModel_swigregister
SBMLModel_swigregister(SBMLModel)

class SBMLImporter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLImporter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLImporter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _semsim.new_SBMLImporter(*args)
        try: self.this.append(this)
        except: self.this = this
    def getSBMLModel(self, *args): return _semsim.SBMLImporter_getSBMLModel(self, *args)
    __swig_destroy__ = _semsim.delete_SBMLImporter
    __del__ = lambda self : None;
SBMLImporter_swigregister = _semsim.SBMLImporter_swigregister
SBMLImporter_swigregister(SBMLImporter)

class bqb_wrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bqb_wrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bqb_wrapper, name)
    __repr__ = _swig_repr
    __swig_getmethods__["_is"] = _semsim.bqb_wrapper__is_get
    if _newclass:_is = _swig_property(_semsim.bqb_wrapper__is_get)
    __swig_getmethods__["hasPart"] = _semsim.bqb_wrapper_hasPart_get
    if _newclass:hasPart = _swig_property(_semsim.bqb_wrapper_hasPart_get)
    __swig_getmethods__["isPartOf"] = _semsim.bqb_wrapper_isPartOf_get
    if _newclass:isPartOf = _swig_property(_semsim.bqb_wrapper_isPartOf_get)
    __swig_getmethods__["isVersionOf"] = _semsim.bqb_wrapper_isVersionOf_get
    if _newclass:isVersionOf = _swig_property(_semsim.bqb_wrapper_isVersionOf_get)
    __swig_getmethods__["hasVersion"] = _semsim.bqb_wrapper_hasVersion_get
    if _newclass:hasVersion = _swig_property(_semsim.bqb_wrapper_hasVersion_get)
    __swig_getmethods__["isHomologTo"] = _semsim.bqb_wrapper_isHomologTo_get
    if _newclass:isHomologTo = _swig_property(_semsim.bqb_wrapper_isHomologTo_get)
    __swig_getmethods__["isDescribedBy"] = _semsim.bqb_wrapper_isDescribedBy_get
    if _newclass:isDescribedBy = _swig_property(_semsim.bqb_wrapper_isDescribedBy_get)
    __swig_getmethods__["isEncodedBy"] = _semsim.bqb_wrapper_isEncodedBy_get
    if _newclass:isEncodedBy = _swig_property(_semsim.bqb_wrapper_isEncodedBy_get)
    __swig_getmethods__["encodes"] = _semsim.bqb_wrapper_encodes_get
    if _newclass:encodes = _swig_property(_semsim.bqb_wrapper_encodes_get)
    __swig_getmethods__["occursIn"] = _semsim.bqb_wrapper_occursIn_get
    if _newclass:occursIn = _swig_property(_semsim.bqb_wrapper_occursIn_get)
    __swig_getmethods__["hasProperty"] = _semsim.bqb_wrapper_hasProperty_get
    if _newclass:hasProperty = _swig_property(_semsim.bqb_wrapper_hasProperty_get)
    __swig_getmethods__["isPropertyOf"] = _semsim.bqb_wrapper_isPropertyOf_get
    if _newclass:isPropertyOf = _swig_property(_semsim.bqb_wrapper_isPropertyOf_get)
    __swig_getmethods__["hasTaxon"] = _semsim.bqb_wrapper_hasTaxon_get
    if _newclass:hasTaxon = _swig_property(_semsim.bqb_wrapper_hasTaxon_get)
    def __init__(self): 
        this = _semsim.new_bqb_wrapper()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _semsim.delete_bqb_wrapper
    __del__ = lambda self : None;
bqb_wrapper_swigregister = _semsim.bqb_wrapper_swigregister
bqb_wrapper_swigregister(bqb_wrapper)
cvar = _semsim.cvar

class bqb_meta(type):
    @property
    def _is(cls):
        return bqb_wrapper._is.fget()
    @property
    def hasPart(cls):
        return bqb_wrapper.hasPart.fget()
    @property
    def isPartOf(cls):
        return bqb_wrapper.isPartOf.fget()
    @property
    def isVersionOf(cls):
        return bqb_wrapper.isVersionOf.fget()
    @property
    def hasVersion(cls):
        return bqb_wrapper.hasVersion.fget()
    @property
    def isHomologTo(cls):
        return bqb_wrapper.isHomologTo.fget()
    @property
    def isDescribedBy(cls):
        return bqb_wrapper.isDescribedBy.fget()
    @property
    def isEncodedBy(cls):
        return bqb_wrapper.isEncodedBy.fget()
    @property
    def encodes(cls):
        return bqb_wrapper.encodes.fget()
    @property
    def occursIn(cls):
        return bqb_wrapper.occursIn.fget()
    @property
    def hasProperty(cls):
        return bqb_wrapper.hasProperty.fget()
    @property
    def isPropertyOf(cls):
        return bqb_wrapper.isPropertyOf.fget()
    @property
    def hasTaxon(cls):
        return bqb_wrapper.hasTaxon.fget()

class bqb(metaclass=bqb_meta):
    pass

class Ontology(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ontology, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ontology, name)
    __repr__ = _swig_repr
    __swig_getmethods__["resolve"] = lambda x: _semsim.Ontology_resolve
    if _newclass:resolve = staticmethod(_semsim.Ontology_resolve)
    def __init__(self): 
        this = _semsim.new_Ontology()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _semsim.delete_Ontology
    __del__ = lambda self : None;
Ontology_swigregister = _semsim.Ontology_swigregister
Ontology_swigregister(Ontology)

def Ontology_resolve(*args):
  return _semsim.Ontology_resolve(*args)
Ontology_resolve = _semsim.Ontology_resolve

class CHEBI(Ontology):
    __swig_setmethods__ = {}
    for _s in [Ontology]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHEBI, name, value)
    __swig_getmethods__ = {}
    for _s in [Ontology]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CHEBI, name)
    __repr__ = _swig_repr
    __swig_getmethods__["get"] = lambda x: _semsim.CHEBI_get
    if _newclass:get = staticmethod(_semsim.CHEBI_get)
    def __init__(self): 
        this = _semsim.new_CHEBI()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _semsim.delete_CHEBI
    __del__ = lambda self : None;
CHEBI_swigregister = _semsim.CHEBI_swigregister
CHEBI_swigregister(CHEBI)

def CHEBI_get(*args):
  return _semsim.CHEBI_get(*args)
CHEBI_get = _semsim.CHEBI_get

class OPB(Ontology):
    __swig_setmethods__ = {}
    for _s in [Ontology]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OPB, name, value)
    __swig_getmethods__ = {}
    for _s in [Ontology]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OPB, name)
    __repr__ = _swig_repr
    __swig_getmethods__["get"] = lambda x: _semsim.OPB_get
    if _newclass:get = staticmethod(_semsim.OPB_get)
    def __init__(self): 
        this = _semsim.new_OPB()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _semsim.delete_OPB
    __del__ = lambda self : None;
OPB_swigregister = _semsim.OPB_swigregister
OPB_swigregister(OPB)

def OPB_get(*args):
  return _semsim.OPB_get(*args)
OPB_get = _semsim.OPB_get

class GO(Ontology):
    __swig_setmethods__ = {}
    for _s in [Ontology]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GO, name, value)
    __swig_getmethods__ = {}
    for _s in [Ontology]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GO, name)
    __repr__ = _swig_repr
    __swig_getmethods__["get"] = lambda x: _semsim.GO_get
    if _newclass:get = staticmethod(_semsim.GO_get)
    def __init__(self): 
        this = _semsim.new_GO()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _semsim.delete_GO
    __del__ = lambda self : None;
GO_swigregister = _semsim.GO_swigregister
GO_swigregister(GO)

def GO_get(*args):
  return _semsim.GO_get(*args)
GO_get = _semsim.GO_get

class CL(Ontology):
    __swig_setmethods__ = {}
    for _s in [Ontology]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CL, name, value)
    __swig_getmethods__ = {}
    for _s in [Ontology]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CL, name)
    __repr__ = _swig_repr
    __swig_getmethods__["get"] = lambda x: _semsim.CL_get
    if _newclass:get = staticmethod(_semsim.CL_get)
    def __init__(self): 
        this = _semsim.new_CL()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _semsim.delete_CL
    __del__ = lambda self : None;
CL_swigregister = _semsim.CL_swigregister
CL_swigregister(CL)

def CL_get(*args):
  return _semsim.CL_get(*args)
CL_get = _semsim.CL_get


def exportToOmex(*args):
  return _semsim.exportToOmex(*args)
exportToOmex = _semsim.exportToOmex
class RasqalQueryResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RasqalQueryResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RasqalQueryResult, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _semsim.new_RasqalQueryResult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _semsim.delete_RasqalQueryResult
    __del__ = lambda self : None;
    def toString(self): return _semsim.RasqalQueryResult_toString(self)
    def toRDFString(self, format="rdfxml"): return _semsim.RasqalQueryResult_toRDFString(self, format)
    def asList(self): return _semsim.RasqalQueryResult_asList(self)
RasqalQueryResult_swigregister = _semsim.RasqalQueryResult_swigregister
RasqalQueryResult_swigregister(RasqalQueryResult)

class RasqalQuery(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RasqalQuery, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RasqalQuery, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _semsim.new_RasqalQuery(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _semsim.delete_RasqalQuery
    __del__ = lambda self : None;
    def run(self, *args): return _semsim.RasqalQuery_run(self, *args)
RasqalQuery_swigregister = _semsim.RasqalQuery_swigregister
RasqalQuery_swigregister(RasqalQuery)


def libsemgen_hello():
  return _semsim.libsemgen_hello()
libsemgen_hello = _semsim.libsemgen_hello
# This file is compatible with both classic and new-style classes.


