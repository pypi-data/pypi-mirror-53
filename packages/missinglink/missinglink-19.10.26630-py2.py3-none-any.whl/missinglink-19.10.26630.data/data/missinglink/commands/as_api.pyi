from typing import Union, Any, List, Optional, Tuple, cast

class Auth:
	@staticmethod
	def init(webserver: Optional[bool] = True) -> object: ...
	@staticmethod
	def whoami() -> object: ...
	@staticmethod
	def resource(org: str) -> object: ...
	@staticmethod
	def debug_local(config_name: str) -> object: ...
	@staticmethod
	def create_config(config_name: str) -> object: ...


class Alerts:
	@staticmethod
	def subscribe(project: List[int], alert_type: List[str]) -> object: ...
	@staticmethod
	def unsubscribe(project: List[int], alert_type: List[str]) -> object: ...
	@staticmethod
	def list() -> object: ...


class Projects:
	alerts: Alerts
	@staticmethod
	def list() -> object: ...
	@staticmethod
	def create(org: str, display_name: Optional[str] = None, description: Optional[str] = None) -> object: ...
	@staticmethod
	def transfer(project: int, transfer_to: Optional[str] = None) -> object: ...
	@staticmethod
	def metadata(project: int, name: Optional[str] = None, value: Optional[str] = None, add: Optional[bool] = False, replace: Optional[bool] = False, delete: Optional[bool] = False, enable: Optional[bool] = None) -> object: ...


class Orgs:
	@staticmethod
	def list() -> object: ...
	@staticmethod
	def create(org: str, display_name: Optional[str] = None, description: Optional[str] = None) -> object: ...
	@staticmethod
	def members(org: str) -> object: ...
	@staticmethod
	def auto_join_domain(org: str, domain: List[str]) -> object: ...
	@staticmethod
	def remove_members(org: str, email: List[str]) -> object: ...
	@staticmethod
	def metadata(org: str, name: Optional[str] = None, value: Optional[str] = None, add: Optional[bool] = False, replace: Optional[bool] = False, delete: Optional[bool] = False, enable: Optional[bool] = None) -> object: ...


class Experiments:
	@staticmethod
	def logs(project: int, experiment: Optional[int] = None, disable_colors: Optional[bool] = False) -> object: ...
	@staticmethod
	def list(project: int) -> object: ...
	@staticmethod
	def update_metrics(metrics: str, project: Optional[int] = None, experiment: Optional[int] = None, weights_hash: Optional[str] = None) -> object: ...
	@staticmethod
	def update_chart(chart_name: str, weights_hash: Optional[str] = None, project: Optional[int] = None, experiment: Optional[int] = None, chart_x_name: Optional[str] = "X", chart_y_name: Optional[str] = "Y", chart_scope: Optional[str] = "test", chart_type: Optional[str] = "line", chart_x: Optional[str] = None, chart_y: Optional[str] = None) -> object: ...
	@staticmethod
	def update_metrics_per_iteration(weights_hash: str, metrics: str) -> object: ...


class Models:
	@staticmethod
	def get_weights_hash(framework: str, model: str, weights: Optional[str] = None) -> object: ...


class Metadata:
	@staticmethod
	def add(volume_id: int, files: Optional[List[str]] = None, data: Optional[str] = None, data_point: Optional[List[str]] = None, data_file: Optional[str] = None, property: Optional[List[Tuple[str, str]]] = None, property_int: Optional[List[Tuple[str, int]]] = None, property_float: Optional[List[Tuple[str, float]]] = None, update: Optional[bool] = True, no_progressbar: Optional[bool] = False, data_path: Optional[str] = None) -> object: ...


class Data:
	metadata: Metadata
	@staticmethod
	def map(volume_id: int, data_path: str) -> object: ...
	@staticmethod
	def create(org: str, display_name: Optional[str] = None, description: Optional[str] = None, bucket: Optional[str] = None, linked: Optional[bool] = False, shared_storage_volume_id: Optional[int] = None) -> object: ...
	@staticmethod
	def commit(volume_id: int, message: Optional[str] = None) -> object: ...
	@staticmethod
	def set_metadata(data_path: str, append: Optional[bool] = False, metadata_string: Optional[List[Tuple[str, str]]] = None, metadata_num: Optional[List[Tuple[str, int]]] = None, metadata_float: Optional[List[Tuple[str, float]]] = None, metadata_boolean: Optional[List[Tuple[str, bool]]] = None) -> object: ...
	@staticmethod
	def sync(volume_id: int, data_path: str, commit: Optional[str] = None, no_progressbar: Optional[bool] = False) -> object: ...
	@staticmethod
	def add(volume_id: int, files: Optional[List[str]] = None, commit: Optional[str] = None, no_progressbar: Optional[bool] = False) -> object: ...
	@staticmethod
	def clone(volume_id: int, dest_folder: str, dest_file: Optional[str] = "$@name", query: Optional[str] = None, delete: Optional[bool] = False, no_progressbar: Optional[bool] = False) -> object: ...
	@staticmethod
	def query(volume_id: int, query: str, as_dict: Optional[bool] = False, silent: Optional[bool] = False) -> object: ...
	@staticmethod
	def list() -> object: ...
	@staticmethod
	def validate(volume_id: int, data_path: Optional[str] = None, data_file: Optional[str] = None, no_progressbar: Optional[bool] = False) -> object: ...


class Run:
	@staticmethod
	def track(org: Optional[str] = None, include_only: Optional[str] = None) -> object: ...
	@staticmethod
	def xp(org: Optional[str] = None, project: Optional[int] = None, image: Optional[str] = None, git_repo: Optional[str] = None, no_source: Optional[bool] = False, git_tag: Optional[str] = None, source_dir: Optional[str] = None, command: Optional[List[str]] = None, gpu: Optional[bool] = None, data_volume: Optional[str] = None, queue: Optional[str] = None, data_query: Optional[str] = None, data_dest: Optional[str] = None, data_iterator: Optional[str] = None, recipe: Optional[str] = None, save_recipe: Optional[str] = None, env: Optional[List[Tuple[str, str]]] = None, output_paths: Optional[List[str]] = None, git_identity: Optional[str] = None, persistent_path: Optional[List[Tuple[str, str]]] = None, secure_env: Optional[List[Tuple[str, str]]] = None, docker_host: Optional[str] = None, docker_user: Optional[str] = None, docker_password: Optional[str] = None, requirements_txt: Optional[str] = None, disable_colors: Optional[bool] = None, attach: Optional[bool] = None, name: Optional[str] = None, name_prefix: Optional[str] = None, shm_size: Optional[str] = None, output_data_volume: Optional[str] = None) -> object: ...
	@staticmethod
	def logs(org: str, job: Optional[str] = None, disable_colors: Optional[bool] = False, lines: Optional[int] = None) -> object: ...
	@staticmethod
	def local(link_aws: Optional[bool] = True, env_aws: Optional[bool] = True, link_gcp: Optional[bool] = True, link_azure: Optional[bool] = True, cache_path: Optional[str] = None, org: Optional[str] = None, project: Optional[int] = None, image: Optional[str] = None, git_repo: Optional[str] = None, no_source: Optional[bool] = False, git_tag: Optional[str] = None, source_dir: Optional[str] = None, command: Optional[List[str]] = None, gpu: Optional[bool] = None, data_volume: Optional[str] = None, queue: Optional[str] = None, data_query: Optional[str] = None, data_dest: Optional[str] = None, data_iterator: Optional[str] = None, recipe: Optional[str] = None, save_recipe: Optional[str] = None, env: Optional[List[Tuple[str, str]]] = None, output_paths: Optional[List[str]] = None, git_identity: Optional[str] = None, persistent_path: Optional[List[Tuple[str, str]]] = None, secure_env: Optional[List[Tuple[str, str]]] = None, docker_host: Optional[str] = None, docker_user: Optional[str] = None, docker_password: Optional[str] = None, requirements_txt: Optional[str] = None, disable_colors: Optional[bool] = None, attach: Optional[bool] = None, name: Optional[str] = None, name_prefix: Optional[str] = None, shm_size: Optional[str] = None, output_data_volume: Optional[str] = None) -> object: ...


class Localgrid:
	@staticmethod
	def init(org: str, ssh_key_path: Optional[str] = None, force: Optional[bool] = False, resource_token: Optional[str] = None, link_aws: Optional[bool] = True, env_aws: Optional[bool] = True, link_gcp: Optional[bool] = True, link_azure: Optional[bool] = True, capacity: Optional[int] = 1, cache_path: Optional[str] = None) -> object: ...
	@staticmethod
	def change_group(org: str, server: str, new_group: str) -> object: ...


class Aws:
	@staticmethod
	def init(org: str, ssh_key_path: Optional[str] = None, region: Optional[str] = None, queue: Optional[str] = None) -> object: ...


class Azure:
	@staticmethod
	def init(org: str, location: Optional[str] = None, queue: Optional[str] = None, acr: Optional[List[str]] = None) -> object: ...


class Gcp:
	@staticmethod
	def init(org: str, gcp_project_id: Optional[str] = None, region: Optional[str] = None, zone: Optional[str] = None, network: Optional[str] = None, queue: Optional[str] = None, credentials_file_path: Optional[str] = None) -> object: ...


class Resources:
	local_grid: Localgrid
	aws: Aws
	azure: Azure
	gcp: Gcp
	@staticmethod
	def queue(org: str, name: str, create: Optional[bool] = False, description: Optional[str] = None, display: Optional[str] = None, disable: Optional[bool] = False) -> object: ...
	@staticmethod
	def group(org: str, group: str, advanced: Optional[str] = False, show_defaults: Optional[bool] = False, create: Optional[str] = None, show_description: Optional[bool] = False, configured_only: Optional[bool] = False, set: Optional[List[Tuple[str, str]]] = None, unset: Optional[List[str]] = []) -> object: ...
	@staticmethod
	def job(org: str, name: str) -> object: ...


class Cli:
	auth: Auth
	projects: Projects
	orgs: Orgs
	experiments: Experiments
	models: Models
	data: Data
	run: Run
	resources: Resources
	@staticmethod
	def upgrade() -> object: ...
	@staticmethod
	def version() -> object: ...
	@staticmethod
	def install(shell: Optional[str] = None) -> object: ...


def as_api() -> Cli: ...
