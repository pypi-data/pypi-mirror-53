<html
  xmlns="http://www.w3.org/1999/xhtml"
  xmlns:metal="http://xml.zope.org/namespaces/metal"
  xmlns:tal="http://xml.zope.org/namespaces/tal"
  xmlns:i18n="http://xml.zope.org/namespaces/i18n"
  i18n:domain="collective.geo.leaflet">
  <head></head>

  <body>

    <tal:comment replace="nothing">
      A macro to include all necessary javascript files
    </tal:comment>

    <div tal:condition="python:getattr('view', 'geomap', False)">
      <metal:map-div
        define-macro="map-div"
        tal:define="geomap view/geomap;
                              map_style geomap/geo_feature_style;
                              map_settings geomap/geo_settings;
                              map_coordinates geomap/json_coordinates;
                              map_center python:geomap.map_center();
                              map_inline_style python:geomap.inline_style()">
        <div
          id="map"
          tal:attributes="data-mapcenter_latitude map_center/latitude|nothing;
                data-mapcenter_longitude map_center/longitude|nothing;
                data-zoom map_settings/zoom|nothing;
                data-marker_image map_style/marker_image;
                data-coordinates map_coordinates;
                style map_inline_style|nothing"></div>

      </metal:map-div>

      <metal:map-popup-content define-macro="geo-popup-content">
        <div class="hiddenStructure geo-popup-content">
          <tal:block tal:content="structure view/make_popup"></tal:block>
        </div>
      </metal:map-popup-content>

      <metal:map-init-leaflet
        define-macro="map-init-leaflet"
        tal:define="geomap view/geomap;">

        <tal:googlemap tal:condition="geomap/has_googlemap">
          <script
            tal:attributes="src string: https://maps.googleapis.com/maps/api/js?&key=${geomap/geo_settings/googleapi}"></script>
          <script
            tal:attributes="src string:${context/portal_url}/++resource++collective.geo.leaflet/leaflet-google.js"></script>
        </tal:googlemap>

        <script
          type="text/javascript"
          tal:attributes="src string:${context/portal_url}/++resource++collective.geo.leaflet/cgeoleaflet.js"></script>

        <tal:block tal:content="structure python:geomap.default_layers()['layers']"></tal:block>

        <div
          class="baselayers"
          tal:attributes="data-baselayers python:geomap.default_layers()['baselayers']"></div>

        <script
          type="text/javascript"
          tal:attributes="src string:${context/portal_url}/++resource++collective.geo.leaflet/cgeoleaflet_layers.js"></script>

        <script type="text/javascript"></script>

        <script type="text/javascript">
          //add mini map, should be on a separate js file map.locate({setView: true});
          var osm2 = new L.TileLayer(osmUrl, {
            minZoom: 0,
            maxZoom: 13,
            attribution: osmAttrib
          });
          var miniMap = new L.Control.MiniMap(osm2).addTo(map);
        </script>

      </metal:map-init-leaflet>

      <metal:map-geojson define-macro="map-geojson">
        <div
          id="geojson_url"
          tal:attributes="data-geojson_url view/geojson_urls"
          class="hiddenStructure"></div>

      </metal:map-geojson>

      <metal:map-add-marker define-macro="map-add-marker">
        <script type="text/javascript">
          //add marker
          if (coord_type == 'Point') {
            var markercoord = [coord_value[1], coord_value[0]];

            //Extend the Default marker class
            var CustomIcon = L.Icon.Default.extend({
              options: {
                iconUrl: marker_url
              }
            });

            var customIcon = new CustomIcon();

            var marker = L.marker(markercoord, {icon: customIcon}).addTo(map);

            var popup_content = $('div.geo-popup-content').html();
            marker.bindPopup(popup_content);
          }
          if (coord_type == 'Polygon') {
            polygons = [];
            for (i in coord_value) {
              coord_polygon = coord_value[i];
              polygonPoints = [];
              for (j in coord_polygon) {
                coord = coord_polygon[j];
                polygonPoints.push(new L.LatLng(coord[1], coord[0]));
              }
              polygons.push(polygonPoints);
            }
            var poly = L.multiPolygon(polygons).addTo(map);
            var popup_content = $('div.geo-popup-content').html();
            poly.bindPopup(popup_content);
          }
          if (coord_type == 'LineString') {
            polylines = [];
            for (i in coord_value) {
              coord_polyline = coord_value[i];
              polylines.push(new L.LatLng(coord_polyline[1], coord_polyline[0]));
            }
            var poly = L.polyline(polylines).addTo(map);
            var popup_content = $('div.geo-popup-content').html();
            poly.bindPopup(popup_content);
          }
        </script>

      </metal:map-add-marker>

      <tal:comment replace="nothing">
        Macro to create html structure to geocoding feature. It needs mapid variable to
        work.
      </tal:comment>

      <metal:geocoding define-macro="map-search">
        <div i18n:domain="collective.geo.leaflet"
          id="i18ndiv"
          i18n:attributes="
            data-searchlabel searchLabel;
            data-notfoundmessage notFoundAddressMessage"></div>
        <script type="text/javascript">
          var searchLabel = $('#i18ndiv').data('searchlabel');
          var notFoundMessage = $('#i18ndiv').data('notfoundmessage');
          new L.Control.GeoSearch({provider: new L.GeoSearch.Provider.OpenStreetMap(), position: 'topcenter', showMarker: false, searchLabel: searchLabel, notFoundMessage: notFoundMessage}).addTo(map);
        </script>
      </metal:geocoding>

      <div class="visualClear">
        <!-- clear floats -->
      </div>

    </div>
  </body>

</html>
