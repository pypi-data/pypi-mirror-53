# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _cain.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cain')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cain')
    _cain = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cain', [dirname(__file__)])
        except ImportError:
            import _cain
            return _cain
        try:
            _mod = imp.load_module('_cain', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cain = swig_import_helper()
    del swig_import_helper
else:
    import _cain
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cain.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_cain.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_cain.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_cain.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_cain.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_cain.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_cain.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_cain.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_cain.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_cain.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_cain.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_cain.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_cain.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_cain.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_cain.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_cain.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_cain.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _cain.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _cain.SHARED_PTR_DISOWN
BOOST_LOG_DYN_LINK = _cain.BOOST_LOG_DYN_LINK
class Communication(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    get = staticmethod(_cain.Communication_get)
    __swig_destroy__ = _cain.delete_Communication
    mpiSupport = _swig_property(_cain.Communication_mpiSupport_get, _cain.Communication_mpiSupport_set)
    rank = _swig_property(_cain.Communication_rank_get, _cain.Communication_rank_set)
    ranksCount = _swig_property(_cain.Communication_ranksCount_get, _cain.Communication_ranksCount_set)
    hosts = _swig_property(_cain.Communication_hosts_get, _cain.Communication_hosts_set)
Communication.get_p2p_channel = new_instancemethod(_cain.Communication_get_p2p_channel, None, Communication)
Communication.register_p2p_communication = new_instancemethod(_cain.Communication_register_p2p_communication, None, Communication)
Communication.safe_barrier = new_instancemethod(_cain.Communication_safe_barrier, None, Communication)
Communication.update_communicators = new_instancemethod(_cain.Communication_update_communicators, None, Communication)
Communication_swigregister = _cain.Communication_swigregister
Communication_swigregister(Communication)

def Communication_get():
    return _cain.Communication_get()
Communication_get = _cain.Communication_get

LOG_OUTPUT_FILE = _cain.LOG_OUTPUT_FILE
LOG_DEBUG_FILE = _cain.LOG_DEBUG_FILE
DEFAULT_DEBUG_ENABLED = _cain.DEFAULT_DEBUG_ENABLED
LogSeverity_DEBUG = _cain.LogSeverity_DEBUG
LogSeverity_MESSAGE = _cain.LogSeverity_MESSAGE
LogSeverity_WARNING = _cain.LogSeverity_WARNING
LogSeverity_ERROR = _cain.LogSeverity_ERROR
LogSeverity_FATAL = _cain.LogSeverity_FATAL
LogSeverity_EXTERNAL = _cain.LogSeverity_EXTERNAL
LogPriority_LOW = _cain.LogPriority_LOW
LogPriority_MEDIUM = _cain.LogPriority_MEDIUM
LogPriority_HIGH = _cain.LogPriority_HIGH
class Log(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    priority0_lg = _swig_property(_cain.Log_priority0_lg_get, _cain.Log_priority0_lg_set)
    priority1_lg = _swig_property(_cain.Log_priority1_lg_get, _cain.Log_priority1_lg_set)
    priority2_lg = _swig_property(_cain.Log_priority2_lg_get, _cain.Log_priority2_lg_set)
    error_lg = _swig_property(_cain.Log_error_lg_get, _cain.Log_error_lg_set)
    fatal_lg = _swig_property(_cain.Log_fatal_lg_get, _cain.Log_fatal_lg_set)
    output_min_severity = _swig_property(_cain.Log_output_min_severity_get, _cain.Log_output_min_severity_set)
    output_min_priority = _swig_property(_cain.Log_output_min_priority_get, _cain.Log_output_min_priority_set)
    debug_min_severity = _swig_property(_cain.Log_debug_min_severity_get, _cain.Log_debug_min_severity_set)
    debug_min_priority = _swig_property(_cain.Log_debug_min_priority_get, _cain.Log_debug_min_priority_set)
    debug_enabled = _swig_property(_cain.Log_debug_enabled_get, _cain.Log_debug_enabled_set)
    get = staticmethod(_cain.Log_get)
    __swig_destroy__ = _cain.delete_Log
Log.flush = new_instancemethod(_cain.Log_flush, None, Log)
Log_swigregister = _cain.Log_swigregister
Log_swigregister(Log)
cvar = _cain.cvar

def Log_get():
    return _cain.Log_get()
Log_get = _cain.Log_get

class Parameters(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == Parameters:
            _self = None
        else:
            _self = self
        _cain.Parameters_swiginit(self, _cain.new_Parameters(_self, ))
    __swig_destroy__ = _cain.delete_Parameters
    dereference = staticmethod(_cain.Parameters_dereference)
    get_shared = staticmethod(_cain.Parameters_get_shared)
    tree = _swig_property(_cain.Parameters_tree_get, _cain.Parameters_tree_set)
    map = _swig_property(_cain.Parameters_map_get, _cain.Parameters_map_set)
    def __disown__(self):
        self.this.disown()
        _cain.disown_Parameters(self)
        return weakref_proxy(self)
Parameters.load = new_instancemethod(_cain.Parameters_load, None, Parameters)
Parameters.get_values = new_instancemethod(_cain.Parameters_get_values, None, Parameters)
Parameters_swigregister = _cain.Parameters_swigregister
Parameters_swigregister(Parameters)

def Parameters_dereference(sptr):
    return _cain.Parameters_dereference(sptr)
Parameters_dereference = _cain.Parameters_dereference

def Parameters_get_shared(i):
    return _cain.Parameters_get_shared(i)
Parameters_get_shared = _cain.Parameters_get_shared

class Scheme(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.Scheme_swiginit(self, _cain.new_Scheme())
    __swig_destroy__ = _cain.delete_Scheme
    name = _swig_property(_cain.Scheme_name_get, _cain.Scheme_name_set)
Scheme.validate = new_instancemethod(_cain.Scheme_validate, None, Scheme)
Scheme.load = new_instancemethod(_cain.Scheme_load, None, Scheme)
Scheme.filter = new_instancemethod(_cain.Scheme_filter, None, Scheme)
Scheme.include = new_instancemethod(_cain.Scheme_include, None, Scheme)
Scheme.get_rules = new_instancemethod(_cain.Scheme_get_rules, None, Scheme)
Scheme_swigregister = _cain.Scheme_swigregister
Scheme_swigregister(Scheme)
SCHEMES_GROUP = cvar.SCHEMES_GROUP
SCHEMES_BASE = cvar.SCHEMES_BASE
SCHEMES_PARAM = cvar.SCHEMES_PARAM
SCHEMES_CLASS = cvar.SCHEMES_CLASS
SCHEMES_ROOT = cvar.SCHEMES_ROOT
SCHEMES_CAPTION = cvar.SCHEMES_CAPTION
SCHEMES_TYPE = cvar.SCHEMES_TYPE
SCHEMES_DEFAULT = cvar.SCHEMES_DEFAULT
SCHEMES_DESCRIPION = cvar.SCHEMES_DESCRIPION
SCHEMES_TYPE_FILE = cvar.SCHEMES_TYPE_FILE
SCHEMES_TYPE_INT = cvar.SCHEMES_TYPE_INT
SCHEMES_TYPE_FLOAT = cvar.SCHEMES_TYPE_FLOAT
SCHEMES_TYPE_ARRAY = cvar.SCHEMES_TYPE_ARRAY

METADATA_VAR = _cain.METADATA_VAR
GENESIS_LOCATION = _cain.GENESIS_LOCATION
class BaseClass(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cain.delete_BaseClass
    gen_scheme = staticmethod(_cain.BaseClass_gen_scheme)

    def __init__(self):
        if self.__class__ == BaseClass:
            _self = None
        else:
            _self = self
        _cain.BaseClass_swiginit(self, _cain.new_BaseClass(_self, ))
    def __disown__(self):
        self.this.disown()
        _cain.disown_BaseClass(self)
        return weakref_proxy(self)
BaseClass_swigregister = _cain.BaseClass_swigregister
BaseClass_swigregister(BaseClass)

def BaseClass_gen_scheme(sfile):
    return _cain.BaseClass_gen_scheme(sfile)
BaseClass_gen_scheme = _cain.BaseClass_gen_scheme

class exception_base(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.exception_base_swiginit(self, _cain.new_exception_base())
    __swig_destroy__ = _cain.delete_exception_base
exception_base.what = new_instancemethod(_cain.exception_base_what, None, exception_base)
exception_base_swigregister = _cain.exception_base_swigregister
exception_base_swigregister(exception_base)

class outofdomain_error(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.outofdomain_error_swiginit(self, _cain.new_outofdomain_error())
    __swig_destroy__ = _cain.delete_outofdomain_error
outofdomain_error.what = new_instancemethod(_cain.outofdomain_error_what, None, outofdomain_error)
outofdomain_error_swigregister = _cain.outofdomain_error_swigregister
outofdomain_error_swigregister(outofdomain_error)

class inconsistency_error(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.inconsistency_error_swiginit(self, _cain.new_inconsistency_error())
    __swig_destroy__ = _cain.delete_inconsistency_error
inconsistency_error.what = new_instancemethod(_cain.inconsistency_error_what, None, inconsistency_error)
inconsistency_error_swigregister = _cain.inconsistency_error_swigregister
inconsistency_error_swigregister(inconsistency_error)

class param_value_error(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.param_value_error_swiginit(self, _cain.new_param_value_error())
    __swig_destroy__ = _cain.delete_param_value_error
param_value_error.what = new_instancemethod(_cain.param_value_error_what, None, param_value_error)
param_value_error_swigregister = _cain.param_value_error_swigregister
param_value_error_swigregister(param_value_error)

class status_error(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.status_error_swiginit(self, _cain.new_status_error())
    __swig_destroy__ = _cain.delete_status_error
status_error.what = new_instancemethod(_cain.status_error_what, None, status_error)
status_error_swigregister = _cain.status_error_swigregister
status_error_swigregister(status_error)

class flow_control_error(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.flow_control_error_swiginit(self, _cain.new_flow_control_error())
    __swig_destroy__ = _cain.delete_flow_control_error
flow_control_error.what = new_instancemethod(_cain.flow_control_error_what, None, flow_control_error)
flow_control_error_swigregister = _cain.flow_control_error_swigregister
flow_control_error_swigregister(flow_control_error)

class malformed_record(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.malformed_record_swiginit(self, _cain.new_malformed_record())
    __swig_destroy__ = _cain.delete_malformed_record
malformed_record.what = new_instancemethod(_cain.malformed_record_what, None, malformed_record)
malformed_record_swigregister = _cain.malformed_record_swigregister
malformed_record_swigregister(malformed_record)

class unsupported_feature(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.unsupported_feature_swiginit(self, _cain.new_unsupported_feature())
    __swig_destroy__ = _cain.delete_unsupported_feature
unsupported_feature.what = new_instancemethod(_cain.unsupported_feature_what, None, unsupported_feature)
unsupported_feature_swigregister = _cain.unsupported_feature_swigregister
unsupported_feature_swigregister(unsupported_feature)

class factory_unknown_type(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.factory_unknown_type_swiginit(self, _cain.new_factory_unknown_type())
    __swig_destroy__ = _cain.delete_factory_unknown_type
factory_unknown_type.what = new_instancemethod(_cain.factory_unknown_type_what, None, factory_unknown_type)
factory_unknown_type_swigregister = _cain.factory_unknown_type_swigregister
factory_unknown_type_swigregister(factory_unknown_type)

class wrong_behaviour(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.wrong_behaviour_swiginit(self, _cain.new_wrong_behaviour())
    __swig_destroy__ = _cain.delete_wrong_behaviour
wrong_behaviour.what = new_instancemethod(_cain.wrong_behaviour_what, None, wrong_behaviour)
wrong_behaviour_swigregister = _cain.wrong_behaviour_swigregister
wrong_behaviour_swigregister(wrong_behaviour)

class unexpected_instance_type(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.unexpected_instance_type_swiginit(self, _cain.new_unexpected_instance_type())
    __swig_destroy__ = _cain.delete_unexpected_instance_type
unexpected_instance_type.what = new_instancemethod(_cain.unexpected_instance_type_what, None, unexpected_instance_type)
unexpected_instance_type_swigregister = _cain.unexpected_instance_type_swigregister
unexpected_instance_type_swigregister(unexpected_instance_type)

class unprovided_artifact(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.unprovided_artifact_swiginit(self, _cain.new_unprovided_artifact())
    __swig_destroy__ = _cain.delete_unprovided_artifact
unprovided_artifact.what = new_instancemethod(_cain.unprovided_artifact_what, None, unprovided_artifact)
unprovided_artifact_swigregister = _cain.unprovided_artifact_swigregister
unprovided_artifact_swigregister(unprovided_artifact)

class incomplete_metadata(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.incomplete_metadata_swiginit(self, _cain.new_incomplete_metadata())
    __swig_destroy__ = _cain.delete_incomplete_metadata
incomplete_metadata.what = new_instancemethod(_cain.incomplete_metadata_what, None, incomplete_metadata)
incomplete_metadata_swigregister = _cain.incomplete_metadata_swigregister
incomplete_metadata_swigregister(incomplete_metadata)

class internal_error(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.internal_error_swiginit(self, _cain.new_internal_error())
    __swig_destroy__ = _cain.delete_internal_error
internal_error.what = new_instancemethod(_cain.internal_error_what, None, internal_error)
internal_error_swigregister = _cain.internal_error_swigregister
internal_error_swigregister(internal_error)

class incompatible_solver(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.incompatible_solver_swiginit(self, _cain.new_incompatible_solver())
    __swig_destroy__ = _cain.delete_incompatible_solver
incompatible_solver.what = new_instancemethod(_cain.incompatible_solver_what, None, incompatible_solver)
incompatible_solver_swigregister = _cain.incompatible_solver_swigregister
incompatible_solver_swigregister(incompatible_solver)

class invalid_mpi_thread_support(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.invalid_mpi_thread_support_swiginit(self, _cain.new_invalid_mpi_thread_support())
    __swig_destroy__ = _cain.delete_invalid_mpi_thread_support
invalid_mpi_thread_support.what = new_instancemethod(_cain.invalid_mpi_thread_support_what, None, invalid_mpi_thread_support)
invalid_mpi_thread_support_swigregister = _cain.invalid_mpi_thread_support_swigregister
invalid_mpi_thread_support_swigregister(invalid_mpi_thread_support)

class unsupported_multi_threading(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.unsupported_multi_threading_swiginit(self, _cain.new_unsupported_multi_threading())
    __swig_destroy__ = _cain.delete_unsupported_multi_threading
unsupported_multi_threading.what = new_instancemethod(_cain.unsupported_multi_threading_what, None, unsupported_multi_threading)
unsupported_multi_threading_swigregister = _cain.unsupported_multi_threading_swigregister
unsupported_multi_threading_swigregister(unsupported_multi_threading)

class parameters_validation_failed(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.parameters_validation_failed_swiginit(self, _cain.new_parameters_validation_failed())
    __swig_destroy__ = _cain.delete_parameters_validation_failed
parameters_validation_failed.what = new_instancemethod(_cain.parameters_validation_failed_what, None, parameters_validation_failed)
parameters_validation_failed_swigregister = _cain.parameters_validation_failed_swigregister
parameters_validation_failed_swigregister(parameters_validation_failed)

class communication_error(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.communication_error_swiginit(self, _cain.new_communication_error())
    __swig_destroy__ = _cain.delete_communication_error
communication_error.what = new_instancemethod(_cain.communication_error_what, None, communication_error)
communication_error_swigregister = _cain.communication_error_swigregister
communication_error_swigregister(communication_error)

class io_error(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.io_error_swiginit(self, _cain.new_io_error())
    __swig_destroy__ = _cain.delete_io_error
io_error.what = new_instancemethod(_cain.io_error_what, None, io_error)
io_error_swigregister = _cain.io_error_swigregister
io_error_swigregister(io_error)

class channel_open_error(io_error):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.channel_open_error_swiginit(self, _cain.new_channel_open_error())
    __swig_destroy__ = _cain.delete_channel_open_error
channel_open_error.what = new_instancemethod(_cain.channel_open_error_what, None, channel_open_error)
channel_open_error_swigregister = _cain.channel_open_error_swigregister
channel_open_error_swigregister(channel_open_error)

class channel_write_error(io_error):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.channel_write_error_swiginit(self, _cain.new_channel_write_error())
    __swig_destroy__ = _cain.delete_channel_write_error
channel_write_error.what = new_instancemethod(_cain.channel_write_error_what, None, channel_write_error)
channel_write_error_swigregister = _cain.channel_write_error_swigregister
channel_write_error_swigregister(channel_write_error)

class channel_closed_error(io_error):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.channel_closed_error_swiginit(self, _cain.new_channel_closed_error())
    __swig_destroy__ = _cain.delete_channel_closed_error
channel_closed_error.what = new_instancemethod(_cain.channel_closed_error_what, None, channel_closed_error)
channel_closed_error_swigregister = _cain.channel_closed_error_swigregister
channel_closed_error_swigregister(channel_closed_error)

class channel_closing_error(io_error):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.channel_closing_error_swiginit(self, _cain.new_channel_closing_error())
    __swig_destroy__ = _cain.delete_channel_closing_error
channel_closing_error.what = new_instancemethod(_cain.channel_closing_error_what, None, channel_closing_error)
channel_closing_error_swigregister = _cain.channel_closing_error_swigregister
channel_closing_error_swigregister(channel_closing_error)

class file_open_error(io_error):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.file_open_error_swiginit(self, _cain.new_file_open_error())
    __swig_destroy__ = _cain.delete_file_open_error
file_open_error.what = new_instancemethod(_cain.file_open_error_what, None, file_open_error)
file_open_error_swigregister = _cain.file_open_error_swigregister
file_open_error_swigregister(file_open_error)

class file_format_error(io_error):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.file_format_error_swiginit(self, _cain.new_file_format_error())
    __swig_destroy__ = _cain.delete_file_format_error
file_format_error.what = new_instancemethod(_cain.file_format_error_what, None, file_format_error)
file_format_error_swigregister = _cain.file_format_error_swigregister
file_format_error_swigregister(file_format_error)

class file_read_error(io_error):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.file_read_error_swiginit(self, _cain.new_file_read_error())
    __swig_destroy__ = _cain.delete_file_read_error
file_read_error.what = new_instancemethod(_cain.file_read_error_what, None, file_read_error)
file_read_error_swigregister = _cain.file_read_error_swigregister
file_read_error_swigregister(file_read_error)

class file_write_error(io_error):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _cain.file_write_error_swiginit(self, _cain.new_file_write_error())
    __swig_destroy__ = _cain.delete_file_write_error
file_write_error.what = new_instancemethod(_cain.file_write_error_what, None, file_write_error)
file_write_error_swigregister = _cain.file_write_error_swigregister
file_write_error_swigregister(file_write_error)

class CommonTimer(BaseClass):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonTimer:
            _self = None
        else:
            _self = self
        _cain.CommonTimer_swiginit(self, _cain.new_CommonTimer(_self, ))
    __swig_destroy__ = _cain.delete_CommonTimer
    get_shared = staticmethod(_cain.CommonTimer_get_shared)
    type = _swig_property(_cain.CommonTimer_type_get, _cain.CommonTimer_type_set)
    unwrap = staticmethod(_cain.CommonTimer_unwrap)
    dereference = staticmethod(_cain.CommonTimer_dereference)
    get = staticmethod(_cain.CommonTimer_get)
    name = _swig_property(_cain.CommonTimer_name_get, _cain.CommonTimer_name_set)
    gen_scheme = staticmethod(_cain.CommonTimer_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonTimer(self)
        return weakref_proxy(self)
CommonTimer.get_classname = new_instancemethod(_cain.CommonTimer_get_classname, None, CommonTimer)
CommonTimer.get_metadata_path = new_instancemethod(_cain.CommonTimer_get_metadata_path, None, CommonTimer)
CommonTimer.shared_from_this = new_instancemethod(_cain.CommonTimer_shared_from_this, None, CommonTimer)
CommonTimer.get_uuid = new_instancemethod(_cain.CommonTimer_get_uuid, None, CommonTimer)
CommonTimer.get_scheme = new_instancemethod(_cain.CommonTimer_get_scheme, None, CommonTimer)
CommonTimer_swigregister = _cain.CommonTimer_swigregister
CommonTimer_swigregister(CommonTimer)

def CommonTimer_get_shared(i):
    return _cain.CommonTimer_get_shared(i)
CommonTimer_get_shared = _cain.CommonTimer_get_shared

def CommonTimer_unwrap(ptr):
    return _cain.CommonTimer_unwrap(ptr)
CommonTimer_unwrap = _cain.CommonTimer_unwrap

def CommonTimer_dereference(sptr):
    return _cain.CommonTimer_dereference(sptr)
CommonTimer_dereference = _cain.CommonTimer_dereference

def CommonTimer_get(*args):
    return _cain.CommonTimer_get(*args)
CommonTimer_get = _cain.CommonTimer_get

def CommonTimer_gen_scheme(sfile):
    return _cain.CommonTimer_gen_scheme(sfile)
CommonTimer_gen_scheme = _cain.CommonTimer_gen_scheme

class Timer(CommonTimer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, name, report=True):
        if self.__class__ == Timer:
            _self = None
        else:
            _self = self
        _cain.Timer_swiginit(self, _cain.new_Timer(_self, name, report))
    __swig_destroy__ = _cain.delete_Timer
    def __disown__(self):
        self.this.disown()
        _cain.disown_Timer(self)
        return weakref_proxy(self)
Timer.elapsed = new_instancemethod(_cain.Timer_elapsed, None, Timer)
Timer.stop = new_instancemethod(_cain.Timer_stop, None, Timer)
Timer.start = new_instancemethod(_cain.Timer_start, None, Timer)
Timer.resume = new_instancemethod(_cain.Timer_resume, None, Timer)
Timer_swigregister = _cain.Timer_swigregister
Timer_swigregister(Timer)

class _string_list(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _cain._string_list_swiginit(self, _cain.new__string_list(*args))
    __swig_destroy__ = _cain.delete__string_list
_string_list.iterator = new_instancemethod(_cain._string_list_iterator, None, _string_list)
_string_list.__nonzero__ = new_instancemethod(_cain._string_list___nonzero__, None, _string_list)
_string_list.__bool__ = new_instancemethod(_cain._string_list___bool__, None, _string_list)
_string_list.__len__ = new_instancemethod(_cain._string_list___len__, None, _string_list)
_string_list.__getslice__ = new_instancemethod(_cain._string_list___getslice__, None, _string_list)
_string_list.__setslice__ = new_instancemethod(_cain._string_list___setslice__, None, _string_list)
_string_list.__delslice__ = new_instancemethod(_cain._string_list___delslice__, None, _string_list)
_string_list.__delitem__ = new_instancemethod(_cain._string_list___delitem__, None, _string_list)
_string_list.__getitem__ = new_instancemethod(_cain._string_list___getitem__, None, _string_list)
_string_list.__setitem__ = new_instancemethod(_cain._string_list___setitem__, None, _string_list)
_string_list.pop = new_instancemethod(_cain._string_list_pop, None, _string_list)
_string_list.append = new_instancemethod(_cain._string_list_append, None, _string_list)
_string_list.empty = new_instancemethod(_cain._string_list_empty, None, _string_list)
_string_list.size = new_instancemethod(_cain._string_list_size, None, _string_list)
_string_list.swap = new_instancemethod(_cain._string_list_swap, None, _string_list)
_string_list.begin = new_instancemethod(_cain._string_list_begin, None, _string_list)
_string_list.end = new_instancemethod(_cain._string_list_end, None, _string_list)
_string_list.rbegin = new_instancemethod(_cain._string_list_rbegin, None, _string_list)
_string_list.rend = new_instancemethod(_cain._string_list_rend, None, _string_list)
_string_list.clear = new_instancemethod(_cain._string_list_clear, None, _string_list)
_string_list.get_allocator = new_instancemethod(_cain._string_list_get_allocator, None, _string_list)
_string_list.pop_back = new_instancemethod(_cain._string_list_pop_back, None, _string_list)
_string_list.erase = new_instancemethod(_cain._string_list_erase, None, _string_list)
_string_list.push_back = new_instancemethod(_cain._string_list_push_back, None, _string_list)
_string_list.front = new_instancemethod(_cain._string_list_front, None, _string_list)
_string_list.back = new_instancemethod(_cain._string_list_back, None, _string_list)
_string_list.assign = new_instancemethod(_cain._string_list_assign, None, _string_list)
_string_list.resize = new_instancemethod(_cain._string_list_resize, None, _string_list)
_string_list.insert = new_instancemethod(_cain._string_list_insert, None, _string_list)
_string_list.reserve = new_instancemethod(_cain._string_list_reserve, None, _string_list)
_string_list.capacity = new_instancemethod(_cain._string_list_capacity, None, _string_list)
_string_list_swigregister = _cain._string_list_swigregister
_string_list_swigregister(_string_list)

class IntVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _cain.IntVector_swiginit(self, _cain.new_IntVector(*args))
    __swig_destroy__ = _cain.delete_IntVector
IntVector.iterator = new_instancemethod(_cain.IntVector_iterator, None, IntVector)
IntVector.__nonzero__ = new_instancemethod(_cain.IntVector___nonzero__, None, IntVector)
IntVector.__bool__ = new_instancemethod(_cain.IntVector___bool__, None, IntVector)
IntVector.__len__ = new_instancemethod(_cain.IntVector___len__, None, IntVector)
IntVector.__getslice__ = new_instancemethod(_cain.IntVector___getslice__, None, IntVector)
IntVector.__setslice__ = new_instancemethod(_cain.IntVector___setslice__, None, IntVector)
IntVector.__delslice__ = new_instancemethod(_cain.IntVector___delslice__, None, IntVector)
IntVector.__delitem__ = new_instancemethod(_cain.IntVector___delitem__, None, IntVector)
IntVector.__getitem__ = new_instancemethod(_cain.IntVector___getitem__, None, IntVector)
IntVector.__setitem__ = new_instancemethod(_cain.IntVector___setitem__, None, IntVector)
IntVector.pop = new_instancemethod(_cain.IntVector_pop, None, IntVector)
IntVector.append = new_instancemethod(_cain.IntVector_append, None, IntVector)
IntVector.empty = new_instancemethod(_cain.IntVector_empty, None, IntVector)
IntVector.size = new_instancemethod(_cain.IntVector_size, None, IntVector)
IntVector.swap = new_instancemethod(_cain.IntVector_swap, None, IntVector)
IntVector.begin = new_instancemethod(_cain.IntVector_begin, None, IntVector)
IntVector.end = new_instancemethod(_cain.IntVector_end, None, IntVector)
IntVector.rbegin = new_instancemethod(_cain.IntVector_rbegin, None, IntVector)
IntVector.rend = new_instancemethod(_cain.IntVector_rend, None, IntVector)
IntVector.clear = new_instancemethod(_cain.IntVector_clear, None, IntVector)
IntVector.get_allocator = new_instancemethod(_cain.IntVector_get_allocator, None, IntVector)
IntVector.pop_back = new_instancemethod(_cain.IntVector_pop_back, None, IntVector)
IntVector.erase = new_instancemethod(_cain.IntVector_erase, None, IntVector)
IntVector.push_back = new_instancemethod(_cain.IntVector_push_back, None, IntVector)
IntVector.front = new_instancemethod(_cain.IntVector_front, None, IntVector)
IntVector.back = new_instancemethod(_cain.IntVector_back, None, IntVector)
IntVector.assign = new_instancemethod(_cain.IntVector_assign, None, IntVector)
IntVector.resize = new_instancemethod(_cain.IntVector_resize, None, IntVector)
IntVector.insert = new_instancemethod(_cain.IntVector_insert, None, IntVector)
IntVector.reserve = new_instancemethod(_cain.IntVector_reserve, None, IntVector)
IntVector.capacity = new_instancemethod(_cain.IntVector_capacity, None, IntVector)
IntVector_swigregister = _cain.IntVector_swigregister
IntVector_swigregister(IntVector)

class UnsignedIntVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _cain.UnsignedIntVector_swiginit(self, _cain.new_UnsignedIntVector(*args))
    __swig_destroy__ = _cain.delete_UnsignedIntVector
UnsignedIntVector.iterator = new_instancemethod(_cain.UnsignedIntVector_iterator, None, UnsignedIntVector)
UnsignedIntVector.__nonzero__ = new_instancemethod(_cain.UnsignedIntVector___nonzero__, None, UnsignedIntVector)
UnsignedIntVector.__bool__ = new_instancemethod(_cain.UnsignedIntVector___bool__, None, UnsignedIntVector)
UnsignedIntVector.__len__ = new_instancemethod(_cain.UnsignedIntVector___len__, None, UnsignedIntVector)
UnsignedIntVector.__getslice__ = new_instancemethod(_cain.UnsignedIntVector___getslice__, None, UnsignedIntVector)
UnsignedIntVector.__setslice__ = new_instancemethod(_cain.UnsignedIntVector___setslice__, None, UnsignedIntVector)
UnsignedIntVector.__delslice__ = new_instancemethod(_cain.UnsignedIntVector___delslice__, None, UnsignedIntVector)
UnsignedIntVector.__delitem__ = new_instancemethod(_cain.UnsignedIntVector___delitem__, None, UnsignedIntVector)
UnsignedIntVector.__getitem__ = new_instancemethod(_cain.UnsignedIntVector___getitem__, None, UnsignedIntVector)
UnsignedIntVector.__setitem__ = new_instancemethod(_cain.UnsignedIntVector___setitem__, None, UnsignedIntVector)
UnsignedIntVector.pop = new_instancemethod(_cain.UnsignedIntVector_pop, None, UnsignedIntVector)
UnsignedIntVector.append = new_instancemethod(_cain.UnsignedIntVector_append, None, UnsignedIntVector)
UnsignedIntVector.empty = new_instancemethod(_cain.UnsignedIntVector_empty, None, UnsignedIntVector)
UnsignedIntVector.size = new_instancemethod(_cain.UnsignedIntVector_size, None, UnsignedIntVector)
UnsignedIntVector.swap = new_instancemethod(_cain.UnsignedIntVector_swap, None, UnsignedIntVector)
UnsignedIntVector.begin = new_instancemethod(_cain.UnsignedIntVector_begin, None, UnsignedIntVector)
UnsignedIntVector.end = new_instancemethod(_cain.UnsignedIntVector_end, None, UnsignedIntVector)
UnsignedIntVector.rbegin = new_instancemethod(_cain.UnsignedIntVector_rbegin, None, UnsignedIntVector)
UnsignedIntVector.rend = new_instancemethod(_cain.UnsignedIntVector_rend, None, UnsignedIntVector)
UnsignedIntVector.clear = new_instancemethod(_cain.UnsignedIntVector_clear, None, UnsignedIntVector)
UnsignedIntVector.get_allocator = new_instancemethod(_cain.UnsignedIntVector_get_allocator, None, UnsignedIntVector)
UnsignedIntVector.pop_back = new_instancemethod(_cain.UnsignedIntVector_pop_back, None, UnsignedIntVector)
UnsignedIntVector.erase = new_instancemethod(_cain.UnsignedIntVector_erase, None, UnsignedIntVector)
UnsignedIntVector.push_back = new_instancemethod(_cain.UnsignedIntVector_push_back, None, UnsignedIntVector)
UnsignedIntVector.front = new_instancemethod(_cain.UnsignedIntVector_front, None, UnsignedIntVector)
UnsignedIntVector.back = new_instancemethod(_cain.UnsignedIntVector_back, None, UnsignedIntVector)
UnsignedIntVector.assign = new_instancemethod(_cain.UnsignedIntVector_assign, None, UnsignedIntVector)
UnsignedIntVector.resize = new_instancemethod(_cain.UnsignedIntVector_resize, None, UnsignedIntVector)
UnsignedIntVector.insert = new_instancemethod(_cain.UnsignedIntVector_insert, None, UnsignedIntVector)
UnsignedIntVector.reserve = new_instancemethod(_cain.UnsignedIntVector_reserve, None, UnsignedIntVector)
UnsignedIntVector.capacity = new_instancemethod(_cain.UnsignedIntVector_capacity, None, UnsignedIntVector)
UnsignedIntVector_swigregister = _cain.UnsignedIntVector_swigregister
UnsignedIntVector_swigregister(UnsignedIntVector)

class IntVectorVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _cain.IntVectorVector_swiginit(self, _cain.new_IntVectorVector(*args))
    __swig_destroy__ = _cain.delete_IntVectorVector
IntVectorVector.iterator = new_instancemethod(_cain.IntVectorVector_iterator, None, IntVectorVector)
IntVectorVector.__nonzero__ = new_instancemethod(_cain.IntVectorVector___nonzero__, None, IntVectorVector)
IntVectorVector.__bool__ = new_instancemethod(_cain.IntVectorVector___bool__, None, IntVectorVector)
IntVectorVector.__len__ = new_instancemethod(_cain.IntVectorVector___len__, None, IntVectorVector)
IntVectorVector.__getslice__ = new_instancemethod(_cain.IntVectorVector___getslice__, None, IntVectorVector)
IntVectorVector.__setslice__ = new_instancemethod(_cain.IntVectorVector___setslice__, None, IntVectorVector)
IntVectorVector.__delslice__ = new_instancemethod(_cain.IntVectorVector___delslice__, None, IntVectorVector)
IntVectorVector.__delitem__ = new_instancemethod(_cain.IntVectorVector___delitem__, None, IntVectorVector)
IntVectorVector.__getitem__ = new_instancemethod(_cain.IntVectorVector___getitem__, None, IntVectorVector)
IntVectorVector.__setitem__ = new_instancemethod(_cain.IntVectorVector___setitem__, None, IntVectorVector)
IntVectorVector.pop = new_instancemethod(_cain.IntVectorVector_pop, None, IntVectorVector)
IntVectorVector.append = new_instancemethod(_cain.IntVectorVector_append, None, IntVectorVector)
IntVectorVector.empty = new_instancemethod(_cain.IntVectorVector_empty, None, IntVectorVector)
IntVectorVector.size = new_instancemethod(_cain.IntVectorVector_size, None, IntVectorVector)
IntVectorVector.swap = new_instancemethod(_cain.IntVectorVector_swap, None, IntVectorVector)
IntVectorVector.begin = new_instancemethod(_cain.IntVectorVector_begin, None, IntVectorVector)
IntVectorVector.end = new_instancemethod(_cain.IntVectorVector_end, None, IntVectorVector)
IntVectorVector.rbegin = new_instancemethod(_cain.IntVectorVector_rbegin, None, IntVectorVector)
IntVectorVector.rend = new_instancemethod(_cain.IntVectorVector_rend, None, IntVectorVector)
IntVectorVector.clear = new_instancemethod(_cain.IntVectorVector_clear, None, IntVectorVector)
IntVectorVector.get_allocator = new_instancemethod(_cain.IntVectorVector_get_allocator, None, IntVectorVector)
IntVectorVector.pop_back = new_instancemethod(_cain.IntVectorVector_pop_back, None, IntVectorVector)
IntVectorVector.erase = new_instancemethod(_cain.IntVectorVector_erase, None, IntVectorVector)
IntVectorVector.push_back = new_instancemethod(_cain.IntVectorVector_push_back, None, IntVectorVector)
IntVectorVector.front = new_instancemethod(_cain.IntVectorVector_front, None, IntVectorVector)
IntVectorVector.back = new_instancemethod(_cain.IntVectorVector_back, None, IntVectorVector)
IntVectorVector.assign = new_instancemethod(_cain.IntVectorVector_assign, None, IntVectorVector)
IntVectorVector.resize = new_instancemethod(_cain.IntVectorVector_resize, None, IntVectorVector)
IntVectorVector.insert = new_instancemethod(_cain.IntVectorVector_insert, None, IntVectorVector)
IntVectorVector.reserve = new_instancemethod(_cain.IntVectorVector_reserve, None, IntVectorVector)
IntVectorVector.capacity = new_instancemethod(_cain.IntVectorVector_capacity, None, IntVectorVector)
IntVectorVector_swigregister = _cain.IntVectorVector_swigregister
IntVectorVector_swigregister(IntVectorVector)

class UnsignedIntVectorVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _cain.UnsignedIntVectorVector_swiginit(self, _cain.new_UnsignedIntVectorVector(*args))
    __swig_destroy__ = _cain.delete_UnsignedIntVectorVector
UnsignedIntVectorVector.iterator = new_instancemethod(_cain.UnsignedIntVectorVector_iterator, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.__nonzero__ = new_instancemethod(_cain.UnsignedIntVectorVector___nonzero__, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.__bool__ = new_instancemethod(_cain.UnsignedIntVectorVector___bool__, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.__len__ = new_instancemethod(_cain.UnsignedIntVectorVector___len__, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.__getslice__ = new_instancemethod(_cain.UnsignedIntVectorVector___getslice__, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.__setslice__ = new_instancemethod(_cain.UnsignedIntVectorVector___setslice__, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.__delslice__ = new_instancemethod(_cain.UnsignedIntVectorVector___delslice__, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.__delitem__ = new_instancemethod(_cain.UnsignedIntVectorVector___delitem__, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.__getitem__ = new_instancemethod(_cain.UnsignedIntVectorVector___getitem__, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.__setitem__ = new_instancemethod(_cain.UnsignedIntVectorVector___setitem__, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.pop = new_instancemethod(_cain.UnsignedIntVectorVector_pop, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.append = new_instancemethod(_cain.UnsignedIntVectorVector_append, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.empty = new_instancemethod(_cain.UnsignedIntVectorVector_empty, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.size = new_instancemethod(_cain.UnsignedIntVectorVector_size, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.swap = new_instancemethod(_cain.UnsignedIntVectorVector_swap, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.begin = new_instancemethod(_cain.UnsignedIntVectorVector_begin, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.end = new_instancemethod(_cain.UnsignedIntVectorVector_end, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.rbegin = new_instancemethod(_cain.UnsignedIntVectorVector_rbegin, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.rend = new_instancemethod(_cain.UnsignedIntVectorVector_rend, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.clear = new_instancemethod(_cain.UnsignedIntVectorVector_clear, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.get_allocator = new_instancemethod(_cain.UnsignedIntVectorVector_get_allocator, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.pop_back = new_instancemethod(_cain.UnsignedIntVectorVector_pop_back, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.erase = new_instancemethod(_cain.UnsignedIntVectorVector_erase, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.push_back = new_instancemethod(_cain.UnsignedIntVectorVector_push_back, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.front = new_instancemethod(_cain.UnsignedIntVectorVector_front, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.back = new_instancemethod(_cain.UnsignedIntVectorVector_back, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.assign = new_instancemethod(_cain.UnsignedIntVectorVector_assign, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.resize = new_instancemethod(_cain.UnsignedIntVectorVector_resize, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.insert = new_instancemethod(_cain.UnsignedIntVectorVector_insert, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.reserve = new_instancemethod(_cain.UnsignedIntVectorVector_reserve, None, UnsignedIntVectorVector)
UnsignedIntVectorVector.capacity = new_instancemethod(_cain.UnsignedIntVectorVector_capacity, None, UnsignedIntVectorVector)
UnsignedIntVectorVector_swigregister = _cain.UnsignedIntVectorVector_swigregister
UnsignedIntVectorVector_swigregister(UnsignedIntVectorVector)

class CommonPoint(BaseClass):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonPoint:
            _self = None
        else:
            _self = self
        _cain.CommonPoint_swiginit(self, _cain.new_CommonPoint(_self, ))
    __swig_destroy__ = _cain.delete_CommonPoint
    get_shared = staticmethod(_cain.CommonPoint_get_shared)
    type = _swig_property(_cain.CommonPoint_type_get, _cain.CommonPoint_type_set)
    unwrap = staticmethod(_cain.CommonPoint_unwrap)
    dereference = staticmethod(_cain.CommonPoint_dereference)
    get = staticmethod(_cain.CommonPoint_get)
    name = _swig_property(_cain.CommonPoint_name_get, _cain.CommonPoint_name_set)
    gen_scheme = staticmethod(_cain.CommonPoint_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonPoint(self)
        return weakref_proxy(self)
CommonPoint.get_classname = new_instancemethod(_cain.CommonPoint_get_classname, None, CommonPoint)
CommonPoint.get_metadata_path = new_instancemethod(_cain.CommonPoint_get_metadata_path, None, CommonPoint)
CommonPoint.shared_from_this = new_instancemethod(_cain.CommonPoint_shared_from_this, None, CommonPoint)
CommonPoint.get_uuid = new_instancemethod(_cain.CommonPoint_get_uuid, None, CommonPoint)
CommonPoint.get_scheme = new_instancemethod(_cain.CommonPoint_get_scheme, None, CommonPoint)
CommonPoint_swigregister = _cain.CommonPoint_swigregister
CommonPoint_swigregister(CommonPoint)

def CommonPoint_get_shared(i):
    return _cain.CommonPoint_get_shared(i)
CommonPoint_get_shared = _cain.CommonPoint_get_shared

def CommonPoint_unwrap(ptr):
    return _cain.CommonPoint_unwrap(ptr)
CommonPoint_unwrap = _cain.CommonPoint_unwrap

def CommonPoint_dereference(sptr):
    return _cain.CommonPoint_dereference(sptr)
CommonPoint_dereference = _cain.CommonPoint_dereference

def CommonPoint_get(*args):
    return _cain.CommonPoint_get(*args)
CommonPoint_get = _cain.CommonPoint_get

def CommonPoint_gen_scheme(sfile):
    return _cain.CommonPoint_gen_scheme(sfile)
CommonPoint_gen_scheme = _cain.CommonPoint_gen_scheme

class PointVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _cain.PointVector_swiginit(self, _cain.new_PointVector(*args))
    __swig_destroy__ = _cain.delete_PointVector
PointVector.iterator = new_instancemethod(_cain.PointVector_iterator, None, PointVector)
PointVector.__nonzero__ = new_instancemethod(_cain.PointVector___nonzero__, None, PointVector)
PointVector.__bool__ = new_instancemethod(_cain.PointVector___bool__, None, PointVector)
PointVector.__len__ = new_instancemethod(_cain.PointVector___len__, None, PointVector)
PointVector.__getslice__ = new_instancemethod(_cain.PointVector___getslice__, None, PointVector)
PointVector.__setslice__ = new_instancemethod(_cain.PointVector___setslice__, None, PointVector)
PointVector.__delslice__ = new_instancemethod(_cain.PointVector___delslice__, None, PointVector)
PointVector.__delitem__ = new_instancemethod(_cain.PointVector___delitem__, None, PointVector)
PointVector.__getitem__ = new_instancemethod(_cain.PointVector___getitem__, None, PointVector)
PointVector.__setitem__ = new_instancemethod(_cain.PointVector___setitem__, None, PointVector)
PointVector.pop = new_instancemethod(_cain.PointVector_pop, None, PointVector)
PointVector.append = new_instancemethod(_cain.PointVector_append, None, PointVector)
PointVector.empty = new_instancemethod(_cain.PointVector_empty, None, PointVector)
PointVector.size = new_instancemethod(_cain.PointVector_size, None, PointVector)
PointVector.swap = new_instancemethod(_cain.PointVector_swap, None, PointVector)
PointVector.begin = new_instancemethod(_cain.PointVector_begin, None, PointVector)
PointVector.end = new_instancemethod(_cain.PointVector_end, None, PointVector)
PointVector.rbegin = new_instancemethod(_cain.PointVector_rbegin, None, PointVector)
PointVector.rend = new_instancemethod(_cain.PointVector_rend, None, PointVector)
PointVector.clear = new_instancemethod(_cain.PointVector_clear, None, PointVector)
PointVector.get_allocator = new_instancemethod(_cain.PointVector_get_allocator, None, PointVector)
PointVector.pop_back = new_instancemethod(_cain.PointVector_pop_back, None, PointVector)
PointVector.erase = new_instancemethod(_cain.PointVector_erase, None, PointVector)
PointVector.push_back = new_instancemethod(_cain.PointVector_push_back, None, PointVector)
PointVector.front = new_instancemethod(_cain.PointVector_front, None, PointVector)
PointVector.back = new_instancemethod(_cain.PointVector_back, None, PointVector)
PointVector.assign = new_instancemethod(_cain.PointVector_assign, None, PointVector)
PointVector.resize = new_instancemethod(_cain.PointVector_resize, None, PointVector)
PointVector.insert = new_instancemethod(_cain.PointVector_insert, None, PointVector)
PointVector.reserve = new_instancemethod(_cain.PointVector_reserve, None, PointVector)
PointVector.capacity = new_instancemethod(_cain.PointVector_capacity, None, PointVector)
PointVector_swigregister = _cain.PointVector_swigregister
PointVector_swigregister(PointVector)

class Point(CommonPoint):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cain.delete_Point

    def __init__(self):
        if self.__class__ == Point:
            _self = None
        else:
            _self = self
        _cain.Point_swiginit(self, _cain.new_Point(_self, ))
    def __disown__(self):
        self.this.disown()
        _cain.disown_Point(self)
        return weakref_proxy(self)
Point.clone = new_instancemethod(_cain.Point_clone, None, Point)
Point_swigregister = _cain.Point_swigregister
Point_swigregister(Point)

class CommonElement(BaseClass):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonElement:
            _self = None
        else:
            _self = self
        _cain.CommonElement_swiginit(self, _cain.new_CommonElement(_self, ))
    __swig_destroy__ = _cain.delete_CommonElement
    get_shared = staticmethod(_cain.CommonElement_get_shared)
    type = _swig_property(_cain.CommonElement_type_get, _cain.CommonElement_type_set)
    unwrap = staticmethod(_cain.CommonElement_unwrap)
    dereference = staticmethod(_cain.CommonElement_dereference)
    get = staticmethod(_cain.CommonElement_get)
    name = _swig_property(_cain.CommonElement_name_get, _cain.CommonElement_name_set)
    gen_scheme = staticmethod(_cain.CommonElement_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonElement(self)
        return weakref_proxy(self)
CommonElement.get_classname = new_instancemethod(_cain.CommonElement_get_classname, None, CommonElement)
CommonElement.get_metadata_path = new_instancemethod(_cain.CommonElement_get_metadata_path, None, CommonElement)
CommonElement.shared_from_this = new_instancemethod(_cain.CommonElement_shared_from_this, None, CommonElement)
CommonElement.get_uuid = new_instancemethod(_cain.CommonElement_get_uuid, None, CommonElement)
CommonElement.get_scheme = new_instancemethod(_cain.CommonElement_get_scheme, None, CommonElement)
CommonElement_swigregister = _cain.CommonElement_swigregister
CommonElement_swigregister(CommonElement)

def CommonElement_get_shared(i):
    return _cain.CommonElement_get_shared(i)
CommonElement_get_shared = _cain.CommonElement_get_shared

def CommonElement_unwrap(ptr):
    return _cain.CommonElement_unwrap(ptr)
CommonElement_unwrap = _cain.CommonElement_unwrap

def CommonElement_dereference(sptr):
    return _cain.CommonElement_dereference(sptr)
CommonElement_dereference = _cain.CommonElement_dereference

def CommonElement_get(*args):
    return _cain.CommonElement_get(*args)
CommonElement_get = _cain.CommonElement_get

def CommonElement_gen_scheme(sfile):
    return _cain.CommonElement_gen_scheme(sfile)
CommonElement_gen_scheme = _cain.CommonElement_gen_scheme

class CommonMesh(BaseClass):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonMesh:
            _self = None
        else:
            _self = self
        _cain.CommonMesh_swiginit(self, _cain.new_CommonMesh(_self, ))
    __swig_destroy__ = _cain.delete_CommonMesh
    get_shared = staticmethod(_cain.CommonMesh_get_shared)
    type = _swig_property(_cain.CommonMesh_type_get, _cain.CommonMesh_type_set)
    unwrap = staticmethod(_cain.CommonMesh_unwrap)
    dereference = staticmethod(_cain.CommonMesh_dereference)
    get = staticmethod(_cain.CommonMesh_get)
    name = _swig_property(_cain.CommonMesh_name_get, _cain.CommonMesh_name_set)
    gen_scheme = staticmethod(_cain.CommonMesh_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonMesh(self)
        return weakref_proxy(self)
CommonMesh.get_classname = new_instancemethod(_cain.CommonMesh_get_classname, None, CommonMesh)
CommonMesh.get_metadata_path = new_instancemethod(_cain.CommonMesh_get_metadata_path, None, CommonMesh)
CommonMesh.shared_from_this = new_instancemethod(_cain.CommonMesh_shared_from_this, None, CommonMesh)
CommonMesh.get_uuid = new_instancemethod(_cain.CommonMesh_get_uuid, None, CommonMesh)
CommonMesh.get_scheme = new_instancemethod(_cain.CommonMesh_get_scheme, None, CommonMesh)
CommonMesh_swigregister = _cain.CommonMesh_swigregister
CommonMesh_swigregister(CommonMesh)

def CommonMesh_get_shared(i):
    return _cain.CommonMesh_get_shared(i)
CommonMesh_get_shared = _cain.CommonMesh_get_shared

def CommonMesh_unwrap(ptr):
    return _cain.CommonMesh_unwrap(ptr)
CommonMesh_unwrap = _cain.CommonMesh_unwrap

def CommonMesh_dereference(sptr):
    return _cain.CommonMesh_dereference(sptr)
CommonMesh_dereference = _cain.CommonMesh_dereference

def CommonMesh_get(*args):
    return _cain.CommonMesh_get(*args)
CommonMesh_get = _cain.CommonMesh_get

def CommonMesh_gen_scheme(sfile):
    return _cain.CommonMesh_gen_scheme(sfile)
CommonMesh_gen_scheme = _cain.CommonMesh_gen_scheme

class CommonDexter(BaseClass):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonDexter:
            _self = None
        else:
            _self = self
        _cain.CommonDexter_swiginit(self, _cain.new_CommonDexter(_self, ))
    __swig_destroy__ = _cain.delete_CommonDexter
    get_shared = staticmethod(_cain.CommonDexter_get_shared)
    type = _swig_property(_cain.CommonDexter_type_get, _cain.CommonDexter_type_set)
    unwrap = staticmethod(_cain.CommonDexter_unwrap)
    dereference = staticmethod(_cain.CommonDexter_dereference)
    get = staticmethod(_cain.CommonDexter_get)
    name = _swig_property(_cain.CommonDexter_name_get, _cain.CommonDexter_name_set)
    gen_scheme = staticmethod(_cain.CommonDexter_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonDexter(self)
        return weakref_proxy(self)
CommonDexter.get_classname = new_instancemethod(_cain.CommonDexter_get_classname, None, CommonDexter)
CommonDexter.get_metadata_path = new_instancemethod(_cain.CommonDexter_get_metadata_path, None, CommonDexter)
CommonDexter.shared_from_this = new_instancemethod(_cain.CommonDexter_shared_from_this, None, CommonDexter)
CommonDexter.get_uuid = new_instancemethod(_cain.CommonDexter_get_uuid, None, CommonDexter)
CommonDexter.get_scheme = new_instancemethod(_cain.CommonDexter_get_scheme, None, CommonDexter)
CommonDexter_swigregister = _cain.CommonDexter_swigregister
CommonDexter_swigregister(CommonDexter)

def CommonDexter_get_shared(i):
    return _cain.CommonDexter_get_shared(i)
CommonDexter_get_shared = _cain.CommonDexter_get_shared

def CommonDexter_unwrap(ptr):
    return _cain.CommonDexter_unwrap(ptr)
CommonDexter_unwrap = _cain.CommonDexter_unwrap

def CommonDexter_dereference(sptr):
    return _cain.CommonDexter_dereference(sptr)
CommonDexter_dereference = _cain.CommonDexter_dereference

def CommonDexter_get(*args):
    return _cain.CommonDexter_get(*args)
CommonDexter_get = _cain.CommonDexter_get

def CommonDexter_gen_scheme(sfile):
    return _cain.CommonDexter_gen_scheme(sfile)
CommonDexter_gen_scheme = _cain.CommonDexter_gen_scheme

class CommonContourElement(BaseClass):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonContourElement:
            _self = None
        else:
            _self = self
        _cain.CommonContourElement_swiginit(self, _cain.new_CommonContourElement(_self, ))
    __swig_destroy__ = _cain.delete_CommonContourElement
    get_shared = staticmethod(_cain.CommonContourElement_get_shared)
    type = _swig_property(_cain.CommonContourElement_type_get, _cain.CommonContourElement_type_set)
    unwrap = staticmethod(_cain.CommonContourElement_unwrap)
    dereference = staticmethod(_cain.CommonContourElement_dereference)
    get = staticmethod(_cain.CommonContourElement_get)
    name = _swig_property(_cain.CommonContourElement_name_get, _cain.CommonContourElement_name_set)
    gen_scheme = staticmethod(_cain.CommonContourElement_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonContourElement(self)
        return weakref_proxy(self)
CommonContourElement.get_classname = new_instancemethod(_cain.CommonContourElement_get_classname, None, CommonContourElement)
CommonContourElement.get_metadata_path = new_instancemethod(_cain.CommonContourElement_get_metadata_path, None, CommonContourElement)
CommonContourElement.shared_from_this = new_instancemethod(_cain.CommonContourElement_shared_from_this, None, CommonContourElement)
CommonContourElement.get_uuid = new_instancemethod(_cain.CommonContourElement_get_uuid, None, CommonContourElement)
CommonContourElement.get_scheme = new_instancemethod(_cain.CommonContourElement_get_scheme, None, CommonContourElement)
CommonContourElement_swigregister = _cain.CommonContourElement_swigregister
CommonContourElement_swigregister(CommonContourElement)

def CommonContourElement_get_shared(i):
    return _cain.CommonContourElement_get_shared(i)
CommonContourElement_get_shared = _cain.CommonContourElement_get_shared

def CommonContourElement_unwrap(ptr):
    return _cain.CommonContourElement_unwrap(ptr)
CommonContourElement_unwrap = _cain.CommonContourElement_unwrap

def CommonContourElement_dereference(sptr):
    return _cain.CommonContourElement_dereference(sptr)
CommonContourElement_dereference = _cain.CommonContourElement_dereference

def CommonContourElement_get(*args):
    return _cain.CommonContourElement_get(*args)
CommonContourElement_get = _cain.CommonContourElement_get

def CommonContourElement_gen_scheme(sfile):
    return _cain.CommonContourElement_gen_scheme(sfile)
CommonContourElement_gen_scheme = _cain.CommonContourElement_gen_scheme

class ElementVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _cain.ElementVector_swiginit(self, _cain.new_ElementVector(*args))
    __swig_destroy__ = _cain.delete_ElementVector
ElementVector.iterator = new_instancemethod(_cain.ElementVector_iterator, None, ElementVector)
ElementVector.__nonzero__ = new_instancemethod(_cain.ElementVector___nonzero__, None, ElementVector)
ElementVector.__bool__ = new_instancemethod(_cain.ElementVector___bool__, None, ElementVector)
ElementVector.__len__ = new_instancemethod(_cain.ElementVector___len__, None, ElementVector)
ElementVector.__getslice__ = new_instancemethod(_cain.ElementVector___getslice__, None, ElementVector)
ElementVector.__setslice__ = new_instancemethod(_cain.ElementVector___setslice__, None, ElementVector)
ElementVector.__delslice__ = new_instancemethod(_cain.ElementVector___delslice__, None, ElementVector)
ElementVector.__delitem__ = new_instancemethod(_cain.ElementVector___delitem__, None, ElementVector)
ElementVector.__getitem__ = new_instancemethod(_cain.ElementVector___getitem__, None, ElementVector)
ElementVector.__setitem__ = new_instancemethod(_cain.ElementVector___setitem__, None, ElementVector)
ElementVector.pop = new_instancemethod(_cain.ElementVector_pop, None, ElementVector)
ElementVector.append = new_instancemethod(_cain.ElementVector_append, None, ElementVector)
ElementVector.empty = new_instancemethod(_cain.ElementVector_empty, None, ElementVector)
ElementVector.size = new_instancemethod(_cain.ElementVector_size, None, ElementVector)
ElementVector.swap = new_instancemethod(_cain.ElementVector_swap, None, ElementVector)
ElementVector.begin = new_instancemethod(_cain.ElementVector_begin, None, ElementVector)
ElementVector.end = new_instancemethod(_cain.ElementVector_end, None, ElementVector)
ElementVector.rbegin = new_instancemethod(_cain.ElementVector_rbegin, None, ElementVector)
ElementVector.rend = new_instancemethod(_cain.ElementVector_rend, None, ElementVector)
ElementVector.clear = new_instancemethod(_cain.ElementVector_clear, None, ElementVector)
ElementVector.get_allocator = new_instancemethod(_cain.ElementVector_get_allocator, None, ElementVector)
ElementVector.pop_back = new_instancemethod(_cain.ElementVector_pop_back, None, ElementVector)
ElementVector.erase = new_instancemethod(_cain.ElementVector_erase, None, ElementVector)
ElementVector.push_back = new_instancemethod(_cain.ElementVector_push_back, None, ElementVector)
ElementVector.front = new_instancemethod(_cain.ElementVector_front, None, ElementVector)
ElementVector.back = new_instancemethod(_cain.ElementVector_back, None, ElementVector)
ElementVector.assign = new_instancemethod(_cain.ElementVector_assign, None, ElementVector)
ElementVector.resize = new_instancemethod(_cain.ElementVector_resize, None, ElementVector)
ElementVector.insert = new_instancemethod(_cain.ElementVector_insert, None, ElementVector)
ElementVector.reserve = new_instancemethod(_cain.ElementVector_reserve, None, ElementVector)
ElementVector.capacity = new_instancemethod(_cain.ElementVector_capacity, None, ElementVector)
ElementVector_swigregister = _cain.ElementVector_swigregister
ElementVector_swigregister(ElementVector)

class ContourElementVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _cain.ContourElementVector_swiginit(self, _cain.new_ContourElementVector(*args))
    __swig_destroy__ = _cain.delete_ContourElementVector
ContourElementVector.iterator = new_instancemethod(_cain.ContourElementVector_iterator, None, ContourElementVector)
ContourElementVector.__nonzero__ = new_instancemethod(_cain.ContourElementVector___nonzero__, None, ContourElementVector)
ContourElementVector.__bool__ = new_instancemethod(_cain.ContourElementVector___bool__, None, ContourElementVector)
ContourElementVector.__len__ = new_instancemethod(_cain.ContourElementVector___len__, None, ContourElementVector)
ContourElementVector.__getslice__ = new_instancemethod(_cain.ContourElementVector___getslice__, None, ContourElementVector)
ContourElementVector.__setslice__ = new_instancemethod(_cain.ContourElementVector___setslice__, None, ContourElementVector)
ContourElementVector.__delslice__ = new_instancemethod(_cain.ContourElementVector___delslice__, None, ContourElementVector)
ContourElementVector.__delitem__ = new_instancemethod(_cain.ContourElementVector___delitem__, None, ContourElementVector)
ContourElementVector.__getitem__ = new_instancemethod(_cain.ContourElementVector___getitem__, None, ContourElementVector)
ContourElementVector.__setitem__ = new_instancemethod(_cain.ContourElementVector___setitem__, None, ContourElementVector)
ContourElementVector.pop = new_instancemethod(_cain.ContourElementVector_pop, None, ContourElementVector)
ContourElementVector.append = new_instancemethod(_cain.ContourElementVector_append, None, ContourElementVector)
ContourElementVector.empty = new_instancemethod(_cain.ContourElementVector_empty, None, ContourElementVector)
ContourElementVector.size = new_instancemethod(_cain.ContourElementVector_size, None, ContourElementVector)
ContourElementVector.swap = new_instancemethod(_cain.ContourElementVector_swap, None, ContourElementVector)
ContourElementVector.begin = new_instancemethod(_cain.ContourElementVector_begin, None, ContourElementVector)
ContourElementVector.end = new_instancemethod(_cain.ContourElementVector_end, None, ContourElementVector)
ContourElementVector.rbegin = new_instancemethod(_cain.ContourElementVector_rbegin, None, ContourElementVector)
ContourElementVector.rend = new_instancemethod(_cain.ContourElementVector_rend, None, ContourElementVector)
ContourElementVector.clear = new_instancemethod(_cain.ContourElementVector_clear, None, ContourElementVector)
ContourElementVector.get_allocator = new_instancemethod(_cain.ContourElementVector_get_allocator, None, ContourElementVector)
ContourElementVector.pop_back = new_instancemethod(_cain.ContourElementVector_pop_back, None, ContourElementVector)
ContourElementVector.erase = new_instancemethod(_cain.ContourElementVector_erase, None, ContourElementVector)
ContourElementVector.push_back = new_instancemethod(_cain.ContourElementVector_push_back, None, ContourElementVector)
ContourElementVector.front = new_instancemethod(_cain.ContourElementVector_front, None, ContourElementVector)
ContourElementVector.back = new_instancemethod(_cain.ContourElementVector_back, None, ContourElementVector)
ContourElementVector.assign = new_instancemethod(_cain.ContourElementVector_assign, None, ContourElementVector)
ContourElementVector.resize = new_instancemethod(_cain.ContourElementVector_resize, None, ContourElementVector)
ContourElementVector.insert = new_instancemethod(_cain.ContourElementVector_insert, None, ContourElementVector)
ContourElementVector.reserve = new_instancemethod(_cain.ContourElementVector_reserve, None, ContourElementVector)
ContourElementVector.capacity = new_instancemethod(_cain.ContourElementVector_capacity, None, ContourElementVector)
ContourElementVector_swigregister = _cain.ContourElementVector_swigregister
ContourElementVector_swigregister(ContourElementVector)

class Element(CommonElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Label_Regular = _cain.Element_Label_Regular
    Label_Absorbing = _cain.Element_Label_Absorbing
    Label_FreeSurface = _cain.Element_Label_FreeSurface
    Label_Periodic = _cain.Element_Label_Periodic
    Label_Extradomain = _cain.Element_Label_Extradomain
    Label_BndCondition = _cain.Element_Label_BndCondition
    connectivity = _swig_property(_cain.Element_connectivity_get, _cain.Element_connectivity_set)
    zone = _swig_property(_cain.Element_zone_get, _cain.Element_zone_set)
    neighbor = _swig_property(_cain.Element_neighbor_get, _cain.Element_neighbor_set)
    neighborside = _swig_property(_cain.Element_neighborside_get, _cain.Element_neighborside_set)
    neighbortype = _swig_property(_cain.Element_neighbortype_get, _cain.Element_neighbortype_set)
    neighbornode = _swig_property(_cain.Element_neighbornode_get, _cain.Element_neighbornode_set)
    volume = _swig_property(_cain.Element_volume_get, _cain.Element_volume_set)
    barycenter = _swig_property(_cain.Element_barycenter_get, _cain.Element_barycenter_set)
    edgelength = _swig_property(_cain.Element_edgelength_get, _cain.Element_edgelength_set)
    edgenormal = _swig_property(_cain.Element_edgenormal_get, _cain.Element_edgenormal_set)
    inradius = _swig_property(_cain.Element_inradius_get, _cain.Element_inradius_set)
    LabelMap = _swig_property(_cain.Element_LabelMap_get, _cain.Element_LabelMap_set)
    __swig_destroy__ = _cain.delete_Element

    def __init__(self):
        if self.__class__ == Element:
            _self = None
        else:
            _self = self
        _cain.Element_swiginit(self, _cain.new_Element(_self, ))
    def __disown__(self):
        self.this.disown()
        _cain.disown_Element(self)
        return weakref_proxy(self)
Element.nnodes = new_instancemethod(_cain.Element_nnodes, None, Element)
Element.nsides = new_instancemethod(_cain.Element_nsides, None, Element)
Element.clone = new_instancemethod(_cain.Element_clone, None, Element)
Element.is_regular = new_instancemethod(_cain.Element_is_regular, None, Element)
Element.point_inside = new_instancemethod(_cain.Element_point_inside, None, Element)
Element.point_inworld = new_instancemethod(_cain.Element_point_inworld, None, Element)
Element.calculate_metrics = new_instancemethod(_cain.Element_calculate_metrics, None, Element)
Element.sideconversion_fromgambit = new_instancemethod(_cain.Element_sideconversion_fromgambit, None, Element)
Element.get_nodesperside = new_instancemethod(_cain.Element_get_nodesperside, None, Element)
Element.get_gradient = new_instancemethod(_cain.Element_get_gradient, None, Element)
Element.get_orientation = new_instancemethod(_cain.Element_get_orientation, None, Element)
Element_swigregister = _cain.Element_swigregister
Element_swigregister(Element)

class Mesh(CommonMesh):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ndim = _swig_property(_cain.Mesh_ndim_get, _cain.Mesh_ndim_set)
    dom = _swig_property(_cain.Mesh_dom_get, _cain.Mesh_dom_set)
    vicinity = _swig_property(_cain.Mesh_vicinity_get, _cain.Mesh_vicinity_set)
    world_spots = _swig_property(_cain.Mesh_world_spots_get, _cain.Mesh_world_spots_set)
    mesh_spots = _swig_property(_cain.Mesh_mesh_spots_get, _cain.Mesh_mesh_spots_set)

    def __init__(self):
        if self.__class__ == Mesh:
            _self = None
        else:
            _self = self
        _cain.Mesh_swiginit(self, _cain.new_Mesh(_self, ))
    __swig_destroy__ = _cain.delete_Mesh
    def __disown__(self):
        self.this.disown()
        _cain.disown_Mesh(self)
        return weakref_proxy(self)
Mesh.config = new_instancemethod(_cain.Mesh_config, None, Mesh)
Mesh.configure = new_instancemethod(_cain.Mesh_configure, None, Mesh)
Mesh.lighten = new_instancemethod(_cain.Mesh_lighten, None, Mesh)
Mesh.load = new_instancemethod(_cain.Mesh_load, None, Mesh)
Mesh.decompose = new_instancemethod(_cain.Mesh_decompose, None, Mesh)
Mesh.get_localmesh = new_instancemethod(_cain.Mesh_get_localmesh, None, Mesh)
Mesh.get_numofdomains = new_instancemethod(_cain.Mesh_get_numofdomains, None, Mesh)
Mesh.is_global = new_instancemethod(_cain.Mesh_is_global, None, Mesh)
Mesh.get_globalmesh = new_instancemethod(_cain.Mesh_get_globalmesh, None, Mesh)
Mesh.get_vicinity = new_instancemethod(_cain.Mesh_get_vicinity, None, Mesh)
Mesh.get_vicinities = new_instancemethod(_cain.Mesh_get_vicinities, None, Mesh)
Mesh.mesh2world = new_instancemethod(_cain.Mesh_mesh2world, None, Mesh)
Mesh.get_spots = new_instancemethod(_cain.Mesh_get_spots, None, Mesh)
Mesh.world2mesh = new_instancemethod(_cain.Mesh_world2mesh, None, Mesh)
Mesh_swigregister = _cain.Mesh_swigregister
Mesh_swigregister(Mesh)

class Dexter(CommonDexter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    domnumber = _swig_property(_cain.Dexter_domnumber_get, _cain.Dexter_domnumber_set)
    vicinities = _swig_property(_cain.Dexter_vicinities_get, _cain.Dexter_vicinities_set)

    def __init__(self):
        if self.__class__ == Dexter:
            _self = None
        else:
            _self = self
        _cain.Dexter_swiginit(self, _cain.new_Dexter(_self, ))
    __swig_destroy__ = _cain.delete_Dexter
    def __disown__(self):
        self.this.disown()
        _cain.disown_Dexter(self)
        return weakref_proxy(self)
Dexter.config = new_instancemethod(_cain.Dexter_config, None, Dexter)
Dexter.configure = new_instancemethod(_cain.Dexter_configure, None, Dexter)
Dexter.get_numofdomains = new_instancemethod(_cain.Dexter_get_numofdomains, None, Dexter)
Dexter.get_vicinities = new_instancemethod(_cain.Dexter_get_vicinities, None, Dexter)
Dexter.decompose = new_instancemethod(_cain.Dexter_decompose, None, Dexter)
Dexter.get_localmesh = new_instancemethod(_cain.Dexter_get_localmesh, None, Dexter)
Dexter_swigregister = _cain.Dexter_swigregister
Dexter_swigregister(Dexter)

class ContourElement(CommonContourElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    elem = _swig_property(_cain.ContourElement_elem_get, _cain.ContourElement_elem_set)
    side = _swig_property(_cain.ContourElement_side_get, _cain.ContourElement_side_set)

    def __init__(self, elem, side):
        if self.__class__ == ContourElement:
            _self = None
        else:
            _self = self
        _cain.ContourElement_swiginit(self, _cain.new_ContourElement(_self, elem, side))
    __swig_destroy__ = _cain.delete_ContourElement
    def __disown__(self):
        self.this.disown()
        _cain.disown_ContourElement(self)
        return weakref_proxy(self)
ContourElement_swigregister = _cain.ContourElement_swigregister
ContourElement_swigregister(ContourElement)

class LabelVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _cain.LabelVector_swiginit(self, _cain.new_LabelVector(*args))
    __swig_destroy__ = _cain.delete_LabelVector
LabelVector.iterator = new_instancemethod(_cain.LabelVector_iterator, None, LabelVector)
LabelVector.__nonzero__ = new_instancemethod(_cain.LabelVector___nonzero__, None, LabelVector)
LabelVector.__bool__ = new_instancemethod(_cain.LabelVector___bool__, None, LabelVector)
LabelVector.__len__ = new_instancemethod(_cain.LabelVector___len__, None, LabelVector)
LabelVector.__getslice__ = new_instancemethod(_cain.LabelVector___getslice__, None, LabelVector)
LabelVector.__setslice__ = new_instancemethod(_cain.LabelVector___setslice__, None, LabelVector)
LabelVector.__delslice__ = new_instancemethod(_cain.LabelVector___delslice__, None, LabelVector)
LabelVector.__delitem__ = new_instancemethod(_cain.LabelVector___delitem__, None, LabelVector)
LabelVector.__getitem__ = new_instancemethod(_cain.LabelVector___getitem__, None, LabelVector)
LabelVector.__setitem__ = new_instancemethod(_cain.LabelVector___setitem__, None, LabelVector)
LabelVector.pop = new_instancemethod(_cain.LabelVector_pop, None, LabelVector)
LabelVector.append = new_instancemethod(_cain.LabelVector_append, None, LabelVector)
LabelVector.empty = new_instancemethod(_cain.LabelVector_empty, None, LabelVector)
LabelVector.size = new_instancemethod(_cain.LabelVector_size, None, LabelVector)
LabelVector.swap = new_instancemethod(_cain.LabelVector_swap, None, LabelVector)
LabelVector.begin = new_instancemethod(_cain.LabelVector_begin, None, LabelVector)
LabelVector.end = new_instancemethod(_cain.LabelVector_end, None, LabelVector)
LabelVector.rbegin = new_instancemethod(_cain.LabelVector_rbegin, None, LabelVector)
LabelVector.rend = new_instancemethod(_cain.LabelVector_rend, None, LabelVector)
LabelVector.clear = new_instancemethod(_cain.LabelVector_clear, None, LabelVector)
LabelVector.get_allocator = new_instancemethod(_cain.LabelVector_get_allocator, None, LabelVector)
LabelVector.pop_back = new_instancemethod(_cain.LabelVector_pop_back, None, LabelVector)
LabelVector.erase = new_instancemethod(_cain.LabelVector_erase, None, LabelVector)
LabelVector.push_back = new_instancemethod(_cain.LabelVector_push_back, None, LabelVector)
LabelVector.front = new_instancemethod(_cain.LabelVector_front, None, LabelVector)
LabelVector.back = new_instancemethod(_cain.LabelVector_back, None, LabelVector)
LabelVector.assign = new_instancemethod(_cain.LabelVector_assign, None, LabelVector)
LabelVector.resize = new_instancemethod(_cain.LabelVector_resize, None, LabelVector)
LabelVector.insert = new_instancemethod(_cain.LabelVector_insert, None, LabelVector)
LabelVector.reserve = new_instancemethod(_cain.LabelVector_reserve, None, LabelVector)
LabelVector.capacity = new_instancemethod(_cain.LabelVector_capacity, None, LabelVector)
LabelVector_swigregister = _cain.LabelVector_swigregister
LabelVector_swigregister(LabelVector)

class FloatVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _cain.FloatVector_swiginit(self, _cain.new_FloatVector(*args))
    __swig_destroy__ = _cain.delete_FloatVector
FloatVector.iterator = new_instancemethod(_cain.FloatVector_iterator, None, FloatVector)
FloatVector.__nonzero__ = new_instancemethod(_cain.FloatVector___nonzero__, None, FloatVector)
FloatVector.__bool__ = new_instancemethod(_cain.FloatVector___bool__, None, FloatVector)
FloatVector.__len__ = new_instancemethod(_cain.FloatVector___len__, None, FloatVector)
FloatVector.__getslice__ = new_instancemethod(_cain.FloatVector___getslice__, None, FloatVector)
FloatVector.__setslice__ = new_instancemethod(_cain.FloatVector___setslice__, None, FloatVector)
FloatVector.__delslice__ = new_instancemethod(_cain.FloatVector___delslice__, None, FloatVector)
FloatVector.__delitem__ = new_instancemethod(_cain.FloatVector___delitem__, None, FloatVector)
FloatVector.__getitem__ = new_instancemethod(_cain.FloatVector___getitem__, None, FloatVector)
FloatVector.__setitem__ = new_instancemethod(_cain.FloatVector___setitem__, None, FloatVector)
FloatVector.pop = new_instancemethod(_cain.FloatVector_pop, None, FloatVector)
FloatVector.append = new_instancemethod(_cain.FloatVector_append, None, FloatVector)
FloatVector.empty = new_instancemethod(_cain.FloatVector_empty, None, FloatVector)
FloatVector.size = new_instancemethod(_cain.FloatVector_size, None, FloatVector)
FloatVector.swap = new_instancemethod(_cain.FloatVector_swap, None, FloatVector)
FloatVector.begin = new_instancemethod(_cain.FloatVector_begin, None, FloatVector)
FloatVector.end = new_instancemethod(_cain.FloatVector_end, None, FloatVector)
FloatVector.rbegin = new_instancemethod(_cain.FloatVector_rbegin, None, FloatVector)
FloatVector.rend = new_instancemethod(_cain.FloatVector_rend, None, FloatVector)
FloatVector.clear = new_instancemethod(_cain.FloatVector_clear, None, FloatVector)
FloatVector.get_allocator = new_instancemethod(_cain.FloatVector_get_allocator, None, FloatVector)
FloatVector.pop_back = new_instancemethod(_cain.FloatVector_pop_back, None, FloatVector)
FloatVector.erase = new_instancemethod(_cain.FloatVector_erase, None, FloatVector)
FloatVector.push_back = new_instancemethod(_cain.FloatVector_push_back, None, FloatVector)
FloatVector.front = new_instancemethod(_cain.FloatVector_front, None, FloatVector)
FloatVector.back = new_instancemethod(_cain.FloatVector_back, None, FloatVector)
FloatVector.assign = new_instancemethod(_cain.FloatVector_assign, None, FloatVector)
FloatVector.resize = new_instancemethod(_cain.FloatVector_resize, None, FloatVector)
FloatVector.insert = new_instancemethod(_cain.FloatVector_insert, None, FloatVector)
FloatVector.reserve = new_instancemethod(_cain.FloatVector_reserve, None, FloatVector)
FloatVector.capacity = new_instancemethod(_cain.FloatVector_capacity, None, FloatVector)
FloatVector_swigregister = _cain.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class CommoncPoint1D(Point):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommoncPoint1D:
            _self = None
        else:
            _self = self
        _cain.CommoncPoint1D_swiginit(self, _cain.new_CommoncPoint1D(_self, ))
    __swig_destroy__ = _cain.delete_CommoncPoint1D
    get_shared = staticmethod(_cain.CommoncPoint1D_get_shared)
    type = _swig_property(_cain.CommoncPoint1D_type_get, _cain.CommoncPoint1D_type_set)
    unwrap = staticmethod(_cain.CommoncPoint1D_unwrap)
    dereference = staticmethod(_cain.CommoncPoint1D_dereference)
    get = staticmethod(_cain.CommoncPoint1D_get)
    name = _swig_property(_cain.CommoncPoint1D_name_get, _cain.CommoncPoint1D_name_set)
    gen_scheme = staticmethod(_cain.CommoncPoint1D_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommoncPoint1D(self)
        return weakref_proxy(self)
CommoncPoint1D.get_classname = new_instancemethod(_cain.CommoncPoint1D_get_classname, None, CommoncPoint1D)
CommoncPoint1D.get_metadata_path = new_instancemethod(_cain.CommoncPoint1D_get_metadata_path, None, CommoncPoint1D)
CommoncPoint1D.shared_from_this = new_instancemethod(_cain.CommoncPoint1D_shared_from_this, None, CommoncPoint1D)
CommoncPoint1D.get_uuid = new_instancemethod(_cain.CommoncPoint1D_get_uuid, None, CommoncPoint1D)
CommoncPoint1D.get_scheme = new_instancemethod(_cain.CommoncPoint1D_get_scheme, None, CommoncPoint1D)
CommoncPoint1D_swigregister = _cain.CommoncPoint1D_swigregister
CommoncPoint1D_swigregister(CommoncPoint1D)

def CommoncPoint1D_get_shared(i):
    return _cain.CommoncPoint1D_get_shared(i)
CommoncPoint1D_get_shared = _cain.CommoncPoint1D_get_shared

def CommoncPoint1D_unwrap(ptr):
    return _cain.CommoncPoint1D_unwrap(ptr)
CommoncPoint1D_unwrap = _cain.CommoncPoint1D_unwrap

def CommoncPoint1D_dereference(sptr):
    return _cain.CommoncPoint1D_dereference(sptr)
CommoncPoint1D_dereference = _cain.CommoncPoint1D_dereference

def CommoncPoint1D_get(*args):
    return _cain.CommoncPoint1D_get(*args)
CommoncPoint1D_get = _cain.CommoncPoint1D_get

def CommoncPoint1D_gen_scheme(sfile):
    return _cain.CommoncPoint1D_gen_scheme(sfile)
CommoncPoint1D_gen_scheme = _cain.CommoncPoint1D_gen_scheme

class CommontPoint1D(Point):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommontPoint1D:
            _self = None
        else:
            _self = self
        _cain.CommontPoint1D_swiginit(self, _cain.new_CommontPoint1D(_self, ))
    __swig_destroy__ = _cain.delete_CommontPoint1D
    get_shared = staticmethod(_cain.CommontPoint1D_get_shared)
    type = _swig_property(_cain.CommontPoint1D_type_get, _cain.CommontPoint1D_type_set)
    unwrap = staticmethod(_cain.CommontPoint1D_unwrap)
    dereference = staticmethod(_cain.CommontPoint1D_dereference)
    get = staticmethod(_cain.CommontPoint1D_get)
    name = _swig_property(_cain.CommontPoint1D_name_get, _cain.CommontPoint1D_name_set)
    gen_scheme = staticmethod(_cain.CommontPoint1D_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommontPoint1D(self)
        return weakref_proxy(self)
CommontPoint1D.get_classname = new_instancemethod(_cain.CommontPoint1D_get_classname, None, CommontPoint1D)
CommontPoint1D.get_metadata_path = new_instancemethod(_cain.CommontPoint1D_get_metadata_path, None, CommontPoint1D)
CommontPoint1D.shared_from_this = new_instancemethod(_cain.CommontPoint1D_shared_from_this, None, CommontPoint1D)
CommontPoint1D.get_uuid = new_instancemethod(_cain.CommontPoint1D_get_uuid, None, CommontPoint1D)
CommontPoint1D.get_scheme = new_instancemethod(_cain.CommontPoint1D_get_scheme, None, CommontPoint1D)
CommontPoint1D_swigregister = _cain.CommontPoint1D_swigregister
CommontPoint1D_swigregister(CommontPoint1D)

def CommontPoint1D_get_shared(i):
    return _cain.CommontPoint1D_get_shared(i)
CommontPoint1D_get_shared = _cain.CommontPoint1D_get_shared

def CommontPoint1D_unwrap(ptr):
    return _cain.CommontPoint1D_unwrap(ptr)
CommontPoint1D_unwrap = _cain.CommontPoint1D_unwrap

def CommontPoint1D_dereference(sptr):
    return _cain.CommontPoint1D_dereference(sptr)
CommontPoint1D_dereference = _cain.CommontPoint1D_dereference

def CommontPoint1D_get(*args):
    return _cain.CommontPoint1D_get(*args)
CommontPoint1D_get = _cain.CommontPoint1D_get

def CommontPoint1D_gen_scheme(sfile):
    return _cain.CommontPoint1D_gen_scheme(sfile)
CommontPoint1D_gen_scheme = _cain.CommontPoint1D_gen_scheme

class CommonStructuredMesh(Mesh):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonStructuredMesh:
            _self = None
        else:
            _self = self
        _cain.CommonStructuredMesh_swiginit(self, _cain.new_CommonStructuredMesh(_self, ))
    __swig_destroy__ = _cain.delete_CommonStructuredMesh
    get_shared = staticmethod(_cain.CommonStructuredMesh_get_shared)
    type = _swig_property(_cain.CommonStructuredMesh_type_get, _cain.CommonStructuredMesh_type_set)
    unwrap = staticmethod(_cain.CommonStructuredMesh_unwrap)
    dereference = staticmethod(_cain.CommonStructuredMesh_dereference)
    get = staticmethod(_cain.CommonStructuredMesh_get)
    name = _swig_property(_cain.CommonStructuredMesh_name_get, _cain.CommonStructuredMesh_name_set)
    gen_scheme = staticmethod(_cain.CommonStructuredMesh_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonStructuredMesh(self)
        return weakref_proxy(self)
CommonStructuredMesh.get_classname = new_instancemethod(_cain.CommonStructuredMesh_get_classname, None, CommonStructuredMesh)
CommonStructuredMesh.get_metadata_path = new_instancemethod(_cain.CommonStructuredMesh_get_metadata_path, None, CommonStructuredMesh)
CommonStructuredMesh.shared_from_this = new_instancemethod(_cain.CommonStructuredMesh_shared_from_this, None, CommonStructuredMesh)
CommonStructuredMesh.get_uuid = new_instancemethod(_cain.CommonStructuredMesh_get_uuid, None, CommonStructuredMesh)
CommonStructuredMesh.get_scheme = new_instancemethod(_cain.CommonStructuredMesh_get_scheme, None, CommonStructuredMesh)
CommonStructuredMesh_swigregister = _cain.CommonStructuredMesh_swigregister
CommonStructuredMesh_swigregister(CommonStructuredMesh)

def CommonStructuredMesh_get_shared(i):
    return _cain.CommonStructuredMesh_get_shared(i)
CommonStructuredMesh_get_shared = _cain.CommonStructuredMesh_get_shared

def CommonStructuredMesh_unwrap(ptr):
    return _cain.CommonStructuredMesh_unwrap(ptr)
CommonStructuredMesh_unwrap = _cain.CommonStructuredMesh_unwrap

def CommonStructuredMesh_dereference(sptr):
    return _cain.CommonStructuredMesh_dereference(sptr)
CommonStructuredMesh_dereference = _cain.CommonStructuredMesh_dereference

def CommonStructuredMesh_get(*args):
    return _cain.CommonStructuredMesh_get(*args)
CommonStructuredMesh_get = _cain.CommonStructuredMesh_get

def CommonStructuredMesh_gen_scheme(sfile):
    return _cain.CommonStructuredMesh_gen_scheme(sfile)
CommonStructuredMesh_gen_scheme = _cain.CommonStructuredMesh_gen_scheme

class CommonUnstructuredMesh(Mesh):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonUnstructuredMesh:
            _self = None
        else:
            _self = self
        _cain.CommonUnstructuredMesh_swiginit(self, _cain.new_CommonUnstructuredMesh(_self, ))
    __swig_destroy__ = _cain.delete_CommonUnstructuredMesh
    get_shared = staticmethod(_cain.CommonUnstructuredMesh_get_shared)
    type = _swig_property(_cain.CommonUnstructuredMesh_type_get, _cain.CommonUnstructuredMesh_type_set)
    unwrap = staticmethod(_cain.CommonUnstructuredMesh_unwrap)
    dereference = staticmethod(_cain.CommonUnstructuredMesh_dereference)
    get = staticmethod(_cain.CommonUnstructuredMesh_get)
    name = _swig_property(_cain.CommonUnstructuredMesh_name_get, _cain.CommonUnstructuredMesh_name_set)
    gen_scheme = staticmethod(_cain.CommonUnstructuredMesh_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonUnstructuredMesh(self)
        return weakref_proxy(self)
CommonUnstructuredMesh.get_classname = new_instancemethod(_cain.CommonUnstructuredMesh_get_classname, None, CommonUnstructuredMesh)
CommonUnstructuredMesh.get_metadata_path = new_instancemethod(_cain.CommonUnstructuredMesh_get_metadata_path, None, CommonUnstructuredMesh)
CommonUnstructuredMesh.shared_from_this = new_instancemethod(_cain.CommonUnstructuredMesh_shared_from_this, None, CommonUnstructuredMesh)
CommonUnstructuredMesh.get_uuid = new_instancemethod(_cain.CommonUnstructuredMesh_get_uuid, None, CommonUnstructuredMesh)
CommonUnstructuredMesh.get_scheme = new_instancemethod(_cain.CommonUnstructuredMesh_get_scheme, None, CommonUnstructuredMesh)
CommonUnstructuredMesh_swigregister = _cain.CommonUnstructuredMesh_swigregister
CommonUnstructuredMesh_swigregister(CommonUnstructuredMesh)

def CommonUnstructuredMesh_get_shared(i):
    return _cain.CommonUnstructuredMesh_get_shared(i)
CommonUnstructuredMesh_get_shared = _cain.CommonUnstructuredMesh_get_shared

def CommonUnstructuredMesh_unwrap(ptr):
    return _cain.CommonUnstructuredMesh_unwrap(ptr)
CommonUnstructuredMesh_unwrap = _cain.CommonUnstructuredMesh_unwrap

def CommonUnstructuredMesh_dereference(sptr):
    return _cain.CommonUnstructuredMesh_dereference(sptr)
CommonUnstructuredMesh_dereference = _cain.CommonUnstructuredMesh_dereference

def CommonUnstructuredMesh_get(*args):
    return _cain.CommonUnstructuredMesh_get(*args)
CommonUnstructuredMesh_get = _cain.CommonUnstructuredMesh_get

def CommonUnstructuredMesh_gen_scheme(sfile):
    return _cain.CommonUnstructuredMesh_gen_scheme(sfile)
CommonUnstructuredMesh_gen_scheme = _cain.CommonUnstructuredMesh_gen_scheme

class CommonUnstructuredDexter(Dexter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonUnstructuredDexter:
            _self = None
        else:
            _self = self
        _cain.CommonUnstructuredDexter_swiginit(self, _cain.new_CommonUnstructuredDexter(_self, ))
    __swig_destroy__ = _cain.delete_CommonUnstructuredDexter
    get_shared = staticmethod(_cain.CommonUnstructuredDexter_get_shared)
    type = _swig_property(_cain.CommonUnstructuredDexter_type_get, _cain.CommonUnstructuredDexter_type_set)
    unwrap = staticmethod(_cain.CommonUnstructuredDexter_unwrap)
    dereference = staticmethod(_cain.CommonUnstructuredDexter_dereference)
    get = staticmethod(_cain.CommonUnstructuredDexter_get)
    name = _swig_property(_cain.CommonUnstructuredDexter_name_get, _cain.CommonUnstructuredDexter_name_set)
    gen_scheme = staticmethod(_cain.CommonUnstructuredDexter_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonUnstructuredDexter(self)
        return weakref_proxy(self)
CommonUnstructuredDexter.get_classname = new_instancemethod(_cain.CommonUnstructuredDexter_get_classname, None, CommonUnstructuredDexter)
CommonUnstructuredDexter.get_metadata_path = new_instancemethod(_cain.CommonUnstructuredDexter_get_metadata_path, None, CommonUnstructuredDexter)
CommonUnstructuredDexter.shared_from_this = new_instancemethod(_cain.CommonUnstructuredDexter_shared_from_this, None, CommonUnstructuredDexter)
CommonUnstructuredDexter.get_uuid = new_instancemethod(_cain.CommonUnstructuredDexter_get_uuid, None, CommonUnstructuredDexter)
CommonUnstructuredDexter.get_scheme = new_instancemethod(_cain.CommonUnstructuredDexter_get_scheme, None, CommonUnstructuredDexter)
CommonUnstructuredDexter_swigregister = _cain.CommonUnstructuredDexter_swigregister
CommonUnstructuredDexter_swigregister(CommonUnstructuredDexter)

def CommonUnstructuredDexter_get_shared(i):
    return _cain.CommonUnstructuredDexter_get_shared(i)
CommonUnstructuredDexter_get_shared = _cain.CommonUnstructuredDexter_get_shared

def CommonUnstructuredDexter_unwrap(ptr):
    return _cain.CommonUnstructuredDexter_unwrap(ptr)
CommonUnstructuredDexter_unwrap = _cain.CommonUnstructuredDexter_unwrap

def CommonUnstructuredDexter_dereference(sptr):
    return _cain.CommonUnstructuredDexter_dereference(sptr)
CommonUnstructuredDexter_dereference = _cain.CommonUnstructuredDexter_dereference

def CommonUnstructuredDexter_get(*args):
    return _cain.CommonUnstructuredDexter_get(*args)
CommonUnstructuredDexter_get = _cain.CommonUnstructuredDexter_get

def CommonUnstructuredDexter_gen_scheme(sfile):
    return _cain.CommonUnstructuredDexter_gen_scheme(sfile)
CommonUnstructuredDexter_gen_scheme = _cain.CommonUnstructuredDexter_gen_scheme

class tPoint1D(CommontPoint1D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    e = _swig_property(_cain.tPoint1D_e_get, _cain.tPoint1D_e_set)
    xi = _swig_property(_cain.tPoint1D_xi_get, _cain.tPoint1D_xi_set)

    def __init__(self, *args):
        if self.__class__ == tPoint1D:
            _self = None
        else:
            _self = self
        _cain.tPoint1D_swiginit(self, _cain.new_tPoint1D(_self, *args))
    __swig_destroy__ = _cain.delete_tPoint1D
    def __disown__(self):
        self.this.disown()
        _cain.disown_tPoint1D(self)
        return weakref_proxy(self)
tPoint1D.clone = new_instancemethod(_cain.tPoint1D_clone, None, tPoint1D)
tPoint1D_swigregister = _cain.tPoint1D_swigregister
tPoint1D_swigregister(tPoint1D)

class cPoint1D(CommoncPoint1D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _swig_property(_cain.cPoint1D_x_get, _cain.cPoint1D_x_set)

    def __init__(self, *args):
        if self.__class__ == cPoint1D:
            _self = None
        else:
            _self = self
        _cain.cPoint1D_swiginit(self, _cain.new_cPoint1D(_self, *args))
    __swig_destroy__ = _cain.delete_cPoint1D
    def __disown__(self):
        self.this.disown()
        _cain.disown_cPoint1D(self)
        return weakref_proxy(self)
cPoint1D.clone = new_instancemethod(_cain.cPoint1D_clone, None, cPoint1D)
cPoint1D_swigregister = _cain.cPoint1D_swigregister
cPoint1D_swigregister(cPoint1D)

class StructuredMesh(CommonStructuredMesh):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == StructuredMesh:
            _self = None
        else:
            _self = self
        _cain.StructuredMesh_swiginit(self, _cain.new_StructuredMesh(_self, ))
    __swig_destroy__ = _cain.delete_StructuredMesh
    create = staticmethod(_cain.StructuredMesh_create)
    def __disown__(self):
        self.this.disown()
        _cain.disown_StructuredMesh(self)
        return weakref_proxy(self)
StructuredMesh.config = new_instancemethod(_cain.StructuredMesh_config, None, StructuredMesh)
StructuredMesh.lighten = new_instancemethod(_cain.StructuredMesh_lighten, None, StructuredMesh)
StructuredMesh.load = new_instancemethod(_cain.StructuredMesh_load, None, StructuredMesh)
StructuredMesh.world2mesh = new_instancemethod(_cain.StructuredMesh_world2mesh, None, StructuredMesh)
StructuredMesh.mesh2world = new_instancemethod(_cain.StructuredMesh_mesh2world, None, StructuredMesh)
StructuredMesh_swigregister = _cain.StructuredMesh_swigregister
StructuredMesh_swigregister(StructuredMesh)

def StructuredMesh_create():
    return _cain.StructuredMesh_create()
StructuredMesh_create = _cain.StructuredMesh_create

class intRange(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ini = _swig_property(_cain.intRange_ini_get, _cain.intRange_ini_set)
    end = _swig_property(_cain.intRange_end_get, _cain.intRange_end_set)

    def __init__(self):
        _cain.intRange_swiginit(self, _cain.new_intRange())
    __swig_destroy__ = _cain.delete_intRange
intRange_swigregister = _cain.intRange_swigregister
intRange_swigregister(intRange)

class contourElem(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    elem = _swig_property(_cain.contourElem_elem_get, _cain.contourElem_elem_set)
    side = _swig_property(_cain.contourElem_side_get, _cain.contourElem_side_set)

    def __init__(self):
        _cain.contourElem_swiginit(self, _cain.new_contourElem())
    __swig_destroy__ = _cain.delete_contourElem
contourElem_swigregister = _cain.contourElem_swigregister
contourElem_swigregister(contourElem)

class UnstructuredMesh(CommonUnstructuredMesh):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    type = _swig_property(_cain.UnstructuredMesh_type_get, _cain.UnstructuredMesh_type_set)
    nnodes = _swig_property(_cain.UnstructuredMesh_nnodes_get, _cain.UnstructuredMesh_nnodes_set)
    nelems = _swig_property(_cain.UnstructuredMesh_nelems_get, _cain.UnstructuredMesh_nelems_set)
    nzones = _swig_property(_cain.UnstructuredMesh_nzones_get, _cain.UnstructuredMesh_nzones_set)
    nboundaries = _swig_property(_cain.UnstructuredMesh_nboundaries_get, _cain.UnstructuredMesh_nboundaries_set)
    nsides = _swig_property(_cain.UnstructuredMesh_nsides_get, _cain.UnstructuredMesh_nsides_set)
    ennodes = _swig_property(_cain.UnstructuredMesh_ennodes_get, _cain.UnstructuredMesh_ennodes_set)
    zonemaxelems = _swig_property(_cain.UnstructuredMesh_zonemaxelems_get, _cain.UnstructuredMesh_zonemaxelems_set)
    periodic = _swig_property(_cain.UnstructuredMesh_periodic_get, _cain.UnstructuredMesh_periodic_set)
    elements = _swig_property(_cain.UnstructuredMesh_elements_get, _cain.UnstructuredMesh_elements_set)
    nodelems = _swig_property(_cain.UnstructuredMesh_nodelems_get, _cain.UnstructuredMesh_nodelems_set)
    nodes = _swig_property(_cain.UnstructuredMesh_nodes_get, _cain.UnstructuredMesh_nodes_set)
    minelemsize = _swig_property(_cain.UnstructuredMesh_minelemsize_get, _cain.UnstructuredMesh_minelemsize_set)
    regular = _swig_property(_cain.UnstructuredMesh_regular_get, _cain.UnstructuredMesh_regular_set)
    probnd = _swig_property(_cain.UnstructuredMesh_probnd_get, _cain.UnstructuredMesh_probnd_set)
    dombnd = _swig_property(_cain.UnstructuredMesh_dombnd_get, _cain.UnstructuredMesh_dombnd_set)
    domprobnd = _swig_property(_cain.UnstructuredMesh_domprobnd_get, _cain.UnstructuredMesh_domprobnd_set)
    elemids = _swig_property(_cain.UnstructuredMesh_elemids_get, _cain.UnstructuredMesh_elemids_set)
    numelemstoshare = _swig_property(_cain.UnstructuredMesh_numelemstoshare_get, _cain.UnstructuredMesh_numelemstoshare_set)
    elemstoshare = _swig_property(_cain.UnstructuredMesh_elemstoshare_get, _cain.UnstructuredMesh_elemstoshare_set)
    extranelems = _swig_property(_cain.UnstructuredMesh_extranelems_get, _cain.UnstructuredMesh_extranelems_set)
    extraelems = _swig_property(_cain.UnstructuredMesh_extraelems_get, _cain.UnstructuredMesh_extraelems_set)

    def __init__(self, *args):
        if self.__class__ == UnstructuredMesh:
            _self = None
        else:
            _self = self
        _cain.UnstructuredMesh_swiginit(self, _cain.new_UnstructuredMesh(_self, *args))
    __swig_destroy__ = _cain.delete_UnstructuredMesh
    def __disown__(self):
        self.this.disown()
        _cain.disown_UnstructuredMesh(self)
        return weakref_proxy(self)
UnstructuredMesh.config = new_instancemethod(_cain.UnstructuredMesh_config, None, UnstructuredMesh)
UnstructuredMesh.lighten = new_instancemethod(_cain.UnstructuredMesh_lighten, None, UnstructuredMesh)
UnstructuredMesh.load = new_instancemethod(_cain.UnstructuredMesh_load, None, UnstructuredMesh)
UnstructuredMesh.mesh2world = new_instancemethod(_cain.UnstructuredMesh_mesh2world, None, UnstructuredMesh)
UnstructuredMesh.get_pointcoords = new_instancemethod(_cain.UnstructuredMesh_get_pointcoords, None, UnstructuredMesh)
UnstructuredMesh.get_numextraelements = new_instancemethod(_cain.UnstructuredMesh_get_numextraelements, None, UnstructuredMesh)
UnstructuredMesh.get_extraelements = new_instancemethod(_cain.UnstructuredMesh_get_extraelements, None, UnstructuredMesh)
UnstructuredMesh.get_contour = new_instancemethod(_cain.UnstructuredMesh_get_contour, None, UnstructuredMesh)
UnstructuredMesh.world2mesh = new_instancemethod(_cain.UnstructuredMesh_world2mesh, None, UnstructuredMesh)
UnstructuredMesh_swigregister = _cain.UnstructuredMesh_swigregister
UnstructuredMesh_swigregister(UnstructuredMesh)

class UnstructuredDexter(CommonUnstructuredDexter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == UnstructuredDexter:
            _self = None
        else:
            _self = self
        _cain.UnstructuredDexter_swiginit(self, _cain.new_UnstructuredDexter(_self, ))
    __swig_destroy__ = _cain.delete_UnstructuredDexter
    def __disown__(self):
        self.this.disown()
        _cain.disown_UnstructuredDexter(self)
        return weakref_proxy(self)
UnstructuredDexter.config = new_instancemethod(_cain.UnstructuredDexter_config, None, UnstructuredDexter)
UnstructuredDexter.decompose = new_instancemethod(_cain.UnstructuredDexter_decompose, None, UnstructuredDexter)
UnstructuredDexter.get_localmesh = new_instancemethod(_cain.UnstructuredDexter_get_localmesh, None, UnstructuredDexter)
UnstructuredDexter_swigregister = _cain.UnstructuredDexter_swigregister
UnstructuredDexter_swigregister(UnstructuredDexter)

class CommoncPoint2D(cPoint1D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommoncPoint2D:
            _self = None
        else:
            _self = self
        _cain.CommoncPoint2D_swiginit(self, _cain.new_CommoncPoint2D(_self, ))
    __swig_destroy__ = _cain.delete_CommoncPoint2D
    get_shared = staticmethod(_cain.CommoncPoint2D_get_shared)
    type = _swig_property(_cain.CommoncPoint2D_type_get, _cain.CommoncPoint2D_type_set)
    unwrap = staticmethod(_cain.CommoncPoint2D_unwrap)
    dereference = staticmethod(_cain.CommoncPoint2D_dereference)
    get = staticmethod(_cain.CommoncPoint2D_get)
    name = _swig_property(_cain.CommoncPoint2D_name_get, _cain.CommoncPoint2D_name_set)
    gen_scheme = staticmethod(_cain.CommoncPoint2D_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommoncPoint2D(self)
        return weakref_proxy(self)
CommoncPoint2D.get_classname = new_instancemethod(_cain.CommoncPoint2D_get_classname, None, CommoncPoint2D)
CommoncPoint2D.get_metadata_path = new_instancemethod(_cain.CommoncPoint2D_get_metadata_path, None, CommoncPoint2D)
CommoncPoint2D.shared_from_this = new_instancemethod(_cain.CommoncPoint2D_shared_from_this, None, CommoncPoint2D)
CommoncPoint2D.get_uuid = new_instancemethod(_cain.CommoncPoint2D_get_uuid, None, CommoncPoint2D)
CommoncPoint2D.get_scheme = new_instancemethod(_cain.CommoncPoint2D_get_scheme, None, CommoncPoint2D)
CommoncPoint2D_swigregister = _cain.CommoncPoint2D_swigregister
CommoncPoint2D_swigregister(CommoncPoint2D)

def CommoncPoint2D_get_shared(i):
    return _cain.CommoncPoint2D_get_shared(i)
CommoncPoint2D_get_shared = _cain.CommoncPoint2D_get_shared

def CommoncPoint2D_unwrap(ptr):
    return _cain.CommoncPoint2D_unwrap(ptr)
CommoncPoint2D_unwrap = _cain.CommoncPoint2D_unwrap

def CommoncPoint2D_dereference(sptr):
    return _cain.CommoncPoint2D_dereference(sptr)
CommoncPoint2D_dereference = _cain.CommoncPoint2D_dereference

def CommoncPoint2D_get(*args):
    return _cain.CommoncPoint2D_get(*args)
CommoncPoint2D_get = _cain.CommoncPoint2D_get

def CommoncPoint2D_gen_scheme(sfile):
    return _cain.CommoncPoint2D_gen_scheme(sfile)
CommoncPoint2D_gen_scheme = _cain.CommoncPoint2D_gen_scheme

class CommontPoint2D(tPoint1D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommontPoint2D:
            _self = None
        else:
            _self = self
        _cain.CommontPoint2D_swiginit(self, _cain.new_CommontPoint2D(_self, ))
    __swig_destroy__ = _cain.delete_CommontPoint2D
    get_shared = staticmethod(_cain.CommontPoint2D_get_shared)
    type = _swig_property(_cain.CommontPoint2D_type_get, _cain.CommontPoint2D_type_set)
    unwrap = staticmethod(_cain.CommontPoint2D_unwrap)
    dereference = staticmethod(_cain.CommontPoint2D_dereference)
    get = staticmethod(_cain.CommontPoint2D_get)
    name = _swig_property(_cain.CommontPoint2D_name_get, _cain.CommontPoint2D_name_set)
    gen_scheme = staticmethod(_cain.CommontPoint2D_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommontPoint2D(self)
        return weakref_proxy(self)
CommontPoint2D.get_classname = new_instancemethod(_cain.CommontPoint2D_get_classname, None, CommontPoint2D)
CommontPoint2D.get_metadata_path = new_instancemethod(_cain.CommontPoint2D_get_metadata_path, None, CommontPoint2D)
CommontPoint2D.shared_from_this = new_instancemethod(_cain.CommontPoint2D_shared_from_this, None, CommontPoint2D)
CommontPoint2D.get_uuid = new_instancemethod(_cain.CommontPoint2D_get_uuid, None, CommontPoint2D)
CommontPoint2D.get_scheme = new_instancemethod(_cain.CommontPoint2D_get_scheme, None, CommontPoint2D)
CommontPoint2D_swigregister = _cain.CommontPoint2D_swigregister
CommontPoint2D_swigregister(CommontPoint2D)

def CommontPoint2D_get_shared(i):
    return _cain.CommontPoint2D_get_shared(i)
CommontPoint2D_get_shared = _cain.CommontPoint2D_get_shared

def CommontPoint2D_unwrap(ptr):
    return _cain.CommontPoint2D_unwrap(ptr)
CommontPoint2D_unwrap = _cain.CommontPoint2D_unwrap

def CommontPoint2D_dereference(sptr):
    return _cain.CommontPoint2D_dereference(sptr)
CommontPoint2D_dereference = _cain.CommontPoint2D_dereference

def CommontPoint2D_get(*args):
    return _cain.CommontPoint2D_get(*args)
CommontPoint2D_get = _cain.CommontPoint2D_get

def CommontPoint2D_gen_scheme(sfile):
    return _cain.CommontPoint2D_gen_scheme(sfile)
CommontPoint2D_gen_scheme = _cain.CommontPoint2D_gen_scheme

class tPoint2D(CommontPoint2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    eta = _swig_property(_cain.tPoint2D_eta_get, _cain.tPoint2D_eta_set)

    def __init__(self, *args):
        if self.__class__ == tPoint2D:
            _self = None
        else:
            _self = self
        _cain.tPoint2D_swiginit(self, _cain.new_tPoint2D(_self, *args))
    __swig_destroy__ = _cain.delete_tPoint2D
    def __disown__(self):
        self.this.disown()
        _cain.disown_tPoint2D(self)
        return weakref_proxy(self)
tPoint2D.clone = new_instancemethod(_cain.tPoint2D_clone, None, tPoint2D)
tPoint2D_swigregister = _cain.tPoint2D_swigregister
tPoint2D_swigregister(tPoint2D)

class cPoint2D(CommoncPoint2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    y = _swig_property(_cain.cPoint2D_y_get, _cain.cPoint2D_y_set)

    def __init__(self, *args):
        if self.__class__ == cPoint2D:
            _self = None
        else:
            _self = self
        _cain.cPoint2D_swiginit(self, _cain.new_cPoint2D(_self, *args))
    __swig_destroy__ = _cain.delete_cPoint2D
    def __disown__(self):
        self.this.disown()
        _cain.disown_cPoint2D(self)
        return weakref_proxy(self)
cPoint2D.clone = new_instancemethod(_cain.cPoint2D_clone, None, cPoint2D)
cPoint2D_swigregister = _cain.cPoint2D_swigregister
cPoint2D_swigregister(cPoint2D)

class CommoncPoint3D(cPoint2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommoncPoint3D:
            _self = None
        else:
            _self = self
        _cain.CommoncPoint3D_swiginit(self, _cain.new_CommoncPoint3D(_self, ))
    __swig_destroy__ = _cain.delete_CommoncPoint3D
    get_shared = staticmethod(_cain.CommoncPoint3D_get_shared)
    type = _swig_property(_cain.CommoncPoint3D_type_get, _cain.CommoncPoint3D_type_set)
    unwrap = staticmethod(_cain.CommoncPoint3D_unwrap)
    dereference = staticmethod(_cain.CommoncPoint3D_dereference)
    get = staticmethod(_cain.CommoncPoint3D_get)
    name = _swig_property(_cain.CommoncPoint3D_name_get, _cain.CommoncPoint3D_name_set)
    gen_scheme = staticmethod(_cain.CommoncPoint3D_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommoncPoint3D(self)
        return weakref_proxy(self)
CommoncPoint3D.get_classname = new_instancemethod(_cain.CommoncPoint3D_get_classname, None, CommoncPoint3D)
CommoncPoint3D.get_metadata_path = new_instancemethod(_cain.CommoncPoint3D_get_metadata_path, None, CommoncPoint3D)
CommoncPoint3D.shared_from_this = new_instancemethod(_cain.CommoncPoint3D_shared_from_this, None, CommoncPoint3D)
CommoncPoint3D.get_uuid = new_instancemethod(_cain.CommoncPoint3D_get_uuid, None, CommoncPoint3D)
CommoncPoint3D.get_scheme = new_instancemethod(_cain.CommoncPoint3D_get_scheme, None, CommoncPoint3D)
CommoncPoint3D_swigregister = _cain.CommoncPoint3D_swigregister
CommoncPoint3D_swigregister(CommoncPoint3D)

def CommoncPoint3D_get_shared(i):
    return _cain.CommoncPoint3D_get_shared(i)
CommoncPoint3D_get_shared = _cain.CommoncPoint3D_get_shared

def CommoncPoint3D_unwrap(ptr):
    return _cain.CommoncPoint3D_unwrap(ptr)
CommoncPoint3D_unwrap = _cain.CommoncPoint3D_unwrap

def CommoncPoint3D_dereference(sptr):
    return _cain.CommoncPoint3D_dereference(sptr)
CommoncPoint3D_dereference = _cain.CommoncPoint3D_dereference

def CommoncPoint3D_get(*args):
    return _cain.CommoncPoint3D_get(*args)
CommoncPoint3D_get = _cain.CommoncPoint3D_get

def CommoncPoint3D_gen_scheme(sfile):
    return _cain.CommoncPoint3D_gen_scheme(sfile)
CommoncPoint3D_gen_scheme = _cain.CommoncPoint3D_gen_scheme

class CommontPoint3D(tPoint2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommontPoint3D:
            _self = None
        else:
            _self = self
        _cain.CommontPoint3D_swiginit(self, _cain.new_CommontPoint3D(_self, ))
    __swig_destroy__ = _cain.delete_CommontPoint3D
    get_shared = staticmethod(_cain.CommontPoint3D_get_shared)
    type = _swig_property(_cain.CommontPoint3D_type_get, _cain.CommontPoint3D_type_set)
    unwrap = staticmethod(_cain.CommontPoint3D_unwrap)
    dereference = staticmethod(_cain.CommontPoint3D_dereference)
    get = staticmethod(_cain.CommontPoint3D_get)
    name = _swig_property(_cain.CommontPoint3D_name_get, _cain.CommontPoint3D_name_set)
    gen_scheme = staticmethod(_cain.CommontPoint3D_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommontPoint3D(self)
        return weakref_proxy(self)
CommontPoint3D.get_classname = new_instancemethod(_cain.CommontPoint3D_get_classname, None, CommontPoint3D)
CommontPoint3D.get_metadata_path = new_instancemethod(_cain.CommontPoint3D_get_metadata_path, None, CommontPoint3D)
CommontPoint3D.shared_from_this = new_instancemethod(_cain.CommontPoint3D_shared_from_this, None, CommontPoint3D)
CommontPoint3D.get_uuid = new_instancemethod(_cain.CommontPoint3D_get_uuid, None, CommontPoint3D)
CommontPoint3D.get_scheme = new_instancemethod(_cain.CommontPoint3D_get_scheme, None, CommontPoint3D)
CommontPoint3D_swigregister = _cain.CommontPoint3D_swigregister
CommontPoint3D_swigregister(CommontPoint3D)

def CommontPoint3D_get_shared(i):
    return _cain.CommontPoint3D_get_shared(i)
CommontPoint3D_get_shared = _cain.CommontPoint3D_get_shared

def CommontPoint3D_unwrap(ptr):
    return _cain.CommontPoint3D_unwrap(ptr)
CommontPoint3D_unwrap = _cain.CommontPoint3D_unwrap

def CommontPoint3D_dereference(sptr):
    return _cain.CommontPoint3D_dereference(sptr)
CommontPoint3D_dereference = _cain.CommontPoint3D_dereference

def CommontPoint3D_get(*args):
    return _cain.CommontPoint3D_get(*args)
CommontPoint3D_get = _cain.CommontPoint3D_get

def CommontPoint3D_gen_scheme(sfile):
    return _cain.CommontPoint3D_gen_scheme(sfile)
CommontPoint3D_gen_scheme = _cain.CommontPoint3D_gen_scheme

class CommonTriangleElement(Element):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonTriangleElement:
            _self = None
        else:
            _self = self
        _cain.CommonTriangleElement_swiginit(self, _cain.new_CommonTriangleElement(_self, ))
    __swig_destroy__ = _cain.delete_CommonTriangleElement
    get_shared = staticmethod(_cain.CommonTriangleElement_get_shared)
    type = _swig_property(_cain.CommonTriangleElement_type_get, _cain.CommonTriangleElement_type_set)
    unwrap = staticmethod(_cain.CommonTriangleElement_unwrap)
    dereference = staticmethod(_cain.CommonTriangleElement_dereference)
    get = staticmethod(_cain.CommonTriangleElement_get)
    name = _swig_property(_cain.CommonTriangleElement_name_get, _cain.CommonTriangleElement_name_set)
    gen_scheme = staticmethod(_cain.CommonTriangleElement_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonTriangleElement(self)
        return weakref_proxy(self)
CommonTriangleElement.get_classname = new_instancemethod(_cain.CommonTriangleElement_get_classname, None, CommonTriangleElement)
CommonTriangleElement.get_metadata_path = new_instancemethod(_cain.CommonTriangleElement_get_metadata_path, None, CommonTriangleElement)
CommonTriangleElement.shared_from_this = new_instancemethod(_cain.CommonTriangleElement_shared_from_this, None, CommonTriangleElement)
CommonTriangleElement.get_uuid = new_instancemethod(_cain.CommonTriangleElement_get_uuid, None, CommonTriangleElement)
CommonTriangleElement.get_scheme = new_instancemethod(_cain.CommonTriangleElement_get_scheme, None, CommonTriangleElement)
CommonTriangleElement_swigregister = _cain.CommonTriangleElement_swigregister
CommonTriangleElement_swigregister(CommonTriangleElement)

def CommonTriangleElement_get_shared(i):
    return _cain.CommonTriangleElement_get_shared(i)
CommonTriangleElement_get_shared = _cain.CommonTriangleElement_get_shared

def CommonTriangleElement_unwrap(ptr):
    return _cain.CommonTriangleElement_unwrap(ptr)
CommonTriangleElement_unwrap = _cain.CommonTriangleElement_unwrap

def CommonTriangleElement_dereference(sptr):
    return _cain.CommonTriangleElement_dereference(sptr)
CommonTriangleElement_dereference = _cain.CommonTriangleElement_dereference

def CommonTriangleElement_get(*args):
    return _cain.CommonTriangleElement_get(*args)
CommonTriangleElement_get = _cain.CommonTriangleElement_get

def CommonTriangleElement_gen_scheme(sfile):
    return _cain.CommonTriangleElement_gen_scheme(sfile)
CommonTriangleElement_gen_scheme = _cain.CommonTriangleElement_gen_scheme

class CommonUnstructured2DMesh(UnstructuredMesh):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonUnstructured2DMesh:
            _self = None
        else:
            _self = self
        _cain.CommonUnstructured2DMesh_swiginit(self, _cain.new_CommonUnstructured2DMesh(_self, ))
    __swig_destroy__ = _cain.delete_CommonUnstructured2DMesh
    get_shared = staticmethod(_cain.CommonUnstructured2DMesh_get_shared)
    type = _swig_property(_cain.CommonUnstructured2DMesh_type_get, _cain.CommonUnstructured2DMesh_type_set)
    unwrap = staticmethod(_cain.CommonUnstructured2DMesh_unwrap)
    dereference = staticmethod(_cain.CommonUnstructured2DMesh_dereference)
    get = staticmethod(_cain.CommonUnstructured2DMesh_get)
    name = _swig_property(_cain.CommonUnstructured2DMesh_name_get, _cain.CommonUnstructured2DMesh_name_set)
    gen_scheme = staticmethod(_cain.CommonUnstructured2DMesh_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonUnstructured2DMesh(self)
        return weakref_proxy(self)
CommonUnstructured2DMesh.get_classname = new_instancemethod(_cain.CommonUnstructured2DMesh_get_classname, None, CommonUnstructured2DMesh)
CommonUnstructured2DMesh.get_metadata_path = new_instancemethod(_cain.CommonUnstructured2DMesh_get_metadata_path, None, CommonUnstructured2DMesh)
CommonUnstructured2DMesh.shared_from_this = new_instancemethod(_cain.CommonUnstructured2DMesh_shared_from_this, None, CommonUnstructured2DMesh)
CommonUnstructured2DMesh.get_uuid = new_instancemethod(_cain.CommonUnstructured2DMesh_get_uuid, None, CommonUnstructured2DMesh)
CommonUnstructured2DMesh.get_scheme = new_instancemethod(_cain.CommonUnstructured2DMesh_get_scheme, None, CommonUnstructured2DMesh)
CommonUnstructured2DMesh_swigregister = _cain.CommonUnstructured2DMesh_swigregister
CommonUnstructured2DMesh_swigregister(CommonUnstructured2DMesh)

def CommonUnstructured2DMesh_get_shared(i):
    return _cain.CommonUnstructured2DMesh_get_shared(i)
CommonUnstructured2DMesh_get_shared = _cain.CommonUnstructured2DMesh_get_shared

def CommonUnstructured2DMesh_unwrap(ptr):
    return _cain.CommonUnstructured2DMesh_unwrap(ptr)
CommonUnstructured2DMesh_unwrap = _cain.CommonUnstructured2DMesh_unwrap

def CommonUnstructured2DMesh_dereference(sptr):
    return _cain.CommonUnstructured2DMesh_dereference(sptr)
CommonUnstructured2DMesh_dereference = _cain.CommonUnstructured2DMesh_dereference

def CommonUnstructured2DMesh_get(*args):
    return _cain.CommonUnstructured2DMesh_get(*args)
CommonUnstructured2DMesh_get = _cain.CommonUnstructured2DMesh_get

def CommonUnstructured2DMesh_gen_scheme(sfile):
    return _cain.CommonUnstructured2DMesh_gen_scheme(sfile)
CommonUnstructured2DMesh_gen_scheme = _cain.CommonUnstructured2DMesh_gen_scheme

class CommonUnstructured3DMesh(UnstructuredMesh):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonUnstructured3DMesh:
            _self = None
        else:
            _self = self
        _cain.CommonUnstructured3DMesh_swiginit(self, _cain.new_CommonUnstructured3DMesh(_self, ))
    __swig_destroy__ = _cain.delete_CommonUnstructured3DMesh
    get_shared = staticmethod(_cain.CommonUnstructured3DMesh_get_shared)
    type = _swig_property(_cain.CommonUnstructured3DMesh_type_get, _cain.CommonUnstructured3DMesh_type_set)
    unwrap = staticmethod(_cain.CommonUnstructured3DMesh_unwrap)
    dereference = staticmethod(_cain.CommonUnstructured3DMesh_dereference)
    get = staticmethod(_cain.CommonUnstructured3DMesh_get)
    name = _swig_property(_cain.CommonUnstructured3DMesh_name_get, _cain.CommonUnstructured3DMesh_name_set)
    gen_scheme = staticmethod(_cain.CommonUnstructured3DMesh_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonUnstructured3DMesh(self)
        return weakref_proxy(self)
CommonUnstructured3DMesh.get_classname = new_instancemethod(_cain.CommonUnstructured3DMesh_get_classname, None, CommonUnstructured3DMesh)
CommonUnstructured3DMesh.get_metadata_path = new_instancemethod(_cain.CommonUnstructured3DMesh_get_metadata_path, None, CommonUnstructured3DMesh)
CommonUnstructured3DMesh.shared_from_this = new_instancemethod(_cain.CommonUnstructured3DMesh_shared_from_this, None, CommonUnstructured3DMesh)
CommonUnstructured3DMesh.get_uuid = new_instancemethod(_cain.CommonUnstructured3DMesh_get_uuid, None, CommonUnstructured3DMesh)
CommonUnstructured3DMesh.get_scheme = new_instancemethod(_cain.CommonUnstructured3DMesh_get_scheme, None, CommonUnstructured3DMesh)
CommonUnstructured3DMesh_swigregister = _cain.CommonUnstructured3DMesh_swigregister
CommonUnstructured3DMesh_swigregister(CommonUnstructured3DMesh)

def CommonUnstructured3DMesh_get_shared(i):
    return _cain.CommonUnstructured3DMesh_get_shared(i)
CommonUnstructured3DMesh_get_shared = _cain.CommonUnstructured3DMesh_get_shared

def CommonUnstructured3DMesh_unwrap(ptr):
    return _cain.CommonUnstructured3DMesh_unwrap(ptr)
CommonUnstructured3DMesh_unwrap = _cain.CommonUnstructured3DMesh_unwrap

def CommonUnstructured3DMesh_dereference(sptr):
    return _cain.CommonUnstructured3DMesh_dereference(sptr)
CommonUnstructured3DMesh_dereference = _cain.CommonUnstructured3DMesh_dereference

def CommonUnstructured3DMesh_get(*args):
    return _cain.CommonUnstructured3DMesh_get(*args)
CommonUnstructured3DMesh_get = _cain.CommonUnstructured3DMesh_get

def CommonUnstructured3DMesh_gen_scheme(sfile):
    return _cain.CommonUnstructured3DMesh_gen_scheme(sfile)
CommonUnstructured3DMesh_gen_scheme = _cain.CommonUnstructured3DMesh_gen_scheme

class CommonForeignUDexter(UnstructuredDexter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonForeignUDexter:
            _self = None
        else:
            _self = self
        _cain.CommonForeignUDexter_swiginit(self, _cain.new_CommonForeignUDexter(_self, ))
    __swig_destroy__ = _cain.delete_CommonForeignUDexter
    get_shared = staticmethod(_cain.CommonForeignUDexter_get_shared)
    type = _swig_property(_cain.CommonForeignUDexter_type_get, _cain.CommonForeignUDexter_type_set)
    unwrap = staticmethod(_cain.CommonForeignUDexter_unwrap)
    dereference = staticmethod(_cain.CommonForeignUDexter_dereference)
    get = staticmethod(_cain.CommonForeignUDexter_get)
    name = _swig_property(_cain.CommonForeignUDexter_name_get, _cain.CommonForeignUDexter_name_set)
    gen_scheme = staticmethod(_cain.CommonForeignUDexter_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _cain.disown_CommonForeignUDexter(self)
        return weakref_proxy(self)
CommonForeignUDexter.get_classname = new_instancemethod(_cain.CommonForeignUDexter_get_classname, None, CommonForeignUDexter)
CommonForeignUDexter.get_metadata_path = new_instancemethod(_cain.CommonForeignUDexter_get_metadata_path, None, CommonForeignUDexter)
CommonForeignUDexter.shared_from_this = new_instancemethod(_cain.CommonForeignUDexter_shared_from_this, None, CommonForeignUDexter)
CommonForeignUDexter.get_uuid = new_instancemethod(_cain.CommonForeignUDexter_get_uuid, None, CommonForeignUDexter)
CommonForeignUDexter.get_scheme = new_instancemethod(_cain.CommonForeignUDexter_get_scheme, None, CommonForeignUDexter)
CommonForeignUDexter_swigregister = _cain.CommonForeignUDexter_swigregister
CommonForeignUDexter_swigregister(CommonForeignUDexter)

def CommonForeignUDexter_get_shared(i):
    return _cain.CommonForeignUDexter_get_shared(i)
CommonForeignUDexter_get_shared = _cain.CommonForeignUDexter_get_shared

def CommonForeignUDexter_unwrap(ptr):
    return _cain.CommonForeignUDexter_unwrap(ptr)
CommonForeignUDexter_unwrap = _cain.CommonForeignUDexter_unwrap

def CommonForeignUDexter_dereference(sptr):
    return _cain.CommonForeignUDexter_dereference(sptr)
CommonForeignUDexter_dereference = _cain.CommonForeignUDexter_dereference

def CommonForeignUDexter_get(*args):
    return _cain.CommonForeignUDexter_get(*args)
CommonForeignUDexter_get = _cain.CommonForeignUDexter_get

def CommonForeignUDexter_gen_scheme(sfile):
    return _cain.CommonForeignUDexter_gen_scheme(sfile)
CommonForeignUDexter_gen_scheme = _cain.CommonForeignUDexter_gen_scheme

class tPoint3D(CommontPoint3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    zeta = _swig_property(_cain.tPoint3D_zeta_get, _cain.tPoint3D_zeta_set)

    def __init__(self, *args):
        if self.__class__ == tPoint3D:
            _self = None
        else:
            _self = self
        _cain.tPoint3D_swiginit(self, _cain.new_tPoint3D(_self, *args))
    __swig_destroy__ = _cain.delete_tPoint3D
    def __disown__(self):
        self.this.disown()
        _cain.disown_tPoint3D(self)
        return weakref_proxy(self)
tPoint3D.clone = new_instancemethod(_cain.tPoint3D_clone, None, tPoint3D)
tPoint3D_swigregister = _cain.tPoint3D_swigregister
tPoint3D_swigregister(tPoint3D)

class cPoint3D(CommoncPoint3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    z = _swig_property(_cain.cPoint3D_z_get, _cain.cPoint3D_z_set)

    def __init__(self, *args):
        if self.__class__ == cPoint3D:
            _self = None
        else:
            _self = self
        _cain.cPoint3D_swiginit(self, _cain.new_cPoint3D(_self, *args))
    __swig_destroy__ = _cain.delete_cPoint3D
    def __disown__(self):
        self.this.disown()
        _cain.disown_cPoint3D(self)
        return weakref_proxy(self)
cPoint3D.clone = new_instancemethod(_cain.cPoint3D_clone, None, cPoint3D)
cPoint3D_swigregister = _cain.cPoint3D_swigregister
cPoint3D_swigregister(cPoint3D)

class TriangleElement(CommonTriangleElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == TriangleElement:
            _self = None
        else:
            _self = self
        _cain.TriangleElement_swiginit(self, _cain.new_TriangleElement(_self, ))
    create = staticmethod(_cain.TriangleElement_create)
    __swig_destroy__ = _cain.delete_TriangleElement
    def __disown__(self):
        self.this.disown()
        _cain.disown_TriangleElement(self)
        return weakref_proxy(self)
TriangleElement.nnodes = new_instancemethod(_cain.TriangleElement_nnodes, None, TriangleElement)
TriangleElement.nsides = new_instancemethod(_cain.TriangleElement_nsides, None, TriangleElement)
TriangleElement.point_inside = new_instancemethod(_cain.TriangleElement_point_inside, None, TriangleElement)
TriangleElement.point_inworld = new_instancemethod(_cain.TriangleElement_point_inworld, None, TriangleElement)
TriangleElement.sideconversion_fromgambit = new_instancemethod(_cain.TriangleElement_sideconversion_fromgambit, None, TriangleElement)
TriangleElement.calculate_metrics = new_instancemethod(_cain.TriangleElement_calculate_metrics, None, TriangleElement)
TriangleElement.get_nodesperside = new_instancemethod(_cain.TriangleElement_get_nodesperside, None, TriangleElement)
TriangleElement.get_gradient = new_instancemethod(_cain.TriangleElement_get_gradient, None, TriangleElement)
TriangleElement.get_orientation = new_instancemethod(_cain.TriangleElement_get_orientation, None, TriangleElement)
TriangleElement_swigregister = _cain.TriangleElement_swigregister
TriangleElement_swigregister(TriangleElement)

def TriangleElement_create():
    return _cain.TriangleElement_create()
TriangleElement_create = _cain.TriangleElement_create

class Unstructured2DMesh(CommonUnstructured2DMesh):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == Unstructured2DMesh:
            _self = None
        else:
            _self = self
        _cain.Unstructured2DMesh_swiginit(self, _cain.new_Unstructured2DMesh(_self, ))
    create = staticmethod(_cain.Unstructured2DMesh_create)
    __swig_destroy__ = _cain.delete_Unstructured2DMesh
    def __disown__(self):
        self.this.disown()
        _cain.disown_Unstructured2DMesh(self)
        return weakref_proxy(self)
Unstructured2DMesh.get_pointcoords = new_instancemethod(_cain.Unstructured2DMesh_get_pointcoords, None, Unstructured2DMesh)
Unstructured2DMesh.world2mesh = new_instancemethod(_cain.Unstructured2DMesh_world2mesh, None, Unstructured2DMesh)
Unstructured2DMesh_swigregister = _cain.Unstructured2DMesh_swigregister
Unstructured2DMesh_swigregister(Unstructured2DMesh)

def Unstructured2DMesh_create():
    return _cain.Unstructured2DMesh_create()
Unstructured2DMesh_create = _cain.Unstructured2DMesh_create

class Unstructured3DMesh(CommonUnstructured3DMesh):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == Unstructured3DMesh:
            _self = None
        else:
            _self = self
        _cain.Unstructured3DMesh_swiginit(self, _cain.new_Unstructured3DMesh(_self, ))
    create = staticmethod(_cain.Unstructured3DMesh_create)
    __swig_destroy__ = _cain.delete_Unstructured3DMesh
    def __disown__(self):
        self.this.disown()
        _cain.disown_Unstructured3DMesh(self)
        return weakref_proxy(self)
Unstructured3DMesh.get_pointcoords = new_instancemethod(_cain.Unstructured3DMesh_get_pointcoords, None, Unstructured3DMesh)
Unstructured3DMesh.world2mesh = new_instancemethod(_cain.Unstructured3DMesh_world2mesh, None, Unstructured3DMesh)
Unstructured3DMesh_swigregister = _cain.Unstructured3DMesh_swigregister
Unstructured3DMesh_swigregister(Unstructured3DMesh)

def Unstructured3DMesh_create():
    return _cain.Unstructured3DMesh_create()
Unstructured3DMesh_create = _cain.Unstructured3DMesh_create

class ForeignUDexter(CommonForeignUDexter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ForeignUDexter:
            _self = None
        else:
            _self = self
        _cain.ForeignUDexter_swiginit(self, _cain.new_ForeignUDexter(_self, ))
    create = staticmethod(_cain.ForeignUDexter_create)
    __swig_destroy__ = _cain.delete_ForeignUDexter
    def __disown__(self):
        self.this.disown()
        _cain.disown_ForeignUDexter(self)
        return weakref_proxy(self)
ForeignUDexter.config = new_instancemethod(_cain.ForeignUDexter_config, None, ForeignUDexter)
ForeignUDexter.decompose = new_instancemethod(_cain.ForeignUDexter_decompose, None, ForeignUDexter)
ForeignUDexter_swigregister = _cain.ForeignUDexter_swigregister
ForeignUDexter_swigregister(ForeignUDexter)

def ForeignUDexter_create():
    return _cain.ForeignUDexter_create()
ForeignUDexter_create = _cain.ForeignUDexter_create



