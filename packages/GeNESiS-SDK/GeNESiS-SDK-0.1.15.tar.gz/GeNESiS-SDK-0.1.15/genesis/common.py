# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _common.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_common')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_common')
    _common = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_common', [dirname(__file__)])
        except ImportError:
            import _common
            return _common
        try:
            _mod = imp.load_module('_common', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _common = swig_import_helper()
    del swig_import_helper
else:
    import _common
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_common.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_common.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_common.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_common.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_common.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_common.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_common.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_common.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_common.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_common.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_common.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_common.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_common.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_common.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_common.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_common.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _common.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _common.SHARED_PTR_DISOWN
BOOST_LOG_DYN_LINK = _common.BOOST_LOG_DYN_LINK
class Communication(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    get = staticmethod(_common.Communication_get)
    __swig_destroy__ = _common.delete_Communication
    mpiSupport = _swig_property(_common.Communication_mpiSupport_get, _common.Communication_mpiSupport_set)
    rank = _swig_property(_common.Communication_rank_get, _common.Communication_rank_set)
    ranksCount = _swig_property(_common.Communication_ranksCount_get, _common.Communication_ranksCount_set)
    hosts = _swig_property(_common.Communication_hosts_get, _common.Communication_hosts_set)
Communication.get_p2p_channel = new_instancemethod(_common.Communication_get_p2p_channel, None, Communication)
Communication.register_p2p_communication = new_instancemethod(_common.Communication_register_p2p_communication, None, Communication)
Communication.safe_barrier = new_instancemethod(_common.Communication_safe_barrier, None, Communication)
Communication.update_communicators = new_instancemethod(_common.Communication_update_communicators, None, Communication)
Communication_swigregister = _common.Communication_swigregister
Communication_swigregister(Communication)

def Communication_get():
    return _common.Communication_get()
Communication_get = _common.Communication_get

LOG_OUTPUT_FILE = _common.LOG_OUTPUT_FILE
LOG_DEBUG_FILE = _common.LOG_DEBUG_FILE
DEFAULT_DEBUG_ENABLED = _common.DEFAULT_DEBUG_ENABLED
LogSeverity_DEBUG = _common.LogSeverity_DEBUG
LogSeverity_MESSAGE = _common.LogSeverity_MESSAGE
LogSeverity_WARNING = _common.LogSeverity_WARNING
LogSeverity_ERROR = _common.LogSeverity_ERROR
LogSeverity_FATAL = _common.LogSeverity_FATAL
LogSeverity_EXTERNAL = _common.LogSeverity_EXTERNAL
LogPriority_LOW = _common.LogPriority_LOW
LogPriority_MEDIUM = _common.LogPriority_MEDIUM
LogPriority_HIGH = _common.LogPriority_HIGH
class Log(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    priority0_lg = _swig_property(_common.Log_priority0_lg_get, _common.Log_priority0_lg_set)
    priority1_lg = _swig_property(_common.Log_priority1_lg_get, _common.Log_priority1_lg_set)
    priority2_lg = _swig_property(_common.Log_priority2_lg_get, _common.Log_priority2_lg_set)
    error_lg = _swig_property(_common.Log_error_lg_get, _common.Log_error_lg_set)
    fatal_lg = _swig_property(_common.Log_fatal_lg_get, _common.Log_fatal_lg_set)
    output_min_severity = _swig_property(_common.Log_output_min_severity_get, _common.Log_output_min_severity_set)
    output_min_priority = _swig_property(_common.Log_output_min_priority_get, _common.Log_output_min_priority_set)
    debug_min_severity = _swig_property(_common.Log_debug_min_severity_get, _common.Log_debug_min_severity_set)
    debug_min_priority = _swig_property(_common.Log_debug_min_priority_get, _common.Log_debug_min_priority_set)
    debug_enabled = _swig_property(_common.Log_debug_enabled_get, _common.Log_debug_enabled_set)
    get = staticmethod(_common.Log_get)
    __swig_destroy__ = _common.delete_Log
Log.flush = new_instancemethod(_common.Log_flush, None, Log)
Log_swigregister = _common.Log_swigregister
Log_swigregister(Log)
cvar = _common.cvar

def Log_get():
    return _common.Log_get()
Log_get = _common.Log_get

class Parameters(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == Parameters:
            _self = None
        else:
            _self = self
        _common.Parameters_swiginit(self, _common.new_Parameters(_self, ))
    __swig_destroy__ = _common.delete_Parameters
    dereference = staticmethod(_common.Parameters_dereference)
    get_shared = staticmethod(_common.Parameters_get_shared)
    tree = _swig_property(_common.Parameters_tree_get, _common.Parameters_tree_set)
    map = _swig_property(_common.Parameters_map_get, _common.Parameters_map_set)
    def __disown__(self):
        self.this.disown()
        _common.disown_Parameters(self)
        return weakref_proxy(self)
Parameters.load = new_instancemethod(_common.Parameters_load, None, Parameters)
Parameters.get_values = new_instancemethod(_common.Parameters_get_values, None, Parameters)
Parameters_swigregister = _common.Parameters_swigregister
Parameters_swigregister(Parameters)

def Parameters_dereference(sptr):
    return _common.Parameters_dereference(sptr)
Parameters_dereference = _common.Parameters_dereference

def Parameters_get_shared(i):
    return _common.Parameters_get_shared(i)
Parameters_get_shared = _common.Parameters_get_shared

class Scheme(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.Scheme_swiginit(self, _common.new_Scheme())
    __swig_destroy__ = _common.delete_Scheme
    name = _swig_property(_common.Scheme_name_get, _common.Scheme_name_set)
Scheme.validate = new_instancemethod(_common.Scheme_validate, None, Scheme)
Scheme.load = new_instancemethod(_common.Scheme_load, None, Scheme)
Scheme.filter = new_instancemethod(_common.Scheme_filter, None, Scheme)
Scheme.include = new_instancemethod(_common.Scheme_include, None, Scheme)
Scheme.get_rules = new_instancemethod(_common.Scheme_get_rules, None, Scheme)
Scheme_swigregister = _common.Scheme_swigregister
Scheme_swigregister(Scheme)
SCHEMES_GROUP = cvar.SCHEMES_GROUP
SCHEMES_BASE = cvar.SCHEMES_BASE
SCHEMES_PARAM = cvar.SCHEMES_PARAM
SCHEMES_CLASS = cvar.SCHEMES_CLASS
SCHEMES_ROOT = cvar.SCHEMES_ROOT
SCHEMES_CAPTION = cvar.SCHEMES_CAPTION
SCHEMES_TYPE = cvar.SCHEMES_TYPE
SCHEMES_DEFAULT = cvar.SCHEMES_DEFAULT
SCHEMES_DESCRIPION = cvar.SCHEMES_DESCRIPION
SCHEMES_TYPE_FILE = cvar.SCHEMES_TYPE_FILE
SCHEMES_TYPE_INT = cvar.SCHEMES_TYPE_INT
SCHEMES_TYPE_FLOAT = cvar.SCHEMES_TYPE_FLOAT
SCHEMES_TYPE_ARRAY = cvar.SCHEMES_TYPE_ARRAY

METADATA_VAR = _common.METADATA_VAR
GENESIS_LOCATION = _common.GENESIS_LOCATION
class BaseClass(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_BaseClass
    gen_scheme = staticmethod(_common.BaseClass_gen_scheme)

    def __init__(self):
        if self.__class__ == BaseClass:
            _self = None
        else:
            _self = self
        _common.BaseClass_swiginit(self, _common.new_BaseClass(_self, ))
    def __disown__(self):
        self.this.disown()
        _common.disown_BaseClass(self)
        return weakref_proxy(self)
BaseClass_swigregister = _common.BaseClass_swigregister
BaseClass_swigregister(BaseClass)

def BaseClass_gen_scheme(sfile):
    return _common.BaseClass_gen_scheme(sfile)
BaseClass_gen_scheme = _common.BaseClass_gen_scheme

class exception_base(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.exception_base_swiginit(self, _common.new_exception_base())
    __swig_destroy__ = _common.delete_exception_base
exception_base.what = new_instancemethod(_common.exception_base_what, None, exception_base)
exception_base_swigregister = _common.exception_base_swigregister
exception_base_swigregister(exception_base)

class outofdomain_error(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.outofdomain_error_swiginit(self, _common.new_outofdomain_error())
    __swig_destroy__ = _common.delete_outofdomain_error
outofdomain_error.what = new_instancemethod(_common.outofdomain_error_what, None, outofdomain_error)
outofdomain_error_swigregister = _common.outofdomain_error_swigregister
outofdomain_error_swigregister(outofdomain_error)

class inconsistency_error(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.inconsistency_error_swiginit(self, _common.new_inconsistency_error())
    __swig_destroy__ = _common.delete_inconsistency_error
inconsistency_error.what = new_instancemethod(_common.inconsistency_error_what, None, inconsistency_error)
inconsistency_error_swigregister = _common.inconsistency_error_swigregister
inconsistency_error_swigregister(inconsistency_error)

class param_value_error(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.param_value_error_swiginit(self, _common.new_param_value_error())
    __swig_destroy__ = _common.delete_param_value_error
param_value_error.what = new_instancemethod(_common.param_value_error_what, None, param_value_error)
param_value_error_swigregister = _common.param_value_error_swigregister
param_value_error_swigregister(param_value_error)

class status_error(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.status_error_swiginit(self, _common.new_status_error())
    __swig_destroy__ = _common.delete_status_error
status_error.what = new_instancemethod(_common.status_error_what, None, status_error)
status_error_swigregister = _common.status_error_swigregister
status_error_swigregister(status_error)

class flow_control_error(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.flow_control_error_swiginit(self, _common.new_flow_control_error())
    __swig_destroy__ = _common.delete_flow_control_error
flow_control_error.what = new_instancemethod(_common.flow_control_error_what, None, flow_control_error)
flow_control_error_swigregister = _common.flow_control_error_swigregister
flow_control_error_swigregister(flow_control_error)

class malformed_record(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.malformed_record_swiginit(self, _common.new_malformed_record())
    __swig_destroy__ = _common.delete_malformed_record
malformed_record.what = new_instancemethod(_common.malformed_record_what, None, malformed_record)
malformed_record_swigregister = _common.malformed_record_swigregister
malformed_record_swigregister(malformed_record)

class unsupported_feature(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.unsupported_feature_swiginit(self, _common.new_unsupported_feature())
    __swig_destroy__ = _common.delete_unsupported_feature
unsupported_feature.what = new_instancemethod(_common.unsupported_feature_what, None, unsupported_feature)
unsupported_feature_swigregister = _common.unsupported_feature_swigregister
unsupported_feature_swigregister(unsupported_feature)

class factory_unknown_type(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.factory_unknown_type_swiginit(self, _common.new_factory_unknown_type())
    __swig_destroy__ = _common.delete_factory_unknown_type
factory_unknown_type.what = new_instancemethod(_common.factory_unknown_type_what, None, factory_unknown_type)
factory_unknown_type_swigregister = _common.factory_unknown_type_swigregister
factory_unknown_type_swigregister(factory_unknown_type)

class wrong_behaviour(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.wrong_behaviour_swiginit(self, _common.new_wrong_behaviour())
    __swig_destroy__ = _common.delete_wrong_behaviour
wrong_behaviour.what = new_instancemethod(_common.wrong_behaviour_what, None, wrong_behaviour)
wrong_behaviour_swigregister = _common.wrong_behaviour_swigregister
wrong_behaviour_swigregister(wrong_behaviour)

class unexpected_instance_type(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.unexpected_instance_type_swiginit(self, _common.new_unexpected_instance_type())
    __swig_destroy__ = _common.delete_unexpected_instance_type
unexpected_instance_type.what = new_instancemethod(_common.unexpected_instance_type_what, None, unexpected_instance_type)
unexpected_instance_type_swigregister = _common.unexpected_instance_type_swigregister
unexpected_instance_type_swigregister(unexpected_instance_type)

class unprovided_artifact(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.unprovided_artifact_swiginit(self, _common.new_unprovided_artifact())
    __swig_destroy__ = _common.delete_unprovided_artifact
unprovided_artifact.what = new_instancemethod(_common.unprovided_artifact_what, None, unprovided_artifact)
unprovided_artifact_swigregister = _common.unprovided_artifact_swigregister
unprovided_artifact_swigregister(unprovided_artifact)

class incomplete_metadata(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.incomplete_metadata_swiginit(self, _common.new_incomplete_metadata())
    __swig_destroy__ = _common.delete_incomplete_metadata
incomplete_metadata.what = new_instancemethod(_common.incomplete_metadata_what, None, incomplete_metadata)
incomplete_metadata_swigregister = _common.incomplete_metadata_swigregister
incomplete_metadata_swigregister(incomplete_metadata)

class internal_error(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.internal_error_swiginit(self, _common.new_internal_error())
    __swig_destroy__ = _common.delete_internal_error
internal_error.what = new_instancemethod(_common.internal_error_what, None, internal_error)
internal_error_swigregister = _common.internal_error_swigregister
internal_error_swigregister(internal_error)

class incompatible_solver(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.incompatible_solver_swiginit(self, _common.new_incompatible_solver())
    __swig_destroy__ = _common.delete_incompatible_solver
incompatible_solver.what = new_instancemethod(_common.incompatible_solver_what, None, incompatible_solver)
incompatible_solver_swigregister = _common.incompatible_solver_swigregister
incompatible_solver_swigregister(incompatible_solver)

class invalid_mpi_thread_support(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.invalid_mpi_thread_support_swiginit(self, _common.new_invalid_mpi_thread_support())
    __swig_destroy__ = _common.delete_invalid_mpi_thread_support
invalid_mpi_thread_support.what = new_instancemethod(_common.invalid_mpi_thread_support_what, None, invalid_mpi_thread_support)
invalid_mpi_thread_support_swigregister = _common.invalid_mpi_thread_support_swigregister
invalid_mpi_thread_support_swigregister(invalid_mpi_thread_support)

class unsupported_multi_threading(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.unsupported_multi_threading_swiginit(self, _common.new_unsupported_multi_threading())
    __swig_destroy__ = _common.delete_unsupported_multi_threading
unsupported_multi_threading.what = new_instancemethod(_common.unsupported_multi_threading_what, None, unsupported_multi_threading)
unsupported_multi_threading_swigregister = _common.unsupported_multi_threading_swigregister
unsupported_multi_threading_swigregister(unsupported_multi_threading)

class parameters_validation_failed(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.parameters_validation_failed_swiginit(self, _common.new_parameters_validation_failed())
    __swig_destroy__ = _common.delete_parameters_validation_failed
parameters_validation_failed.what = new_instancemethod(_common.parameters_validation_failed_what, None, parameters_validation_failed)
parameters_validation_failed_swigregister = _common.parameters_validation_failed_swigregister
parameters_validation_failed_swigregister(parameters_validation_failed)

class communication_error(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.communication_error_swiginit(self, _common.new_communication_error())
    __swig_destroy__ = _common.delete_communication_error
communication_error.what = new_instancemethod(_common.communication_error_what, None, communication_error)
communication_error_swigregister = _common.communication_error_swigregister
communication_error_swigregister(communication_error)

class io_error(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.io_error_swiginit(self, _common.new_io_error())
    __swig_destroy__ = _common.delete_io_error
io_error.what = new_instancemethod(_common.io_error_what, None, io_error)
io_error_swigregister = _common.io_error_swigregister
io_error_swigregister(io_error)

class channel_open_error(io_error):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.channel_open_error_swiginit(self, _common.new_channel_open_error())
    __swig_destroy__ = _common.delete_channel_open_error
channel_open_error.what = new_instancemethod(_common.channel_open_error_what, None, channel_open_error)
channel_open_error_swigregister = _common.channel_open_error_swigregister
channel_open_error_swigregister(channel_open_error)

class channel_write_error(io_error):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.channel_write_error_swiginit(self, _common.new_channel_write_error())
    __swig_destroy__ = _common.delete_channel_write_error
channel_write_error.what = new_instancemethod(_common.channel_write_error_what, None, channel_write_error)
channel_write_error_swigregister = _common.channel_write_error_swigregister
channel_write_error_swigregister(channel_write_error)

class channel_closed_error(io_error):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.channel_closed_error_swiginit(self, _common.new_channel_closed_error())
    __swig_destroy__ = _common.delete_channel_closed_error
channel_closed_error.what = new_instancemethod(_common.channel_closed_error_what, None, channel_closed_error)
channel_closed_error_swigregister = _common.channel_closed_error_swigregister
channel_closed_error_swigregister(channel_closed_error)

class channel_closing_error(io_error):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.channel_closing_error_swiginit(self, _common.new_channel_closing_error())
    __swig_destroy__ = _common.delete_channel_closing_error
channel_closing_error.what = new_instancemethod(_common.channel_closing_error_what, None, channel_closing_error)
channel_closing_error_swigregister = _common.channel_closing_error_swigregister
channel_closing_error_swigregister(channel_closing_error)

class file_open_error(io_error):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.file_open_error_swiginit(self, _common.new_file_open_error())
    __swig_destroy__ = _common.delete_file_open_error
file_open_error.what = new_instancemethod(_common.file_open_error_what, None, file_open_error)
file_open_error_swigregister = _common.file_open_error_swigregister
file_open_error_swigregister(file_open_error)

class file_format_error(io_error):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.file_format_error_swiginit(self, _common.new_file_format_error())
    __swig_destroy__ = _common.delete_file_format_error
file_format_error.what = new_instancemethod(_common.file_format_error_what, None, file_format_error)
file_format_error_swigregister = _common.file_format_error_swigregister
file_format_error_swigregister(file_format_error)

class file_read_error(io_error):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.file_read_error_swiginit(self, _common.new_file_read_error())
    __swig_destroy__ = _common.delete_file_read_error
file_read_error.what = new_instancemethod(_common.file_read_error_what, None, file_read_error)
file_read_error_swigregister = _common.file_read_error_swigregister
file_read_error_swigregister(file_read_error)

class file_write_error(io_error):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _common.file_write_error_swiginit(self, _common.new_file_write_error())
    __swig_destroy__ = _common.delete_file_write_error
file_write_error.what = new_instancemethod(_common.file_write_error_what, None, file_write_error)
file_write_error_swigregister = _common.file_write_error_swigregister
file_write_error_swigregister(file_write_error)

class CommonTimer(BaseClass):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonTimer:
            _self = None
        else:
            _self = self
        _common.CommonTimer_swiginit(self, _common.new_CommonTimer(_self, ))
    __swig_destroy__ = _common.delete_CommonTimer
    get_shared = staticmethod(_common.CommonTimer_get_shared)
    type = _swig_property(_common.CommonTimer_type_get, _common.CommonTimer_type_set)
    unwrap = staticmethod(_common.CommonTimer_unwrap)
    dereference = staticmethod(_common.CommonTimer_dereference)
    get = staticmethod(_common.CommonTimer_get)
    name = _swig_property(_common.CommonTimer_name_get, _common.CommonTimer_name_set)
    gen_scheme = staticmethod(_common.CommonTimer_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _common.disown_CommonTimer(self)
        return weakref_proxy(self)
CommonTimer.get_classname = new_instancemethod(_common.CommonTimer_get_classname, None, CommonTimer)
CommonTimer.get_metadata_path = new_instancemethod(_common.CommonTimer_get_metadata_path, None, CommonTimer)
CommonTimer.shared_from_this = new_instancemethod(_common.CommonTimer_shared_from_this, None, CommonTimer)
CommonTimer.get_uuid = new_instancemethod(_common.CommonTimer_get_uuid, None, CommonTimer)
CommonTimer.get_scheme = new_instancemethod(_common.CommonTimer_get_scheme, None, CommonTimer)
CommonTimer_swigregister = _common.CommonTimer_swigregister
CommonTimer_swigregister(CommonTimer)

def CommonTimer_get_shared(i):
    return _common.CommonTimer_get_shared(i)
CommonTimer_get_shared = _common.CommonTimer_get_shared

def CommonTimer_unwrap(ptr):
    return _common.CommonTimer_unwrap(ptr)
CommonTimer_unwrap = _common.CommonTimer_unwrap

def CommonTimer_dereference(sptr):
    return _common.CommonTimer_dereference(sptr)
CommonTimer_dereference = _common.CommonTimer_dereference

def CommonTimer_get(*args):
    return _common.CommonTimer_get(*args)
CommonTimer_get = _common.CommonTimer_get

def CommonTimer_gen_scheme(sfile):
    return _common.CommonTimer_gen_scheme(sfile)
CommonTimer_gen_scheme = _common.CommonTimer_gen_scheme

class Timer(CommonTimer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, name, report=True):
        if self.__class__ == Timer:
            _self = None
        else:
            _self = self
        _common.Timer_swiginit(self, _common.new_Timer(_self, name, report))
    __swig_destroy__ = _common.delete_Timer
    def __disown__(self):
        self.this.disown()
        _common.disown_Timer(self)
        return weakref_proxy(self)
Timer.elapsed = new_instancemethod(_common.Timer_elapsed, None, Timer)
Timer.stop = new_instancemethod(_common.Timer_stop, None, Timer)
Timer.start = new_instancemethod(_common.Timer_start, None, Timer)
Timer.resume = new_instancemethod(_common.Timer_resume, None, Timer)
Timer_swigregister = _common.Timer_swigregister
Timer_swigregister(Timer)

class _string_list(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _common._string_list_swiginit(self, _common.new__string_list(*args))
    __swig_destroy__ = _common.delete__string_list
_string_list.iterator = new_instancemethod(_common._string_list_iterator, None, _string_list)
_string_list.__nonzero__ = new_instancemethod(_common._string_list___nonzero__, None, _string_list)
_string_list.__bool__ = new_instancemethod(_common._string_list___bool__, None, _string_list)
_string_list.__len__ = new_instancemethod(_common._string_list___len__, None, _string_list)
_string_list.__getslice__ = new_instancemethod(_common._string_list___getslice__, None, _string_list)
_string_list.__setslice__ = new_instancemethod(_common._string_list___setslice__, None, _string_list)
_string_list.__delslice__ = new_instancemethod(_common._string_list___delslice__, None, _string_list)
_string_list.__delitem__ = new_instancemethod(_common._string_list___delitem__, None, _string_list)
_string_list.__getitem__ = new_instancemethod(_common._string_list___getitem__, None, _string_list)
_string_list.__setitem__ = new_instancemethod(_common._string_list___setitem__, None, _string_list)
_string_list.pop = new_instancemethod(_common._string_list_pop, None, _string_list)
_string_list.append = new_instancemethod(_common._string_list_append, None, _string_list)
_string_list.empty = new_instancemethod(_common._string_list_empty, None, _string_list)
_string_list.size = new_instancemethod(_common._string_list_size, None, _string_list)
_string_list.swap = new_instancemethod(_common._string_list_swap, None, _string_list)
_string_list.begin = new_instancemethod(_common._string_list_begin, None, _string_list)
_string_list.end = new_instancemethod(_common._string_list_end, None, _string_list)
_string_list.rbegin = new_instancemethod(_common._string_list_rbegin, None, _string_list)
_string_list.rend = new_instancemethod(_common._string_list_rend, None, _string_list)
_string_list.clear = new_instancemethod(_common._string_list_clear, None, _string_list)
_string_list.get_allocator = new_instancemethod(_common._string_list_get_allocator, None, _string_list)
_string_list.pop_back = new_instancemethod(_common._string_list_pop_back, None, _string_list)
_string_list.erase = new_instancemethod(_common._string_list_erase, None, _string_list)
_string_list.push_back = new_instancemethod(_common._string_list_push_back, None, _string_list)
_string_list.front = new_instancemethod(_common._string_list_front, None, _string_list)
_string_list.back = new_instancemethod(_common._string_list_back, None, _string_list)
_string_list.assign = new_instancemethod(_common._string_list_assign, None, _string_list)
_string_list.resize = new_instancemethod(_common._string_list_resize, None, _string_list)
_string_list.insert = new_instancemethod(_common._string_list_insert, None, _string_list)
_string_list.reserve = new_instancemethod(_common._string_list_reserve, None, _string_list)
_string_list.capacity = new_instancemethod(_common._string_list_capacity, None, _string_list)
_string_list_swigregister = _common._string_list_swigregister
_string_list_swigregister(_string_list)



