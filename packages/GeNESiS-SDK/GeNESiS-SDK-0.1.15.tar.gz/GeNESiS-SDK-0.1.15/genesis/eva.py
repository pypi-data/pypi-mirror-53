# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _eva.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_eva')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_eva')
    _eva = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_eva', [dirname(__file__)])
        except ImportError:
            import _eva
            return _eva
        try:
            _mod = imp.load_module('_eva', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _eva = swig_import_helper()
    del swig_import_helper
else:
    import _eva
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _eva.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_eva.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_eva.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_eva.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_eva.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_eva.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_eva.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_eva.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_eva.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_eva.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_eva.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_eva.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_eva.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_eva.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_eva.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_eva.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_eva.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _eva.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _eva.SHARED_PTR_DISOWN
BOOST_LOG_DYN_LINK = _eva.BOOST_LOG_DYN_LINK
class Communication(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    get = staticmethod(_eva.Communication_get)
    __swig_destroy__ = _eva.delete_Communication
    mpiSupport = _swig_property(_eva.Communication_mpiSupport_get, _eva.Communication_mpiSupport_set)
    rank = _swig_property(_eva.Communication_rank_get, _eva.Communication_rank_set)
    ranksCount = _swig_property(_eva.Communication_ranksCount_get, _eva.Communication_ranksCount_set)
    hosts = _swig_property(_eva.Communication_hosts_get, _eva.Communication_hosts_set)
Communication.get_p2p_channel = new_instancemethod(_eva.Communication_get_p2p_channel, None, Communication)
Communication.register_p2p_communication = new_instancemethod(_eva.Communication_register_p2p_communication, None, Communication)
Communication.safe_barrier = new_instancemethod(_eva.Communication_safe_barrier, None, Communication)
Communication.update_communicators = new_instancemethod(_eva.Communication_update_communicators, None, Communication)
Communication_swigregister = _eva.Communication_swigregister
Communication_swigregister(Communication)

def Communication_get():
    return _eva.Communication_get()
Communication_get = _eva.Communication_get

LOG_OUTPUT_FILE = _eva.LOG_OUTPUT_FILE
LOG_DEBUG_FILE = _eva.LOG_DEBUG_FILE
DEFAULT_DEBUG_ENABLED = _eva.DEFAULT_DEBUG_ENABLED
LogSeverity_DEBUG = _eva.LogSeverity_DEBUG
LogSeverity_MESSAGE = _eva.LogSeverity_MESSAGE
LogSeverity_WARNING = _eva.LogSeverity_WARNING
LogSeverity_ERROR = _eva.LogSeverity_ERROR
LogSeverity_FATAL = _eva.LogSeverity_FATAL
LogSeverity_EXTERNAL = _eva.LogSeverity_EXTERNAL
LogPriority_LOW = _eva.LogPriority_LOW
LogPriority_MEDIUM = _eva.LogPriority_MEDIUM
LogPriority_HIGH = _eva.LogPriority_HIGH
class Log(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    priority0_lg = _swig_property(_eva.Log_priority0_lg_get, _eva.Log_priority0_lg_set)
    priority1_lg = _swig_property(_eva.Log_priority1_lg_get, _eva.Log_priority1_lg_set)
    priority2_lg = _swig_property(_eva.Log_priority2_lg_get, _eva.Log_priority2_lg_set)
    error_lg = _swig_property(_eva.Log_error_lg_get, _eva.Log_error_lg_set)
    fatal_lg = _swig_property(_eva.Log_fatal_lg_get, _eva.Log_fatal_lg_set)
    output_min_severity = _swig_property(_eva.Log_output_min_severity_get, _eva.Log_output_min_severity_set)
    output_min_priority = _swig_property(_eva.Log_output_min_priority_get, _eva.Log_output_min_priority_set)
    debug_min_severity = _swig_property(_eva.Log_debug_min_severity_get, _eva.Log_debug_min_severity_set)
    debug_min_priority = _swig_property(_eva.Log_debug_min_priority_get, _eva.Log_debug_min_priority_set)
    debug_enabled = _swig_property(_eva.Log_debug_enabled_get, _eva.Log_debug_enabled_set)
    get = staticmethod(_eva.Log_get)
    __swig_destroy__ = _eva.delete_Log
Log.flush = new_instancemethod(_eva.Log_flush, None, Log)
Log_swigregister = _eva.Log_swigregister
Log_swigregister(Log)
cvar = _eva.cvar

def Log_get():
    return _eva.Log_get()
Log_get = _eva.Log_get

class Parameters(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == Parameters:
            _self = None
        else:
            _self = self
        _eva.Parameters_swiginit(self, _eva.new_Parameters(_self, ))
    __swig_destroy__ = _eva.delete_Parameters
    dereference = staticmethod(_eva.Parameters_dereference)
    get_shared = staticmethod(_eva.Parameters_get_shared)
    tree = _swig_property(_eva.Parameters_tree_get, _eva.Parameters_tree_set)
    map = _swig_property(_eva.Parameters_map_get, _eva.Parameters_map_set)
    def __disown__(self):
        self.this.disown()
        _eva.disown_Parameters(self)
        return weakref_proxy(self)
Parameters.load = new_instancemethod(_eva.Parameters_load, None, Parameters)
Parameters.get_values = new_instancemethod(_eva.Parameters_get_values, None, Parameters)
Parameters_swigregister = _eva.Parameters_swigregister
Parameters_swigregister(Parameters)

def Parameters_dereference(sptr):
    return _eva.Parameters_dereference(sptr)
Parameters_dereference = _eva.Parameters_dereference

def Parameters_get_shared(i):
    return _eva.Parameters_get_shared(i)
Parameters_get_shared = _eva.Parameters_get_shared

class Scheme(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.Scheme_swiginit(self, _eva.new_Scheme())
    __swig_destroy__ = _eva.delete_Scheme
    name = _swig_property(_eva.Scheme_name_get, _eva.Scheme_name_set)
Scheme.validate = new_instancemethod(_eva.Scheme_validate, None, Scheme)
Scheme.load = new_instancemethod(_eva.Scheme_load, None, Scheme)
Scheme.filter = new_instancemethod(_eva.Scheme_filter, None, Scheme)
Scheme.include = new_instancemethod(_eva.Scheme_include, None, Scheme)
Scheme.get_rules = new_instancemethod(_eva.Scheme_get_rules, None, Scheme)
Scheme_swigregister = _eva.Scheme_swigregister
Scheme_swigregister(Scheme)
SCHEMES_GROUP = cvar.SCHEMES_GROUP
SCHEMES_BASE = cvar.SCHEMES_BASE
SCHEMES_PARAM = cvar.SCHEMES_PARAM
SCHEMES_CLASS = cvar.SCHEMES_CLASS
SCHEMES_ROOT = cvar.SCHEMES_ROOT
SCHEMES_CAPTION = cvar.SCHEMES_CAPTION
SCHEMES_TYPE = cvar.SCHEMES_TYPE
SCHEMES_DEFAULT = cvar.SCHEMES_DEFAULT
SCHEMES_DESCRIPION = cvar.SCHEMES_DESCRIPION
SCHEMES_TYPE_FILE = cvar.SCHEMES_TYPE_FILE
SCHEMES_TYPE_INT = cvar.SCHEMES_TYPE_INT
SCHEMES_TYPE_FLOAT = cvar.SCHEMES_TYPE_FLOAT
SCHEMES_TYPE_ARRAY = cvar.SCHEMES_TYPE_ARRAY

METADATA_VAR = _eva.METADATA_VAR
GENESIS_LOCATION = _eva.GENESIS_LOCATION
class BaseClass(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _eva.delete_BaseClass
    gen_scheme = staticmethod(_eva.BaseClass_gen_scheme)

    def __init__(self):
        if self.__class__ == BaseClass:
            _self = None
        else:
            _self = self
        _eva.BaseClass_swiginit(self, _eva.new_BaseClass(_self, ))
    def __disown__(self):
        self.this.disown()
        _eva.disown_BaseClass(self)
        return weakref_proxy(self)
BaseClass_swigregister = _eva.BaseClass_swigregister
BaseClass_swigregister(BaseClass)

def BaseClass_gen_scheme(sfile):
    return _eva.BaseClass_gen_scheme(sfile)
BaseClass_gen_scheme = _eva.BaseClass_gen_scheme

class exception_base(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.exception_base_swiginit(self, _eva.new_exception_base())
    __swig_destroy__ = _eva.delete_exception_base
exception_base.what = new_instancemethod(_eva.exception_base_what, None, exception_base)
exception_base_swigregister = _eva.exception_base_swigregister
exception_base_swigregister(exception_base)

class outofdomain_error(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.outofdomain_error_swiginit(self, _eva.new_outofdomain_error())
    __swig_destroy__ = _eva.delete_outofdomain_error
outofdomain_error.what = new_instancemethod(_eva.outofdomain_error_what, None, outofdomain_error)
outofdomain_error_swigregister = _eva.outofdomain_error_swigregister
outofdomain_error_swigregister(outofdomain_error)

class inconsistency_error(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.inconsistency_error_swiginit(self, _eva.new_inconsistency_error())
    __swig_destroy__ = _eva.delete_inconsistency_error
inconsistency_error.what = new_instancemethod(_eva.inconsistency_error_what, None, inconsistency_error)
inconsistency_error_swigregister = _eva.inconsistency_error_swigregister
inconsistency_error_swigregister(inconsistency_error)

class param_value_error(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.param_value_error_swiginit(self, _eva.new_param_value_error())
    __swig_destroy__ = _eva.delete_param_value_error
param_value_error.what = new_instancemethod(_eva.param_value_error_what, None, param_value_error)
param_value_error_swigregister = _eva.param_value_error_swigregister
param_value_error_swigregister(param_value_error)

class status_error(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.status_error_swiginit(self, _eva.new_status_error())
    __swig_destroy__ = _eva.delete_status_error
status_error.what = new_instancemethod(_eva.status_error_what, None, status_error)
status_error_swigregister = _eva.status_error_swigregister
status_error_swigregister(status_error)

class flow_control_error(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.flow_control_error_swiginit(self, _eva.new_flow_control_error())
    __swig_destroy__ = _eva.delete_flow_control_error
flow_control_error.what = new_instancemethod(_eva.flow_control_error_what, None, flow_control_error)
flow_control_error_swigregister = _eva.flow_control_error_swigregister
flow_control_error_swigregister(flow_control_error)

class malformed_record(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.malformed_record_swiginit(self, _eva.new_malformed_record())
    __swig_destroy__ = _eva.delete_malformed_record
malformed_record.what = new_instancemethod(_eva.malformed_record_what, None, malformed_record)
malformed_record_swigregister = _eva.malformed_record_swigregister
malformed_record_swigregister(malformed_record)

class unsupported_feature(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.unsupported_feature_swiginit(self, _eva.new_unsupported_feature())
    __swig_destroy__ = _eva.delete_unsupported_feature
unsupported_feature.what = new_instancemethod(_eva.unsupported_feature_what, None, unsupported_feature)
unsupported_feature_swigregister = _eva.unsupported_feature_swigregister
unsupported_feature_swigregister(unsupported_feature)

class factory_unknown_type(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.factory_unknown_type_swiginit(self, _eva.new_factory_unknown_type())
    __swig_destroy__ = _eva.delete_factory_unknown_type
factory_unknown_type.what = new_instancemethod(_eva.factory_unknown_type_what, None, factory_unknown_type)
factory_unknown_type_swigregister = _eva.factory_unknown_type_swigregister
factory_unknown_type_swigregister(factory_unknown_type)

class wrong_behaviour(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.wrong_behaviour_swiginit(self, _eva.new_wrong_behaviour())
    __swig_destroy__ = _eva.delete_wrong_behaviour
wrong_behaviour.what = new_instancemethod(_eva.wrong_behaviour_what, None, wrong_behaviour)
wrong_behaviour_swigregister = _eva.wrong_behaviour_swigregister
wrong_behaviour_swigregister(wrong_behaviour)

class unexpected_instance_type(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.unexpected_instance_type_swiginit(self, _eva.new_unexpected_instance_type())
    __swig_destroy__ = _eva.delete_unexpected_instance_type
unexpected_instance_type.what = new_instancemethod(_eva.unexpected_instance_type_what, None, unexpected_instance_type)
unexpected_instance_type_swigregister = _eva.unexpected_instance_type_swigregister
unexpected_instance_type_swigregister(unexpected_instance_type)

class unprovided_artifact(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.unprovided_artifact_swiginit(self, _eva.new_unprovided_artifact())
    __swig_destroy__ = _eva.delete_unprovided_artifact
unprovided_artifact.what = new_instancemethod(_eva.unprovided_artifact_what, None, unprovided_artifact)
unprovided_artifact_swigregister = _eva.unprovided_artifact_swigregister
unprovided_artifact_swigregister(unprovided_artifact)

class incomplete_metadata(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.incomplete_metadata_swiginit(self, _eva.new_incomplete_metadata())
    __swig_destroy__ = _eva.delete_incomplete_metadata
incomplete_metadata.what = new_instancemethod(_eva.incomplete_metadata_what, None, incomplete_metadata)
incomplete_metadata_swigregister = _eva.incomplete_metadata_swigregister
incomplete_metadata_swigregister(incomplete_metadata)

class internal_error(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.internal_error_swiginit(self, _eva.new_internal_error())
    __swig_destroy__ = _eva.delete_internal_error
internal_error.what = new_instancemethod(_eva.internal_error_what, None, internal_error)
internal_error_swigregister = _eva.internal_error_swigregister
internal_error_swigregister(internal_error)

class incompatible_solver(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.incompatible_solver_swiginit(self, _eva.new_incompatible_solver())
    __swig_destroy__ = _eva.delete_incompatible_solver
incompatible_solver.what = new_instancemethod(_eva.incompatible_solver_what, None, incompatible_solver)
incompatible_solver_swigregister = _eva.incompatible_solver_swigregister
incompatible_solver_swigregister(incompatible_solver)

class invalid_mpi_thread_support(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.invalid_mpi_thread_support_swiginit(self, _eva.new_invalid_mpi_thread_support())
    __swig_destroy__ = _eva.delete_invalid_mpi_thread_support
invalid_mpi_thread_support.what = new_instancemethod(_eva.invalid_mpi_thread_support_what, None, invalid_mpi_thread_support)
invalid_mpi_thread_support_swigregister = _eva.invalid_mpi_thread_support_swigregister
invalid_mpi_thread_support_swigregister(invalid_mpi_thread_support)

class unsupported_multi_threading(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.unsupported_multi_threading_swiginit(self, _eva.new_unsupported_multi_threading())
    __swig_destroy__ = _eva.delete_unsupported_multi_threading
unsupported_multi_threading.what = new_instancemethod(_eva.unsupported_multi_threading_what, None, unsupported_multi_threading)
unsupported_multi_threading_swigregister = _eva.unsupported_multi_threading_swigregister
unsupported_multi_threading_swigregister(unsupported_multi_threading)

class parameters_validation_failed(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.parameters_validation_failed_swiginit(self, _eva.new_parameters_validation_failed())
    __swig_destroy__ = _eva.delete_parameters_validation_failed
parameters_validation_failed.what = new_instancemethod(_eva.parameters_validation_failed_what, None, parameters_validation_failed)
parameters_validation_failed_swigregister = _eva.parameters_validation_failed_swigregister
parameters_validation_failed_swigregister(parameters_validation_failed)

class communication_error(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.communication_error_swiginit(self, _eva.new_communication_error())
    __swig_destroy__ = _eva.delete_communication_error
communication_error.what = new_instancemethod(_eva.communication_error_what, None, communication_error)
communication_error_swigregister = _eva.communication_error_swigregister
communication_error_swigregister(communication_error)

class io_error(exception_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.io_error_swiginit(self, _eva.new_io_error())
    __swig_destroy__ = _eva.delete_io_error
io_error.what = new_instancemethod(_eva.io_error_what, None, io_error)
io_error_swigregister = _eva.io_error_swigregister
io_error_swigregister(io_error)

class channel_open_error(io_error):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.channel_open_error_swiginit(self, _eva.new_channel_open_error())
    __swig_destroy__ = _eva.delete_channel_open_error
channel_open_error.what = new_instancemethod(_eva.channel_open_error_what, None, channel_open_error)
channel_open_error_swigregister = _eva.channel_open_error_swigregister
channel_open_error_swigregister(channel_open_error)

class channel_write_error(io_error):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.channel_write_error_swiginit(self, _eva.new_channel_write_error())
    __swig_destroy__ = _eva.delete_channel_write_error
channel_write_error.what = new_instancemethod(_eva.channel_write_error_what, None, channel_write_error)
channel_write_error_swigregister = _eva.channel_write_error_swigregister
channel_write_error_swigregister(channel_write_error)

class channel_closed_error(io_error):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.channel_closed_error_swiginit(self, _eva.new_channel_closed_error())
    __swig_destroy__ = _eva.delete_channel_closed_error
channel_closed_error.what = new_instancemethod(_eva.channel_closed_error_what, None, channel_closed_error)
channel_closed_error_swigregister = _eva.channel_closed_error_swigregister
channel_closed_error_swigregister(channel_closed_error)

class channel_closing_error(io_error):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.channel_closing_error_swiginit(self, _eva.new_channel_closing_error())
    __swig_destroy__ = _eva.delete_channel_closing_error
channel_closing_error.what = new_instancemethod(_eva.channel_closing_error_what, None, channel_closing_error)
channel_closing_error_swigregister = _eva.channel_closing_error_swigregister
channel_closing_error_swigregister(channel_closing_error)

class file_open_error(io_error):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.file_open_error_swiginit(self, _eva.new_file_open_error())
    __swig_destroy__ = _eva.delete_file_open_error
file_open_error.what = new_instancemethod(_eva.file_open_error_what, None, file_open_error)
file_open_error_swigregister = _eva.file_open_error_swigregister
file_open_error_swigregister(file_open_error)

class file_format_error(io_error):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.file_format_error_swiginit(self, _eva.new_file_format_error())
    __swig_destroy__ = _eva.delete_file_format_error
file_format_error.what = new_instancemethod(_eva.file_format_error_what, None, file_format_error)
file_format_error_swigregister = _eva.file_format_error_swigregister
file_format_error_swigregister(file_format_error)

class file_read_error(io_error):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.file_read_error_swiginit(self, _eva.new_file_read_error())
    __swig_destroy__ = _eva.delete_file_read_error
file_read_error.what = new_instancemethod(_eva.file_read_error_what, None, file_read_error)
file_read_error_swigregister = _eva.file_read_error_swigregister
file_read_error_swigregister(file_read_error)

class file_write_error(io_error):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _eva.file_write_error_swiginit(self, _eva.new_file_write_error())
    __swig_destroy__ = _eva.delete_file_write_error
file_write_error.what = new_instancemethod(_eva.file_write_error_what, None, file_write_error)
file_write_error_swigregister = _eva.file_write_error_swigregister
file_write_error_swigregister(file_write_error)

class CommonTimer(BaseClass):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonTimer:
            _self = None
        else:
            _self = self
        _eva.CommonTimer_swiginit(self, _eva.new_CommonTimer(_self, ))
    __swig_destroy__ = _eva.delete_CommonTimer
    get_shared = staticmethod(_eva.CommonTimer_get_shared)
    type = _swig_property(_eva.CommonTimer_type_get, _eva.CommonTimer_type_set)
    unwrap = staticmethod(_eva.CommonTimer_unwrap)
    dereference = staticmethod(_eva.CommonTimer_dereference)
    get = staticmethod(_eva.CommonTimer_get)
    name = _swig_property(_eva.CommonTimer_name_get, _eva.CommonTimer_name_set)
    gen_scheme = staticmethod(_eva.CommonTimer_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _eva.disown_CommonTimer(self)
        return weakref_proxy(self)
CommonTimer.get_classname = new_instancemethod(_eva.CommonTimer_get_classname, None, CommonTimer)
CommonTimer.get_metadata_path = new_instancemethod(_eva.CommonTimer_get_metadata_path, None, CommonTimer)
CommonTimer.shared_from_this = new_instancemethod(_eva.CommonTimer_shared_from_this, None, CommonTimer)
CommonTimer.get_uuid = new_instancemethod(_eva.CommonTimer_get_uuid, None, CommonTimer)
CommonTimer.get_scheme = new_instancemethod(_eva.CommonTimer_get_scheme, None, CommonTimer)
CommonTimer_swigregister = _eva.CommonTimer_swigregister
CommonTimer_swigregister(CommonTimer)

def CommonTimer_get_shared(i):
    return _eva.CommonTimer_get_shared(i)
CommonTimer_get_shared = _eva.CommonTimer_get_shared

def CommonTimer_unwrap(ptr):
    return _eva.CommonTimer_unwrap(ptr)
CommonTimer_unwrap = _eva.CommonTimer_unwrap

def CommonTimer_dereference(sptr):
    return _eva.CommonTimer_dereference(sptr)
CommonTimer_dereference = _eva.CommonTimer_dereference

def CommonTimer_get(*args):
    return _eva.CommonTimer_get(*args)
CommonTimer_get = _eva.CommonTimer_get

def CommonTimer_gen_scheme(sfile):
    return _eva.CommonTimer_gen_scheme(sfile)
CommonTimer_gen_scheme = _eva.CommonTimer_gen_scheme

class Timer(CommonTimer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, name, report=True):
        if self.__class__ == Timer:
            _self = None
        else:
            _self = self
        _eva.Timer_swiginit(self, _eva.new_Timer(_self, name, report))
    __swig_destroy__ = _eva.delete_Timer
    def __disown__(self):
        self.this.disown()
        _eva.disown_Timer(self)
        return weakref_proxy(self)
Timer.elapsed = new_instancemethod(_eva.Timer_elapsed, None, Timer)
Timer.stop = new_instancemethod(_eva.Timer_stop, None, Timer)
Timer.start = new_instancemethod(_eva.Timer_start, None, Timer)
Timer.resume = new_instancemethod(_eva.Timer_resume, None, Timer)
Timer_swigregister = _eva.Timer_swigregister
Timer_swigregister(Timer)

class _string_list(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _eva._string_list_swiginit(self, _eva.new__string_list(*args))
    __swig_destroy__ = _eva.delete__string_list
_string_list.iterator = new_instancemethod(_eva._string_list_iterator, None, _string_list)
_string_list.__nonzero__ = new_instancemethod(_eva._string_list___nonzero__, None, _string_list)
_string_list.__bool__ = new_instancemethod(_eva._string_list___bool__, None, _string_list)
_string_list.__len__ = new_instancemethod(_eva._string_list___len__, None, _string_list)
_string_list.__getslice__ = new_instancemethod(_eva._string_list___getslice__, None, _string_list)
_string_list.__setslice__ = new_instancemethod(_eva._string_list___setslice__, None, _string_list)
_string_list.__delslice__ = new_instancemethod(_eva._string_list___delslice__, None, _string_list)
_string_list.__delitem__ = new_instancemethod(_eva._string_list___delitem__, None, _string_list)
_string_list.__getitem__ = new_instancemethod(_eva._string_list___getitem__, None, _string_list)
_string_list.__setitem__ = new_instancemethod(_eva._string_list___setitem__, None, _string_list)
_string_list.pop = new_instancemethod(_eva._string_list_pop, None, _string_list)
_string_list.append = new_instancemethod(_eva._string_list_append, None, _string_list)
_string_list.empty = new_instancemethod(_eva._string_list_empty, None, _string_list)
_string_list.size = new_instancemethod(_eva._string_list_size, None, _string_list)
_string_list.swap = new_instancemethod(_eva._string_list_swap, None, _string_list)
_string_list.begin = new_instancemethod(_eva._string_list_begin, None, _string_list)
_string_list.end = new_instancemethod(_eva._string_list_end, None, _string_list)
_string_list.rbegin = new_instancemethod(_eva._string_list_rbegin, None, _string_list)
_string_list.rend = new_instancemethod(_eva._string_list_rend, None, _string_list)
_string_list.clear = new_instancemethod(_eva._string_list_clear, None, _string_list)
_string_list.get_allocator = new_instancemethod(_eva._string_list_get_allocator, None, _string_list)
_string_list.pop_back = new_instancemethod(_eva._string_list_pop_back, None, _string_list)
_string_list.erase = new_instancemethod(_eva._string_list_erase, None, _string_list)
_string_list.push_back = new_instancemethod(_eva._string_list_push_back, None, _string_list)
_string_list.front = new_instancemethod(_eva._string_list_front, None, _string_list)
_string_list.back = new_instancemethod(_eva._string_list_back, None, _string_list)
_string_list.assign = new_instancemethod(_eva._string_list_assign, None, _string_list)
_string_list.resize = new_instancemethod(_eva._string_list_resize, None, _string_list)
_string_list.insert = new_instancemethod(_eva._string_list_insert, None, _string_list)
_string_list.reserve = new_instancemethod(_eva._string_list_reserve, None, _string_list)
_string_list.capacity = new_instancemethod(_eva._string_list_capacity, None, _string_list)
_string_list_swigregister = _eva._string_list_swigregister
_string_list_swigregister(_string_list)

import genesis.cain
class CommonSolver(BaseClass):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonSolver:
            _self = None
        else:
            _self = self
        _eva.CommonSolver_swiginit(self, _eva.new_CommonSolver(_self, ))
    __swig_destroy__ = _eva.delete_CommonSolver
    get_shared = staticmethod(_eva.CommonSolver_get_shared)
    type = _swig_property(_eva.CommonSolver_type_get, _eva.CommonSolver_type_set)
    unwrap = staticmethod(_eva.CommonSolver_unwrap)
    dereference = staticmethod(_eva.CommonSolver_dereference)
    get = staticmethod(_eva.CommonSolver_get)
    name = _swig_property(_eva.CommonSolver_name_get, _eva.CommonSolver_name_set)
    gen_scheme = staticmethod(_eva.CommonSolver_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _eva.disown_CommonSolver(self)
        return weakref_proxy(self)
CommonSolver.get_classname = new_instancemethod(_eva.CommonSolver_get_classname, None, CommonSolver)
CommonSolver.get_metadata_path = new_instancemethod(_eva.CommonSolver_get_metadata_path, None, CommonSolver)
CommonSolver.shared_from_this = new_instancemethod(_eva.CommonSolver_shared_from_this, None, CommonSolver)
CommonSolver.get_uuid = new_instancemethod(_eva.CommonSolver_get_uuid, None, CommonSolver)
CommonSolver.get_scheme = new_instancemethod(_eva.CommonSolver_get_scheme, None, CommonSolver)
CommonSolver_swigregister = _eva.CommonSolver_swigregister
CommonSolver_swigregister(CommonSolver)

def CommonSolver_get_shared(i):
    return _eva.CommonSolver_get_shared(i)
CommonSolver_get_shared = _eva.CommonSolver_get_shared

def CommonSolver_unwrap(ptr):
    return _eva.CommonSolver_unwrap(ptr)
CommonSolver_unwrap = _eva.CommonSolver_unwrap

def CommonSolver_dereference(sptr):
    return _eva.CommonSolver_dereference(sptr)
CommonSolver_dereference = _eva.CommonSolver_dereference

def CommonSolver_get(*args):
    return _eva.CommonSolver_get(*args)
CommonSolver_get = _eva.CommonSolver_get

def CommonSolver_gen_scheme(sfile):
    return _eva.CommonSolver_gen_scheme(sfile)
CommonSolver_gen_scheme = _eva.CommonSolver_gen_scheme

class Solver(CommonSolver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == Solver:
            _self = None
        else:
            _self = self
        _eva.Solver_swiginit(self, _eva.new_Solver(_self, *args))
    __swig_destroy__ = _eva.delete_Solver
    mesh = _swig_property(_eva.Solver_mesh_get, _eva.Solver_mesh_set)
    archs = _swig_property(_eva.Solver_archs_get, _eva.Solver_archs_set)
    domain = _swig_property(_eva.Solver_domain_get, _eva.Solver_domain_set)
    device = _swig_property(_eva.Solver_device_get, _eva.Solver_device_set)
    neighbors = _swig_property(_eva.Solver_neighbors_get, _eva.Solver_neighbors_set)
    timer = _swig_property(_eva.Solver_timer_get, _eva.Solver_timer_set)
    def __disown__(self):
        self.this.disown()
        _eva.disown_Solver(self)
        return weakref_proxy(self)
Solver.throw_workflow_exception = new_instancemethod(_eva.Solver_throw_workflow_exception, None, Solver)
Solver.config_base = new_instancemethod(_eva.Solver_config_base, None, Solver)
Solver.prepare = new_instancemethod(_eva.Solver_prepare, None, Solver)
Solver.config = new_instancemethod(_eva.Solver_config, None, Solver)
Solver.process = new_instancemethod(_eva.Solver_process, None, Solver)
Solver.get_results = new_instancemethod(_eva.Solver_get_results, None, Solver)
Solver.free_results = new_instancemethod(_eva.Solver_free_results, None, Solver)
Solver.clone = new_instancemethod(_eva.Solver_clone, None, Solver)
Solver.add_architecture = new_instancemethod(_eva.Solver_add_architecture, None, Solver)
Solver.build_comms = new_instancemethod(_eva.Solver_build_comms, None, Solver)
Solver._pack_data = new_instancemethod(_eva.Solver__pack_data, None, Solver)
Solver._unpack_data = new_instancemethod(_eva.Solver__unpack_data, None, Solver)
Solver_swigregister = _eva.Solver_swigregister
Solver_swigregister(Solver)

class CommonEVA(BaseClass):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonEVA:
            _self = None
        else:
            _self = self
        _eva.CommonEVA_swiginit(self, _eva.new_CommonEVA(_self, ))
    __swig_destroy__ = _eva.delete_CommonEVA
    get_shared = staticmethod(_eva.CommonEVA_get_shared)
    type = _swig_property(_eva.CommonEVA_type_get, _eva.CommonEVA_type_set)
    unwrap = staticmethod(_eva.CommonEVA_unwrap)
    dereference = staticmethod(_eva.CommonEVA_dereference)
    get = staticmethod(_eva.CommonEVA_get)
    name = _swig_property(_eva.CommonEVA_name_get, _eva.CommonEVA_name_set)
    gen_scheme = staticmethod(_eva.CommonEVA_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _eva.disown_CommonEVA(self)
        return weakref_proxy(self)
CommonEVA.get_classname = new_instancemethod(_eva.CommonEVA_get_classname, None, CommonEVA)
CommonEVA.get_metadata_path = new_instancemethod(_eva.CommonEVA_get_metadata_path, None, CommonEVA)
CommonEVA.shared_from_this = new_instancemethod(_eva.CommonEVA_shared_from_this, None, CommonEVA)
CommonEVA.get_uuid = new_instancemethod(_eva.CommonEVA_get_uuid, None, CommonEVA)
CommonEVA.get_scheme = new_instancemethod(_eva.CommonEVA_get_scheme, None, CommonEVA)
CommonEVA_swigregister = _eva.CommonEVA_swigregister
CommonEVA_swigregister(CommonEVA)

def CommonEVA_get_shared(i):
    return _eva.CommonEVA_get_shared(i)
CommonEVA_get_shared = _eva.CommonEVA_get_shared

def CommonEVA_unwrap(ptr):
    return _eva.CommonEVA_unwrap(ptr)
CommonEVA_unwrap = _eva.CommonEVA_unwrap

def CommonEVA_dereference(sptr):
    return _eva.CommonEVA_dereference(sptr)
CommonEVA_dereference = _eva.CommonEVA_dereference

def CommonEVA_get(*args):
    return _eva.CommonEVA_get(*args)
CommonEVA_get = _eva.CommonEVA_get

def CommonEVA_gen_scheme(sfile):
    return _eva.CommonEVA_gen_scheme(sfile)
CommonEVA_gen_scheme = _eva.CommonEVA_gen_scheme


   # Import the common module
from genesis import eva
import builtins
import json

builtins.orig_print = builtins.print

# Custom print to decorate the user message
def custom_print(*args, **kwargs):

# Get the arguments' separator
  sep = kwargs.get("sep") if ("sep" in kwargs) else " "

# Look for runtime error 
  error = False
  for a in args:
    if( type(a) == RuntimeError ):
      error = True
      pass

# Print the formated GeNESiS like message
  eva.EVA.python_print(sep.join(str(a) for a in args), error)

# Overwrite the print method  
builtins.print = custom_print   

class CommonMultiSolver(Solver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonMultiSolver:
            _self = None
        else:
            _self = self
        _eva.CommonMultiSolver_swiginit(self, _eva.new_CommonMultiSolver(_self, ))
    __swig_destroy__ = _eva.delete_CommonMultiSolver
    get_shared = staticmethod(_eva.CommonMultiSolver_get_shared)
    type = _swig_property(_eva.CommonMultiSolver_type_get, _eva.CommonMultiSolver_type_set)
    unwrap = staticmethod(_eva.CommonMultiSolver_unwrap)
    dereference = staticmethod(_eva.CommonMultiSolver_dereference)
    get = staticmethod(_eva.CommonMultiSolver_get)
    name = _swig_property(_eva.CommonMultiSolver_name_get, _eva.CommonMultiSolver_name_set)
    gen_scheme = staticmethod(_eva.CommonMultiSolver_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _eva.disown_CommonMultiSolver(self)
        return weakref_proxy(self)
CommonMultiSolver.get_classname = new_instancemethod(_eva.CommonMultiSolver_get_classname, None, CommonMultiSolver)
CommonMultiSolver.get_metadata_path = new_instancemethod(_eva.CommonMultiSolver_get_metadata_path, None, CommonMultiSolver)
CommonMultiSolver.shared_from_this = new_instancemethod(_eva.CommonMultiSolver_shared_from_this, None, CommonMultiSolver)
CommonMultiSolver.get_uuid = new_instancemethod(_eva.CommonMultiSolver_get_uuid, None, CommonMultiSolver)
CommonMultiSolver.get_scheme = new_instancemethod(_eva.CommonMultiSolver_get_scheme, None, CommonMultiSolver)
CommonMultiSolver.build_comms = new_instancemethod(_eva.CommonMultiSolver_build_comms, None, CommonMultiSolver)
CommonMultiSolver_swigregister = _eva.CommonMultiSolver_swigregister
CommonMultiSolver_swigregister(CommonMultiSolver)

def CommonMultiSolver_get_shared(i):
    return _eva.CommonMultiSolver_get_shared(i)
CommonMultiSolver_get_shared = _eva.CommonMultiSolver_get_shared

def CommonMultiSolver_unwrap(ptr):
    return _eva.CommonMultiSolver_unwrap(ptr)
CommonMultiSolver_unwrap = _eva.CommonMultiSolver_unwrap

def CommonMultiSolver_dereference(sptr):
    return _eva.CommonMultiSolver_dereference(sptr)
CommonMultiSolver_dereference = _eva.CommonMultiSolver_dereference

def CommonMultiSolver_get(*args):
    return _eva.CommonMultiSolver_get(*args)
CommonMultiSolver_get = _eva.CommonMultiSolver_get

def CommonMultiSolver_gen_scheme(sfile):
    return _eva.CommonMultiSolver_gen_scheme(sfile)
CommonMultiSolver_gen_scheme = _eva.CommonMultiSolver_gen_scheme

class MultiSolver(CommonMultiSolver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == MultiSolver:
            _self = None
        else:
            _self = self
        _eva.MultiSolver_swiginit(self, _eva.new_MultiSolver(_self, ))
    __swig_destroy__ = _eva.delete_MultiSolver
    def __disown__(self):
        self.this.disown()
        _eva.disown_MultiSolver(self)
        return weakref_proxy(self)
MultiSolver.add_solver = new_instancemethod(_eva.MultiSolver_add_solver, None, MultiSolver)
MultiSolver.clone = new_instancemethod(_eva.MultiSolver_clone, None, MultiSolver)
MultiSolver.prepare = new_instancemethod(_eva.MultiSolver_prepare, None, MultiSolver)
MultiSolver.config_base = new_instancemethod(_eva.MultiSolver_config_base, None, MultiSolver)
MultiSolver.finalize = new_instancemethod(_eva.MultiSolver_finalize, None, MultiSolver)
MultiSolver.build = new_instancemethod(_eva.MultiSolver_build, None, MultiSolver)
MultiSolver.build_comms = new_instancemethod(_eva.MultiSolver_build_comms, None, MultiSolver)
MultiSolver_swigregister = _eva.MultiSolver_swigregister
MultiSolver_swigregister(MultiSolver)

class CommonMatrixFreeSolver(Solver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonMatrixFreeSolver:
            _self = None
        else:
            _self = self
        _eva.CommonMatrixFreeSolver_swiginit(self, _eva.new_CommonMatrixFreeSolver(_self, ))
    __swig_destroy__ = _eva.delete_CommonMatrixFreeSolver
    get_shared = staticmethod(_eva.CommonMatrixFreeSolver_get_shared)
    type = _swig_property(_eva.CommonMatrixFreeSolver_type_get, _eva.CommonMatrixFreeSolver_type_set)
    unwrap = staticmethod(_eva.CommonMatrixFreeSolver_unwrap)
    dereference = staticmethod(_eva.CommonMatrixFreeSolver_dereference)
    get = staticmethod(_eva.CommonMatrixFreeSolver_get)
    name = _swig_property(_eva.CommonMatrixFreeSolver_name_get, _eva.CommonMatrixFreeSolver_name_set)
    gen_scheme = staticmethod(_eva.CommonMatrixFreeSolver_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _eva.disown_CommonMatrixFreeSolver(self)
        return weakref_proxy(self)
CommonMatrixFreeSolver.get_classname = new_instancemethod(_eva.CommonMatrixFreeSolver_get_classname, None, CommonMatrixFreeSolver)
CommonMatrixFreeSolver.get_metadata_path = new_instancemethod(_eva.CommonMatrixFreeSolver_get_metadata_path, None, CommonMatrixFreeSolver)
CommonMatrixFreeSolver.shared_from_this = new_instancemethod(_eva.CommonMatrixFreeSolver_shared_from_this, None, CommonMatrixFreeSolver)
CommonMatrixFreeSolver.get_uuid = new_instancemethod(_eva.CommonMatrixFreeSolver_get_uuid, None, CommonMatrixFreeSolver)
CommonMatrixFreeSolver.get_scheme = new_instancemethod(_eva.CommonMatrixFreeSolver_get_scheme, None, CommonMatrixFreeSolver)
CommonMatrixFreeSolver.build_comms = new_instancemethod(_eva.CommonMatrixFreeSolver_build_comms, None, CommonMatrixFreeSolver)
CommonMatrixFreeSolver_swigregister = _eva.CommonMatrixFreeSolver_swigregister
CommonMatrixFreeSolver_swigregister(CommonMatrixFreeSolver)

def CommonMatrixFreeSolver_get_shared(i):
    return _eva.CommonMatrixFreeSolver_get_shared(i)
CommonMatrixFreeSolver_get_shared = _eva.CommonMatrixFreeSolver_get_shared

def CommonMatrixFreeSolver_unwrap(ptr):
    return _eva.CommonMatrixFreeSolver_unwrap(ptr)
CommonMatrixFreeSolver_unwrap = _eva.CommonMatrixFreeSolver_unwrap

def CommonMatrixFreeSolver_dereference(sptr):
    return _eva.CommonMatrixFreeSolver_dereference(sptr)
CommonMatrixFreeSolver_dereference = _eva.CommonMatrixFreeSolver_dereference

def CommonMatrixFreeSolver_get(*args):
    return _eva.CommonMatrixFreeSolver_get(*args)
CommonMatrixFreeSolver_get = _eva.CommonMatrixFreeSolver_get

def CommonMatrixFreeSolver_gen_scheme(sfile):
    return _eva.CommonMatrixFreeSolver_gen_scheme(sfile)
CommonMatrixFreeSolver_gen_scheme = _eva.CommonMatrixFreeSolver_gen_scheme

class CommonMatrixBasedSolver(Solver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonMatrixBasedSolver:
            _self = None
        else:
            _self = self
        _eva.CommonMatrixBasedSolver_swiginit(self, _eva.new_CommonMatrixBasedSolver(_self, ))
    __swig_destroy__ = _eva.delete_CommonMatrixBasedSolver
    get_shared = staticmethod(_eva.CommonMatrixBasedSolver_get_shared)
    type = _swig_property(_eva.CommonMatrixBasedSolver_type_get, _eva.CommonMatrixBasedSolver_type_set)
    unwrap = staticmethod(_eva.CommonMatrixBasedSolver_unwrap)
    dereference = staticmethod(_eva.CommonMatrixBasedSolver_dereference)
    get = staticmethod(_eva.CommonMatrixBasedSolver_get)
    name = _swig_property(_eva.CommonMatrixBasedSolver_name_get, _eva.CommonMatrixBasedSolver_name_set)
    gen_scheme = staticmethod(_eva.CommonMatrixBasedSolver_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _eva.disown_CommonMatrixBasedSolver(self)
        return weakref_proxy(self)
CommonMatrixBasedSolver.get_classname = new_instancemethod(_eva.CommonMatrixBasedSolver_get_classname, None, CommonMatrixBasedSolver)
CommonMatrixBasedSolver.get_metadata_path = new_instancemethod(_eva.CommonMatrixBasedSolver_get_metadata_path, None, CommonMatrixBasedSolver)
CommonMatrixBasedSolver.shared_from_this = new_instancemethod(_eva.CommonMatrixBasedSolver_shared_from_this, None, CommonMatrixBasedSolver)
CommonMatrixBasedSolver.get_uuid = new_instancemethod(_eva.CommonMatrixBasedSolver_get_uuid, None, CommonMatrixBasedSolver)
CommonMatrixBasedSolver.get_scheme = new_instancemethod(_eva.CommonMatrixBasedSolver_get_scheme, None, CommonMatrixBasedSolver)
CommonMatrixBasedSolver.build_comms = new_instancemethod(_eva.CommonMatrixBasedSolver_build_comms, None, CommonMatrixBasedSolver)
CommonMatrixBasedSolver_swigregister = _eva.CommonMatrixBasedSolver_swigregister
CommonMatrixBasedSolver_swigregister(CommonMatrixBasedSolver)

def CommonMatrixBasedSolver_get_shared(i):
    return _eva.CommonMatrixBasedSolver_get_shared(i)
CommonMatrixBasedSolver_get_shared = _eva.CommonMatrixBasedSolver_get_shared

def CommonMatrixBasedSolver_unwrap(ptr):
    return _eva.CommonMatrixBasedSolver_unwrap(ptr)
CommonMatrixBasedSolver_unwrap = _eva.CommonMatrixBasedSolver_unwrap

def CommonMatrixBasedSolver_dereference(sptr):
    return _eva.CommonMatrixBasedSolver_dereference(sptr)
CommonMatrixBasedSolver_dereference = _eva.CommonMatrixBasedSolver_dereference

def CommonMatrixBasedSolver_get(*args):
    return _eva.CommonMatrixBasedSolver_get(*args)
CommonMatrixBasedSolver_get = _eva.CommonMatrixBasedSolver_get

def CommonMatrixBasedSolver_gen_scheme(sfile):
    return _eva.CommonMatrixBasedSolver_gen_scheme(sfile)
CommonMatrixBasedSolver_gen_scheme = _eva.CommonMatrixBasedSolver_gen_scheme

class MatrixFreeSolver(CommonMatrixFreeSolver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == MatrixFreeSolver:
            _self = None
        else:
            _self = self
        _eva.MatrixFreeSolver_swiginit(self, _eva.new_MatrixFreeSolver(_self, ))
    __swig_destroy__ = _eva.delete_MatrixFreeSolver
    def __disown__(self):
        self.this.disown()
        _eva.disown_MatrixFreeSolver(self)
        return weakref_proxy(self)
MatrixFreeSolver.prepare = new_instancemethod(_eva.MatrixFreeSolver_prepare, None, MatrixFreeSolver)
MatrixFreeSolver.process = new_instancemethod(_eva.MatrixFreeSolver_process, None, MatrixFreeSolver)
MatrixFreeSolver.start_comm = new_instancemethod(_eva.MatrixFreeSolver_start_comm, None, MatrixFreeSolver)
MatrixFreeSolver.wait_comm = new_instancemethod(_eva.MatrixFreeSolver_wait_comm, None, MatrixFreeSolver)
MatrixFreeSolver.set_architecture = new_instancemethod(_eva.MatrixFreeSolver_set_architecture, None, MatrixFreeSolver)
MatrixFreeSolver.config_base = new_instancemethod(_eva.MatrixFreeSolver_config_base, None, MatrixFreeSolver)
MatrixFreeSolver.initialize = new_instancemethod(_eva.MatrixFreeSolver_initialize, None, MatrixFreeSolver)
MatrixFreeSolver.stop_condition = new_instancemethod(_eva.MatrixFreeSolver_stop_condition, None, MatrixFreeSolver)
MatrixFreeSolver.phase1 = new_instancemethod(_eva.MatrixFreeSolver_phase1, None, MatrixFreeSolver)
MatrixFreeSolver.pack = new_instancemethod(_eva.MatrixFreeSolver_pack, None, MatrixFreeSolver)
MatrixFreeSolver.phase2 = new_instancemethod(_eva.MatrixFreeSolver_phase2, None, MatrixFreeSolver)
MatrixFreeSolver.unpack = new_instancemethod(_eva.MatrixFreeSolver_unpack, None, MatrixFreeSolver)
MatrixFreeSolver.phase3 = new_instancemethod(_eva.MatrixFreeSolver_phase3, None, MatrixFreeSolver)
MatrixFreeSolver.results = new_instancemethod(_eva.MatrixFreeSolver_results, None, MatrixFreeSolver)
MatrixFreeSolver.finalize = new_instancemethod(_eva.MatrixFreeSolver_finalize, None, MatrixFreeSolver)
MatrixFreeSolver.build_comms = new_instancemethod(_eva.MatrixFreeSolver_build_comms, None, MatrixFreeSolver)
MatrixFreeSolver_swigregister = _eva.MatrixFreeSolver_swigregister
MatrixFreeSolver_swigregister(MatrixFreeSolver)

class MatrixBasedSolver(CommonMatrixBasedSolver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == MatrixBasedSolver:
            _self = None
        else:
            _self = self
        _eva.MatrixBasedSolver_swiginit(self, _eva.new_MatrixBasedSolver(_self, ))
    __swig_destroy__ = _eva.delete_MatrixBasedSolver
    def __disown__(self):
        self.this.disown()
        _eva.disown_MatrixBasedSolver(self)
        return weakref_proxy(self)
MatrixBasedSolver.prepare = new_instancemethod(_eva.MatrixBasedSolver_prepare, None, MatrixBasedSolver)
MatrixBasedSolver.process = new_instancemethod(_eva.MatrixBasedSolver_process, None, MatrixBasedSolver)
MatrixBasedSolver.solve = new_instancemethod(_eva.MatrixBasedSolver_solve, None, MatrixBasedSolver)
MatrixBasedSolver.stop_condition = new_instancemethod(_eva.MatrixBasedSolver_stop_condition, None, MatrixBasedSolver)
MatrixBasedSolver.define = new_instancemethod(_eva.MatrixBasedSolver_define, None, MatrixBasedSolver)
MatrixBasedSolver.config_base = new_instancemethod(_eva.MatrixBasedSolver_config_base, None, MatrixBasedSolver)
MatrixBasedSolver.assemble = new_instancemethod(_eva.MatrixBasedSolver_assemble, None, MatrixBasedSolver)
MatrixBasedSolver.results = new_instancemethod(_eva.MatrixBasedSolver_results, None, MatrixBasedSolver)
MatrixBasedSolver.finalize = new_instancemethod(_eva.MatrixBasedSolver_finalize, None, MatrixBasedSolver)
MatrixBasedSolver.build_comms = new_instancemethod(_eva.MatrixBasedSolver_build_comms, None, MatrixBasedSolver)
MatrixBasedSolver_swigregister = _eva.MatrixBasedSolver_swigregister
MatrixBasedSolver_swigregister(MatrixBasedSolver)

class CommonMatrixFreeIOSolver(MatrixFreeSolver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonMatrixFreeIOSolver:
            _self = None
        else:
            _self = self
        _eva.CommonMatrixFreeIOSolver_swiginit(self, _eva.new_CommonMatrixFreeIOSolver(_self, ))
    __swig_destroy__ = _eva.delete_CommonMatrixFreeIOSolver
    get_shared = staticmethod(_eva.CommonMatrixFreeIOSolver_get_shared)
    type = _swig_property(_eva.CommonMatrixFreeIOSolver_type_get, _eva.CommonMatrixFreeIOSolver_type_set)
    unwrap = staticmethod(_eva.CommonMatrixFreeIOSolver_unwrap)
    dereference = staticmethod(_eva.CommonMatrixFreeIOSolver_dereference)
    get = staticmethod(_eva.CommonMatrixFreeIOSolver_get)
    name = _swig_property(_eva.CommonMatrixFreeIOSolver_name_get, _eva.CommonMatrixFreeIOSolver_name_set)
    gen_scheme = staticmethod(_eva.CommonMatrixFreeIOSolver_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _eva.disown_CommonMatrixFreeIOSolver(self)
        return weakref_proxy(self)
CommonMatrixFreeIOSolver.get_classname = new_instancemethod(_eva.CommonMatrixFreeIOSolver_get_classname, None, CommonMatrixFreeIOSolver)
CommonMatrixFreeIOSolver.get_metadata_path = new_instancemethod(_eva.CommonMatrixFreeIOSolver_get_metadata_path, None, CommonMatrixFreeIOSolver)
CommonMatrixFreeIOSolver.shared_from_this = new_instancemethod(_eva.CommonMatrixFreeIOSolver_shared_from_this, None, CommonMatrixFreeIOSolver)
CommonMatrixFreeIOSolver.get_uuid = new_instancemethod(_eva.CommonMatrixFreeIOSolver_get_uuid, None, CommonMatrixFreeIOSolver)
CommonMatrixFreeIOSolver.get_scheme = new_instancemethod(_eva.CommonMatrixFreeIOSolver_get_scheme, None, CommonMatrixFreeIOSolver)
CommonMatrixFreeIOSolver.build_comms = new_instancemethod(_eva.CommonMatrixFreeIOSolver_build_comms, None, CommonMatrixFreeIOSolver)
CommonMatrixFreeIOSolver_swigregister = _eva.CommonMatrixFreeIOSolver_swigregister
CommonMatrixFreeIOSolver_swigregister(CommonMatrixFreeIOSolver)

def CommonMatrixFreeIOSolver_get_shared(i):
    return _eva.CommonMatrixFreeIOSolver_get_shared(i)
CommonMatrixFreeIOSolver_get_shared = _eva.CommonMatrixFreeIOSolver_get_shared

def CommonMatrixFreeIOSolver_unwrap(ptr):
    return _eva.CommonMatrixFreeIOSolver_unwrap(ptr)
CommonMatrixFreeIOSolver_unwrap = _eva.CommonMatrixFreeIOSolver_unwrap

def CommonMatrixFreeIOSolver_dereference(sptr):
    return _eva.CommonMatrixFreeIOSolver_dereference(sptr)
CommonMatrixFreeIOSolver_dereference = _eva.CommonMatrixFreeIOSolver_dereference

def CommonMatrixFreeIOSolver_get(*args):
    return _eva.CommonMatrixFreeIOSolver_get(*args)
CommonMatrixFreeIOSolver_get = _eva.CommonMatrixFreeIOSolver_get

def CommonMatrixFreeIOSolver_gen_scheme(sfile):
    return _eva.CommonMatrixFreeIOSolver_gen_scheme(sfile)
CommonMatrixFreeIOSolver_gen_scheme = _eva.CommonMatrixFreeIOSolver_gen_scheme

class CommonLoopMultiSolver(MultiSolver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonLoopMultiSolver:
            _self = None
        else:
            _self = self
        _eva.CommonLoopMultiSolver_swiginit(self, _eva.new_CommonLoopMultiSolver(_self, ))
    __swig_destroy__ = _eva.delete_CommonLoopMultiSolver
    get_shared = staticmethod(_eva.CommonLoopMultiSolver_get_shared)
    type = _swig_property(_eva.CommonLoopMultiSolver_type_get, _eva.CommonLoopMultiSolver_type_set)
    unwrap = staticmethod(_eva.CommonLoopMultiSolver_unwrap)
    dereference = staticmethod(_eva.CommonLoopMultiSolver_dereference)
    get = staticmethod(_eva.CommonLoopMultiSolver_get)
    name = _swig_property(_eva.CommonLoopMultiSolver_name_get, _eva.CommonLoopMultiSolver_name_set)
    gen_scheme = staticmethod(_eva.CommonLoopMultiSolver_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _eva.disown_CommonLoopMultiSolver(self)
        return weakref_proxy(self)
CommonLoopMultiSolver.get_classname = new_instancemethod(_eva.CommonLoopMultiSolver_get_classname, None, CommonLoopMultiSolver)
CommonLoopMultiSolver.get_metadata_path = new_instancemethod(_eva.CommonLoopMultiSolver_get_metadata_path, None, CommonLoopMultiSolver)
CommonLoopMultiSolver.shared_from_this = new_instancemethod(_eva.CommonLoopMultiSolver_shared_from_this, None, CommonLoopMultiSolver)
CommonLoopMultiSolver.get_uuid = new_instancemethod(_eva.CommonLoopMultiSolver_get_uuid, None, CommonLoopMultiSolver)
CommonLoopMultiSolver.get_scheme = new_instancemethod(_eva.CommonLoopMultiSolver_get_scheme, None, CommonLoopMultiSolver)
CommonLoopMultiSolver.build_comms = new_instancemethod(_eva.CommonLoopMultiSolver_build_comms, None, CommonLoopMultiSolver)
CommonLoopMultiSolver_swigregister = _eva.CommonLoopMultiSolver_swigregister
CommonLoopMultiSolver_swigregister(CommonLoopMultiSolver)

def CommonLoopMultiSolver_get_shared(i):
    return _eva.CommonLoopMultiSolver_get_shared(i)
CommonLoopMultiSolver_get_shared = _eva.CommonLoopMultiSolver_get_shared

def CommonLoopMultiSolver_unwrap(ptr):
    return _eva.CommonLoopMultiSolver_unwrap(ptr)
CommonLoopMultiSolver_unwrap = _eva.CommonLoopMultiSolver_unwrap

def CommonLoopMultiSolver_dereference(sptr):
    return _eva.CommonLoopMultiSolver_dereference(sptr)
CommonLoopMultiSolver_dereference = _eva.CommonLoopMultiSolver_dereference

def CommonLoopMultiSolver_get(*args):
    return _eva.CommonLoopMultiSolver_get(*args)
CommonLoopMultiSolver_get = _eva.CommonLoopMultiSolver_get

def CommonLoopMultiSolver_gen_scheme(sfile):
    return _eva.CommonLoopMultiSolver_gen_scheme(sfile)
CommonLoopMultiSolver_gen_scheme = _eva.CommonLoopMultiSolver_gen_scheme

class CommonChainedMultiSolver(MultiSolver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonChainedMultiSolver:
            _self = None
        else:
            _self = self
        _eva.CommonChainedMultiSolver_swiginit(self, _eva.new_CommonChainedMultiSolver(_self, ))
    __swig_destroy__ = _eva.delete_CommonChainedMultiSolver
    get_shared = staticmethod(_eva.CommonChainedMultiSolver_get_shared)
    type = _swig_property(_eva.CommonChainedMultiSolver_type_get, _eva.CommonChainedMultiSolver_type_set)
    unwrap = staticmethod(_eva.CommonChainedMultiSolver_unwrap)
    dereference = staticmethod(_eva.CommonChainedMultiSolver_dereference)
    get = staticmethod(_eva.CommonChainedMultiSolver_get)
    name = _swig_property(_eva.CommonChainedMultiSolver_name_get, _eva.CommonChainedMultiSolver_name_set)
    gen_scheme = staticmethod(_eva.CommonChainedMultiSolver_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _eva.disown_CommonChainedMultiSolver(self)
        return weakref_proxy(self)
CommonChainedMultiSolver.get_classname = new_instancemethod(_eva.CommonChainedMultiSolver_get_classname, None, CommonChainedMultiSolver)
CommonChainedMultiSolver.get_metadata_path = new_instancemethod(_eva.CommonChainedMultiSolver_get_metadata_path, None, CommonChainedMultiSolver)
CommonChainedMultiSolver.shared_from_this = new_instancemethod(_eva.CommonChainedMultiSolver_shared_from_this, None, CommonChainedMultiSolver)
CommonChainedMultiSolver.get_uuid = new_instancemethod(_eva.CommonChainedMultiSolver_get_uuid, None, CommonChainedMultiSolver)
CommonChainedMultiSolver.get_scheme = new_instancemethod(_eva.CommonChainedMultiSolver_get_scheme, None, CommonChainedMultiSolver)
CommonChainedMultiSolver.build_comms = new_instancemethod(_eva.CommonChainedMultiSolver_build_comms, None, CommonChainedMultiSolver)
CommonChainedMultiSolver_swigregister = _eva.CommonChainedMultiSolver_swigregister
CommonChainedMultiSolver_swigregister(CommonChainedMultiSolver)

def CommonChainedMultiSolver_get_shared(i):
    return _eva.CommonChainedMultiSolver_get_shared(i)
CommonChainedMultiSolver_get_shared = _eva.CommonChainedMultiSolver_get_shared

def CommonChainedMultiSolver_unwrap(ptr):
    return _eva.CommonChainedMultiSolver_unwrap(ptr)
CommonChainedMultiSolver_unwrap = _eva.CommonChainedMultiSolver_unwrap

def CommonChainedMultiSolver_dereference(sptr):
    return _eva.CommonChainedMultiSolver_dereference(sptr)
CommonChainedMultiSolver_dereference = _eva.CommonChainedMultiSolver_dereference

def CommonChainedMultiSolver_get(*args):
    return _eva.CommonChainedMultiSolver_get(*args)
CommonChainedMultiSolver_get = _eva.CommonChainedMultiSolver_get

def CommonChainedMultiSolver_gen_scheme(sfile):
    return _eva.CommonChainedMultiSolver_gen_scheme(sfile)
CommonChainedMultiSolver_gen_scheme = _eva.CommonChainedMultiSolver_gen_scheme

class MatrixFreeIOSolver(CommonMatrixFreeIOSolver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == MatrixFreeIOSolver:
            _self = None
        else:
            _self = self
        _eva.MatrixFreeIOSolver_swiginit(self, _eva.new_MatrixFreeIOSolver(_self, ))
    __swig_destroy__ = _eva.delete_MatrixFreeIOSolver
    def __disown__(self):
        self.this.disown()
        _eva.disown_MatrixFreeIOSolver(self)
        return weakref_proxy(self)
MatrixFreeIOSolver.config_base = new_instancemethod(_eva.MatrixFreeIOSolver_config_base, None, MatrixFreeIOSolver)
MatrixFreeIOSolver.phase2 = new_instancemethod(_eva.MatrixFreeIOSolver_phase2, None, MatrixFreeIOSolver)
MatrixFreeIOSolver.start_IO = new_instancemethod(_eva.MatrixFreeIOSolver_start_IO, None, MatrixFreeIOSolver)
MatrixFreeIOSolver.wait_IO = new_instancemethod(_eva.MatrixFreeIOSolver_wait_IO, None, MatrixFreeIOSolver)
MatrixFreeIOSolver.phase2_1 = new_instancemethod(_eva.MatrixFreeIOSolver_phase2_1, None, MatrixFreeIOSolver)
MatrixFreeIOSolver.pack_IO = new_instancemethod(_eva.MatrixFreeIOSolver_pack_IO, None, MatrixFreeIOSolver)
MatrixFreeIOSolver.phase2_2 = new_instancemethod(_eva.MatrixFreeIOSolver_phase2_2, None, MatrixFreeIOSolver)
MatrixFreeIOSolver.unpack_IO = new_instancemethod(_eva.MatrixFreeIOSolver_unpack_IO, None, MatrixFreeIOSolver)
MatrixFreeIOSolver.phase2_3 = new_instancemethod(_eva.MatrixFreeIOSolver_phase2_3, None, MatrixFreeIOSolver)
MatrixFreeIOSolver.build_comms = new_instancemethod(_eva.MatrixFreeIOSolver_build_comms, None, MatrixFreeIOSolver)
MatrixFreeIOSolver_swigregister = _eva.MatrixFreeIOSolver_swigregister
MatrixFreeIOSolver_swigregister(MatrixFreeIOSolver)

class LoopMultiSolver(CommonLoopMultiSolver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == LoopMultiSolver:
            _self = None
        else:
            _self = self
        _eva.LoopMultiSolver_swiginit(self, _eva.new_LoopMultiSolver(_self, ))
    __swig_destroy__ = _eva.delete_LoopMultiSolver
    def __disown__(self):
        self.this.disown()
        _eva.disown_LoopMultiSolver(self)
        return weakref_proxy(self)
LoopMultiSolver.config_base = new_instancemethod(_eva.LoopMultiSolver_config_base, None, LoopMultiSolver)
LoopMultiSolver.process = new_instancemethod(_eva.LoopMultiSolver_process, None, LoopMultiSolver)
LoopMultiSolver.stop_condition = new_instancemethod(_eva.LoopMultiSolver_stop_condition, None, LoopMultiSolver)
LoopMultiSolver.build_comms = new_instancemethod(_eva.LoopMultiSolver_build_comms, None, LoopMultiSolver)
LoopMultiSolver_swigregister = _eva.LoopMultiSolver_swigregister
LoopMultiSolver_swigregister(LoopMultiSolver)

class ChainedMultiSolver(CommonChainedMultiSolver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ChainedMultiSolver:
            _self = None
        else:
            _self = self
        _eva.ChainedMultiSolver_swiginit(self, _eva.new_ChainedMultiSolver(_self, ))
    __swig_destroy__ = _eva.delete_ChainedMultiSolver
    def __disown__(self):
        self.this.disown()
        _eva.disown_ChainedMultiSolver(self)
        return weakref_proxy(self)
ChainedMultiSolver.config_base = new_instancemethod(_eva.ChainedMultiSolver_config_base, None, ChainedMultiSolver)
ChainedMultiSolver.start = new_instancemethod(_eva.ChainedMultiSolver_start, None, ChainedMultiSolver)
ChainedMultiSolver.build_comms = new_instancemethod(_eva.ChainedMultiSolver_build_comms, None, ChainedMultiSolver)
ChainedMultiSolver_swigregister = _eva.ChainedMultiSolver_swigregister
ChainedMultiSolver_swigregister(ChainedMultiSolver)

class CommonGPUArchitecture(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonGPUArchitecture:
            _self = None
        else:
            _self = self
        _eva.CommonGPUArchitecture_swiginit(self, _eva.new_CommonGPUArchitecture(_self, ))
    __swig_destroy__ = _eva.delete_CommonGPUArchitecture
    get_shared = staticmethod(_eva.CommonGPUArchitecture_get_shared)
    type = _swig_property(_eva.CommonGPUArchitecture_type_get, _eva.CommonGPUArchitecture_type_set)
    unwrap = staticmethod(_eva.CommonGPUArchitecture_unwrap)
    dereference = staticmethod(_eva.CommonGPUArchitecture_dereference)
    get = staticmethod(_eva.CommonGPUArchitecture_get)
    name = _swig_property(_eva.CommonGPUArchitecture_name_get, _eva.CommonGPUArchitecture_name_set)
    gen_scheme = staticmethod(_eva.CommonGPUArchitecture_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _eva.disown_CommonGPUArchitecture(self)
        return weakref_proxy(self)
CommonGPUArchitecture.get_classname = new_instancemethod(_eva.CommonGPUArchitecture_get_classname, None, CommonGPUArchitecture)
CommonGPUArchitecture.get_metadata_path = new_instancemethod(_eva.CommonGPUArchitecture_get_metadata_path, None, CommonGPUArchitecture)
CommonGPUArchitecture.shared_from_this = new_instancemethod(_eva.CommonGPUArchitecture_shared_from_this, None, CommonGPUArchitecture)
CommonGPUArchitecture.get_uuid = new_instancemethod(_eva.CommonGPUArchitecture_get_uuid, None, CommonGPUArchitecture)
CommonGPUArchitecture.get_scheme = new_instancemethod(_eva.CommonGPUArchitecture_get_scheme, None, CommonGPUArchitecture)
CommonGPUArchitecture_swigregister = _eva.CommonGPUArchitecture_swigregister
CommonGPUArchitecture_swigregister(CommonGPUArchitecture)

def CommonGPUArchitecture_get_shared(i):
    return _eva.CommonGPUArchitecture_get_shared(i)
CommonGPUArchitecture_get_shared = _eva.CommonGPUArchitecture_get_shared

def CommonGPUArchitecture_unwrap(ptr):
    return _eva.CommonGPUArchitecture_unwrap(ptr)
CommonGPUArchitecture_unwrap = _eva.CommonGPUArchitecture_unwrap

def CommonGPUArchitecture_dereference(sptr):
    return _eva.CommonGPUArchitecture_dereference(sptr)
CommonGPUArchitecture_dereference = _eva.CommonGPUArchitecture_dereference

def CommonGPUArchitecture_get(*args):
    return _eva.CommonGPUArchitecture_get(*args)
CommonGPUArchitecture_get = _eva.CommonGPUArchitecture_get

def CommonGPUArchitecture_gen_scheme(sfile):
    return _eva.CommonGPUArchitecture_gen_scheme(sfile)
CommonGPUArchitecture_gen_scheme = _eva.CommonGPUArchitecture_gen_scheme

class CommonGPArchitecture(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommonGPArchitecture:
            _self = None
        else:
            _self = self
        _eva.CommonGPArchitecture_swiginit(self, _eva.new_CommonGPArchitecture(_self, ))
    __swig_destroy__ = _eva.delete_CommonGPArchitecture
    get_shared = staticmethod(_eva.CommonGPArchitecture_get_shared)
    type = _swig_property(_eva.CommonGPArchitecture_type_get, _eva.CommonGPArchitecture_type_set)
    unwrap = staticmethod(_eva.CommonGPArchitecture_unwrap)
    dereference = staticmethod(_eva.CommonGPArchitecture_dereference)
    get = staticmethod(_eva.CommonGPArchitecture_get)
    name = _swig_property(_eva.CommonGPArchitecture_name_get, _eva.CommonGPArchitecture_name_set)
    gen_scheme = staticmethod(_eva.CommonGPArchitecture_gen_scheme)
    def __disown__(self):
        self.this.disown()
        _eva.disown_CommonGPArchitecture(self)
        return weakref_proxy(self)
CommonGPArchitecture.get_classname = new_instancemethod(_eva.CommonGPArchitecture_get_classname, None, CommonGPArchitecture)
CommonGPArchitecture.get_metadata_path = new_instancemethod(_eva.CommonGPArchitecture_get_metadata_path, None, CommonGPArchitecture)
CommonGPArchitecture.shared_from_this = new_instancemethod(_eva.CommonGPArchitecture_shared_from_this, None, CommonGPArchitecture)
CommonGPArchitecture.get_uuid = new_instancemethod(_eva.CommonGPArchitecture_get_uuid, None, CommonGPArchitecture)
CommonGPArchitecture.get_scheme = new_instancemethod(_eva.CommonGPArchitecture_get_scheme, None, CommonGPArchitecture)
CommonGPArchitecture_swigregister = _eva.CommonGPArchitecture_swigregister
CommonGPArchitecture_swigregister(CommonGPArchitecture)

def CommonGPArchitecture_get_shared(i):
    return _eva.CommonGPArchitecture_get_shared(i)
CommonGPArchitecture_get_shared = _eva.CommonGPArchitecture_get_shared

def CommonGPArchitecture_unwrap(ptr):
    return _eva.CommonGPArchitecture_unwrap(ptr)
CommonGPArchitecture_unwrap = _eva.CommonGPArchitecture_unwrap

def CommonGPArchitecture_dereference(sptr):
    return _eva.CommonGPArchitecture_dereference(sptr)
CommonGPArchitecture_dereference = _eva.CommonGPArchitecture_dereference

def CommonGPArchitecture_get(*args):
    return _eva.CommonGPArchitecture_get(*args)
CommonGPArchitecture_get = _eva.CommonGPArchitecture_get

def CommonGPArchitecture_gen_scheme(sfile):
    return _eva.CommonGPArchitecture_gen_scheme(sfile)
CommonGPArchitecture_gen_scheme = _eva.CommonGPArchitecture_gen_scheme

class GPArchitecture(CommonGPArchitecture):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == GPArchitecture:
            _self = None
        else:
            _self = self
        _eva.GPArchitecture_swiginit(self, _eva.new_GPArchitecture(_self, ))
    __swig_destroy__ = _eva.delete_GPArchitecture
    create = staticmethod(_eva.GPArchitecture_create)
    def __disown__(self):
        self.this.disown()
        _eva.disown_GPArchitecture(self)
        return weakref_proxy(self)
GPArchitecture.get_hardware_info = new_instancemethod(_eva.GPArchitecture_get_hardware_info, None, GPArchitecture)
GPArchitecture_swigregister = _eva.GPArchitecture_swigregister
GPArchitecture_swigregister(GPArchitecture)
ARCHITECTURE_CORES = cvar.ARCHITECTURE_CORES
ARCHITECTURE_CPUS = cvar.ARCHITECTURE_CPUS

def GPArchitecture_create():
    return _eva.GPArchitecture_create()
GPArchitecture_create = _eva.GPArchitecture_create

class GPUArchitecture(CommonGPUArchitecture):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == GPUArchitecture:
            _self = None
        else:
            _self = self
        _eva.GPUArchitecture_swiginit(self, _eva.new_GPUArchitecture(_self, ))
    __swig_destroy__ = _eva.delete_GPUArchitecture
    memory = _swig_property(_eva.GPUArchitecture_memory_get, _eva.GPUArchitecture_memory_set)
    capability = _swig_property(_eva.GPUArchitecture_capability_get, _eva.GPUArchitecture_capability_set)
    create = staticmethod(_eva.GPUArchitecture_create)
    def __disown__(self):
        self.this.disown()
        _eva.disown_GPUArchitecture(self)
        return weakref_proxy(self)
GPUArchitecture.get_hardware_info = new_instancemethod(_eva.GPUArchitecture_get_hardware_info, None, GPUArchitecture)
GPUArchitecture_swigregister = _eva.GPUArchitecture_swigregister
GPUArchitecture_swigregister(GPUArchitecture)
ARCHITECTURE_CAPABILITY = cvar.ARCHITECTURE_CAPABILITY
ARCHITECTURE_MEMORY = cvar.ARCHITECTURE_MEMORY

def GPUArchitecture_create():
    return _eva.GPUArchitecture_create()
GPUArchitecture_create = _eva.GPUArchitecture_create

class EVAManager(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    get = staticmethod(_eva.EVAManager_get)
    evas = _swig_property(_eva.EVAManager_evas_get, _eva.EVAManager_evas_set)
    metaNames = _swig_property(_eva.EVAManager_metaNames_get, _eva.EVAManager_metaNames_set)
    archsinfo = _swig_property(_eva.EVAManager_archsinfo_get, _eva.EVAManager_archsinfo_set)
    linksinfo = _swig_property(_eva.EVAManager_linksinfo_get, _eva.EVAManager_linksinfo_set)
    archs = _swig_property(_eva.EVAManager_archs_get, _eva.EVAManager_archs_set)
    timers = _swig_property(_eva.EVAManager_timers_get, _eva.EVAManager_timers_set)
    __swig_destroy__ = _eva.delete_EVAManager
EVAManager.get_communication = new_instancemethod(_eva.EVAManager_get_communication, None, EVAManager)
EVAManager.restrict_architectures = new_instancemethod(_eva.EVAManager_restrict_architectures, None, EVAManager)
EVAManager.get_devices_number = new_instancemethod(_eva.EVAManager_get_devices_number, None, EVAManager)
EVAManager_swigregister = _eva.EVAManager_swigregister
EVAManager_swigregister(EVAManager)
EVAMANAGER_SCHEMES = cvar.EVAMANAGER_SCHEMES
EVAMANAGER_ARCHITECTURES = cvar.EVAMANAGER_ARCHITECTURES
EVAMANAGER_LINKS = cvar.EVAMANAGER_LINKS

def EVAManager_get():
    return _eva.EVAManager_get()
EVAManager_get = _eva.EVAManager_get

class EVA(CommonEVA):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):

        import os 
        with open(".genesis_location", "w") as text_file:
          text_file.write("%s" % os.path.dirname(eva.__file__))


        if self.__class__ == EVA:
            _self = None
        else:
            _self = self
        _eva.EVA_swiginit(self, _eva.new_EVA(_self, ))

           # Import the Python platform module
        import platform as pt

        # Multi-threading is not supported on Python codes
        self.multithread = False

        # The platform is Python  
        self.platform = str("Python " + pt.python_version()+ " '"+ pt.system() \
        + " " + pt.python_implementation()+ "'")



    archs = _swig_property(_eva.EVA_archs_get, _eva.EVA_archs_set)
    ndevices = _swig_property(_eva.EVA_ndevices_get, _eva.EVA_ndevices_set)
    multithread = _swig_property(_eva.EVA_multithread_get, _eva.EVA_multithread_set)
    platform = _swig_property(_eva.EVA_platform_get, _eva.EVA_platform_set)
    python_print = staticmethod(_eva.EVA_python_print)
    __swig_destroy__ = _eva.delete_EVA
    def __disown__(self):
        self.this.disown()
        _eva.disown_EVA(self)
        return weakref_proxy(self)
EVA.config = new_instancemethod(_eva.EVA_config, None, EVA)
EVA.start = new_instancemethod(_eva.EVA_start, None, EVA)
EVA.get_results = new_instancemethod(_eva.EVA_get_results, None, EVA)
EVA.free_results = new_instancemethod(_eva.EVA_free_results, None, EVA)
EVA.finish = new_instancemethod(_eva.EVA_finish, None, EVA)
EVA.get_EVAManager = new_instancemethod(_eva.EVA_get_EVAManager, None, EVA)
EVA.add_solver = new_instancemethod(_eva.EVA_add_solver, None, EVA)
EVA.set_mesh = new_instancemethod(_eva.EVA_set_mesh, None, EVA)
EVA_swigregister = _eva.EVA_swigregister
EVA_swigregister(EVA)

def EVA_python_print(msg, error):
    return _eva.EVA_python_print(msg, error)
EVA_python_print = _eva.EVA_python_print



  # Import some useful packages
import json
import numpy as np
import pickle
import codecs
import io
import sys
import traceback

# Dictionary for keeping objects instances on a global scope 
pobjects = {}

# Class able to create an object from itself.
class Clonable():
  def clone(self):
    s = self.__class__()
# print("Clonning solver ", self.get_uuid(), "on", s.get_uuid() )
    pobjects[s.get_uuid()] = s
    return s

def pack_data (self, neighbor, data):
# Redefine the pack_data method for serializing external data
  try:
# Try to pack data as a known type
    self._pack_data(neighbor, data)
  except Exception as e:
    try:
# Serialize Numpy object
      if type(data).__module__ == np.__name__:
        memfile = io.BytesIO()
        np.save(memfile, data)
        memfile.seek(0)
        self._pack_data(neighbor, json.dumps(memfile.read().decode('latin-1')))
      else:
# Serialize a known Python object
#self._pack_data(neighbor, json.dumps(data))
        self.pack_data(neighbor, codecs.encode(pickle.dumps(data), "base64").decode())
    except Exception as e1:
       raise Exception("Exception on pack_data: " +  str(e1))

def unpack_data (self, neighbor, dtype):
# Redefine the unpack_data method for deserializing external data
  try:
# Try to unpack data as a known type
    return self._unpack_data(neighbor, dtype)
  except Exception as e:
    try:
      tmp = self._unpack_data(neighbor, "")

# Deserialize Numpy object
      if type(dtype).__module__ == np.__name__:
        memfile = io.BytesIO()
        memfile.write(json.loads(tmp).encode('latin-1'))
        memfile.seek(0)
        return np.load(memfile)
      else:
# Deserialize a known Python object
#return json.loads(tmp)
        return pickle.loads(codecs.decode(tmp.encode(), "base64"))
    except Exception as e1:
      raise Exception("Exception on unpack_data: " +  str(e1))

CommonChainedMultiSolver.pack_data = pack_data
CommonLoopMultiSolver.pack_data = pack_data
CommonMatrixFreeIOSolver.pack_data = pack_data
CommonMatrixFreeSolver.pack_data = pack_data
CommonMatrixBasedSolver.pack_data = pack_data

CommonChainedMultiSolver.unpack_data = unpack_data
CommonLoopMultiSolver.unpack_data = unpack_data
CommonMatrixFreeIOSolver.unpack_data = unpack_data
CommonMatrixFreeSolver.unpack_data = unpack_data
CommonMatrixBasedSolver.unpack_data = unpack_data




