# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkFrequencyFunctionPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkFrequencyFunctionPython', [dirname(__file__)])
        except ImportError:
            import _itkFrequencyFunctionPython
            return _itkFrequencyFunctionPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkFrequencyFunctionPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkFrequencyFunctionPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkFrequencyFunctionPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkSpatialFunctionPython
import itkPointPython
import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkFunctionBasePython
import ITKCommonBasePython
import itkCovariantVectorPython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkArrayPython
import itkContinuousIndexPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkImagePython
import itkImageRegionPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkSymmetricSecondRankTensorPython

def itkFrequencyFunctionF3PD3_New():
  return itkFrequencyFunctionF3PD3.New()


def itkFrequencyFunctionF2PD2_New():
  return itkFrequencyFunctionF2PD2.New()

class itkFrequencyFunctionF2PD2(itkSpatialFunctionPython.itkSpatialFunctionF2PD2):
    """Proxy of C++ itkFrequencyFunctionF2PD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def RadPerSecToHertz(self, w_rad_per_sec):
        """RadPerSecToHertz(itkFrequencyFunctionF2PD2 self, float const & w_rad_per_sec) -> float"""
        return _itkFrequencyFunctionPython.itkFrequencyFunctionF2PD2_RadPerSecToHertz(self, w_rad_per_sec)

    __swig_destroy__ = _itkFrequencyFunctionPython.delete_itkFrequencyFunctionF2PD2

    def cast(obj):
        """cast(itkLightObject obj) -> itkFrequencyFunctionF2PD2"""
        return _itkFrequencyFunctionPython.itkFrequencyFunctionF2PD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyFunctionF2PD2

        Create a new object of the class itkFrequencyFunctionF2PD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyFunctionF2PD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFrequencyFunctionF2PD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFrequencyFunctionF2PD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFrequencyFunctionF2PD2.RadPerSecToHertz = new_instancemethod(_itkFrequencyFunctionPython.itkFrequencyFunctionF2PD2_RadPerSecToHertz, None, itkFrequencyFunctionF2PD2)
itkFrequencyFunctionF2PD2_swigregister = _itkFrequencyFunctionPython.itkFrequencyFunctionF2PD2_swigregister
itkFrequencyFunctionF2PD2_swigregister(itkFrequencyFunctionF2PD2)

def itkFrequencyFunctionF2PD2_cast(obj):
    """itkFrequencyFunctionF2PD2_cast(itkLightObject obj) -> itkFrequencyFunctionF2PD2"""
    return _itkFrequencyFunctionPython.itkFrequencyFunctionF2PD2_cast(obj)

class itkFrequencyFunctionF3PD3(itkSpatialFunctionPython.itkSpatialFunctionF3PD3):
    """Proxy of C++ itkFrequencyFunctionF3PD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def RadPerSecToHertz(self, w_rad_per_sec):
        """RadPerSecToHertz(itkFrequencyFunctionF3PD3 self, float const & w_rad_per_sec) -> float"""
        return _itkFrequencyFunctionPython.itkFrequencyFunctionF3PD3_RadPerSecToHertz(self, w_rad_per_sec)

    __swig_destroy__ = _itkFrequencyFunctionPython.delete_itkFrequencyFunctionF3PD3

    def cast(obj):
        """cast(itkLightObject obj) -> itkFrequencyFunctionF3PD3"""
        return _itkFrequencyFunctionPython.itkFrequencyFunctionF3PD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyFunctionF3PD3

        Create a new object of the class itkFrequencyFunctionF3PD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyFunctionF3PD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFrequencyFunctionF3PD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFrequencyFunctionF3PD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFrequencyFunctionF3PD3.RadPerSecToHertz = new_instancemethod(_itkFrequencyFunctionPython.itkFrequencyFunctionF3PD3_RadPerSecToHertz, None, itkFrequencyFunctionF3PD3)
itkFrequencyFunctionF3PD3_swigregister = _itkFrequencyFunctionPython.itkFrequencyFunctionF3PD3_swigregister
itkFrequencyFunctionF3PD3_swigregister(itkFrequencyFunctionF3PD3)

def itkFrequencyFunctionF3PD3_cast(obj):
    """itkFrequencyFunctionF3PD3_cast(itkLightObject obj) -> itkFrequencyFunctionF3PD3"""
    return _itkFrequencyFunctionPython.itkFrequencyFunctionF3PD3_cast(obj)



