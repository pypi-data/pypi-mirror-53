# coding: utf-8

"""
    Model Catalog

    This is MINT Model Catalog You can find out more about Model Catalog at [https://w3id.org/mint/modelCatalog/](https://w3id.org/mint/modelCatalog/)  # noqa: E501

    OpenAPI spec version: v1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ModelConfiguration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'parameter_assignment_method': 'list[str]',
        'has_component_location': 'list[str]',
        'has_grid': 'list[Grid]',
        'has_process': 'list[Process]',
        'has_implementation_script_location': 'list[str]',
        'type': 'list[str]',
        'calibrated_variable': 'list[object]',
        'has_model_category': 'list[str]',
        'has_software_image': 'list[object]',
        'compatible_visualization_software': 'list[object]',
        'calibration_method': 'list[str]',
        'has_region': 'list[Region]',
        'has_model_result_table': 'list[str]',
        'calibration_target_variable': 'list[object]',
        'id': 'str',
        'has_expert_tuned_model': 'list[ModelConfiguration]',
        'has_calibration': 'list[ModelConfiguration]',
        'has_causal_diagram': 'list[CausalDiagram]',
        'has_sample_execution': 'list[object]',
        'has_sample_result': 'list[object]',
        'has_constraint': 'list[str]',
        'adjustable_parameter': 'list[object]',
        'has_support_script_location': 'list[str]',
        'label': 'str',
        'has_execution_command': 'list[str]',
        'has_parameter': 'list[object]',
        'has_explanation_diagram': 'list[object]',
        'has_equation': 'list[Equation]',
        'has_output': 'list[object]',
        'has_output_time_interval': 'list[TimeInterval]',
        'has_input': 'list[object]'
    }

    attribute_map = {
        'parameter_assignment_method': 'parameterAssignmentMethod',
        'has_component_location': 'hasComponentLocation',
        'has_grid': 'hasGrid',
        'has_process': 'hasProcess',
        'has_implementation_script_location': 'hasImplementationScriptLocation',
        'type': 'type',
        'calibrated_variable': 'calibratedVariable',
        'has_model_category': 'hasModelCategory',
        'has_software_image': 'hasSoftwareImage',
        'compatible_visualization_software': 'compatibleVisualizationSoftware',
        'calibration_method': 'calibrationMethod',
        'has_region': 'hasRegion',
        'has_model_result_table': 'hasModelResultTable',
        'calibration_target_variable': 'calibrationTargetVariable',
        'id': 'id',
        'has_expert_tuned_model': 'hasExpertTunedModel',
        'has_calibration': 'hasCalibration',
        'has_causal_diagram': 'hasCausalDiagram',
        'has_sample_execution': 'hasSampleExecution',
        'has_sample_result': 'hasSampleResult',
        'has_constraint': 'hasConstraint',
        'adjustable_parameter': 'adjustableParameter',
        'has_support_script_location': 'hasSupportScriptLocation',
        'label': 'label',
        'has_execution_command': 'hasExecutionCommand',
        'has_parameter': 'hasParameter',
        'has_explanation_diagram': 'hasExplanationDiagram',
        'has_equation': 'hasEquation',
        'has_output': 'hasOutput',
        'has_output_time_interval': 'hasOutputTimeInterval',
        'has_input': 'hasInput'
    }

    def __init__(self, parameter_assignment_method=None, has_component_location=None, has_grid=None, has_process=None, has_implementation_script_location=None, type=None, calibrated_variable=None, has_model_category=None, has_software_image=None, compatible_visualization_software=None, calibration_method=None, has_region=None, has_model_result_table=None, calibration_target_variable=None, id=None, has_expert_tuned_model=None, has_calibration=None, has_causal_diagram=None, has_sample_execution=None, has_sample_result=None, has_constraint=None, adjustable_parameter=None, has_support_script_location=None, label=None, has_execution_command=None, has_parameter=None, has_explanation_diagram=None, has_equation=None, has_output=None, has_output_time_interval=None, has_input=None):  # noqa: E501
        """ModelConfiguration - a model defined in OpenAPI"""  # noqa: E501

        self._parameter_assignment_method = None
        self._has_component_location = None
        self._has_grid = None
        self._has_process = None
        self._has_implementation_script_location = None
        self._type = None
        self._calibrated_variable = None
        self._has_model_category = None
        self._has_software_image = None
        self._compatible_visualization_software = None
        self._calibration_method = None
        self._has_region = None
        self._has_model_result_table = None
        self._calibration_target_variable = None
        self._id = None
        self._has_expert_tuned_model = None
        self._has_calibration = None
        self._has_causal_diagram = None
        self._has_sample_execution = None
        self._has_sample_result = None
        self._has_constraint = None
        self._adjustable_parameter = None
        self._has_support_script_location = None
        self._label = None
        self._has_execution_command = None
        self._has_parameter = None
        self._has_explanation_diagram = None
        self._has_equation = None
        self._has_output = None
        self._has_output_time_interval = None
        self._has_input = None
        self.discriminator = None

        if parameter_assignment_method is not None:
            self.parameter_assignment_method = parameter_assignment_method
        else:
            if hasattr(self, '_parameter_assignment_method'): del self._parameter_assignment_method
            if hasattr(self.attribute_map, 'parameter_assignment_method'): del self.attribute_map['parameter_assignment_method']
            if hasattr(self.openapi_types, 'parameter_assignment_method'): del self.openapi_types['parameter_assignment_method']
        if has_component_location is not None:
            self.has_component_location = has_component_location
        else:
            if hasattr(self, '_has_component_location'): del self._has_component_location
            if hasattr(self.attribute_map, 'has_component_location'): del self.attribute_map['has_component_location']
            if hasattr(self.openapi_types, 'has_component_location'): del self.openapi_types['has_component_location']
        if has_grid is not None:
            self.has_grid = has_grid
        else:
            if hasattr(self, '_has_grid'): del self._has_grid
            if hasattr(self.attribute_map, 'has_grid'): del self.attribute_map['has_grid']
            if hasattr(self.openapi_types, 'has_grid'): del self.openapi_types['has_grid']
        if has_process is not None:
            self.has_process = has_process
        else:
            if hasattr(self, '_has_process'): del self._has_process
            if hasattr(self.attribute_map, 'has_process'): del self.attribute_map['has_process']
            if hasattr(self.openapi_types, 'has_process'): del self.openapi_types['has_process']
        if has_implementation_script_location is not None:
            self.has_implementation_script_location = has_implementation_script_location
        else:
            if hasattr(self, '_has_implementation_script_location'): del self._has_implementation_script_location
            if hasattr(self.attribute_map, 'has_implementation_script_location'): del self.attribute_map['has_implementation_script_location']
            if hasattr(self.openapi_types, 'has_implementation_script_location'): del self.openapi_types['has_implementation_script_location']
        if type is not None:
            self.type = type
        else:
            if hasattr(self, '_type'): del self._type
            if hasattr(self.attribute_map, 'type'): del self.attribute_map['type']
            if hasattr(self.openapi_types, 'type'): del self.openapi_types['type']
        if calibrated_variable is not None:
            self.calibrated_variable = calibrated_variable
        else:
            if hasattr(self, '_calibrated_variable'): del self._calibrated_variable
            if hasattr(self.attribute_map, 'calibrated_variable'): del self.attribute_map['calibrated_variable']
            if hasattr(self.openapi_types, 'calibrated_variable'): del self.openapi_types['calibrated_variable']
        if has_model_category is not None:
            self.has_model_category = has_model_category
        else:
            if hasattr(self, '_has_model_category'): del self._has_model_category
            if hasattr(self.attribute_map, 'has_model_category'): del self.attribute_map['has_model_category']
            if hasattr(self.openapi_types, 'has_model_category'): del self.openapi_types['has_model_category']
        if has_software_image is not None:
            self.has_software_image = has_software_image
        else:
            if hasattr(self, '_has_software_image'): del self._has_software_image
            if hasattr(self.attribute_map, 'has_software_image'): del self.attribute_map['has_software_image']
            if hasattr(self.openapi_types, 'has_software_image'): del self.openapi_types['has_software_image']
        if compatible_visualization_software is not None:
            self.compatible_visualization_software = compatible_visualization_software
        else:
            if hasattr(self, '_compatible_visualization_software'): del self._compatible_visualization_software
            if hasattr(self.attribute_map, 'compatible_visualization_software'): del self.attribute_map['compatible_visualization_software']
            if hasattr(self.openapi_types, 'compatible_visualization_software'): del self.openapi_types['compatible_visualization_software']
        if calibration_method is not None:
            self.calibration_method = calibration_method
        else:
            if hasattr(self, '_calibration_method'): del self._calibration_method
            if hasattr(self.attribute_map, 'calibration_method'): del self.attribute_map['calibration_method']
            if hasattr(self.openapi_types, 'calibration_method'): del self.openapi_types['calibration_method']
        if has_region is not None:
            self.has_region = has_region
        else:
            if hasattr(self, '_has_region'): del self._has_region
            if hasattr(self.attribute_map, 'has_region'): del self.attribute_map['has_region']
            if hasattr(self.openapi_types, 'has_region'): del self.openapi_types['has_region']
        if has_model_result_table is not None:
            self.has_model_result_table = has_model_result_table
        else:
            if hasattr(self, '_has_model_result_table'): del self._has_model_result_table
            if hasattr(self.attribute_map, 'has_model_result_table'): del self.attribute_map['has_model_result_table']
            if hasattr(self.openapi_types, 'has_model_result_table'): del self.openapi_types['has_model_result_table']
        if calibration_target_variable is not None:
            self.calibration_target_variable = calibration_target_variable
        else:
            if hasattr(self, '_calibration_target_variable'): del self._calibration_target_variable
            if hasattr(self.attribute_map, 'calibration_target_variable'): del self.attribute_map['calibration_target_variable']
            if hasattr(self.openapi_types, 'calibration_target_variable'): del self.openapi_types['calibration_target_variable']
        if id is not None:
            self.id = id
        if has_expert_tuned_model is not None:
            self.has_expert_tuned_model = has_expert_tuned_model
        else:
            if hasattr(self, '_has_expert_tuned_model'): del self._has_expert_tuned_model
            if hasattr(self.attribute_map, 'has_expert_tuned_model'): del self.attribute_map['has_expert_tuned_model']
            if hasattr(self.openapi_types, 'has_expert_tuned_model'): del self.openapi_types['has_expert_tuned_model']
        if has_calibration is not None:
            self.has_calibration = has_calibration
        else:
            if hasattr(self, '_has_calibration'): del self._has_calibration
            if hasattr(self.attribute_map, 'has_calibration'): del self.attribute_map['has_calibration']
            if hasattr(self.openapi_types, 'has_calibration'): del self.openapi_types['has_calibration']
        if has_causal_diagram is not None:
            self.has_causal_diagram = has_causal_diagram
        else:
            if hasattr(self, '_has_causal_diagram'): del self._has_causal_diagram
            if hasattr(self.attribute_map, 'has_causal_diagram'): del self.attribute_map['has_causal_diagram']
            if hasattr(self.openapi_types, 'has_causal_diagram'): del self.openapi_types['has_causal_diagram']
        if has_sample_execution is not None:
            self.has_sample_execution = has_sample_execution
        else:
            if hasattr(self, '_has_sample_execution'): del self._has_sample_execution
            if hasattr(self.attribute_map, 'has_sample_execution'): del self.attribute_map['has_sample_execution']
            if hasattr(self.openapi_types, 'has_sample_execution'): del self.openapi_types['has_sample_execution']
        if has_sample_result is not None:
            self.has_sample_result = has_sample_result
        else:
            if hasattr(self, '_has_sample_result'): del self._has_sample_result
            if hasattr(self.attribute_map, 'has_sample_result'): del self.attribute_map['has_sample_result']
            if hasattr(self.openapi_types, 'has_sample_result'): del self.openapi_types['has_sample_result']
        if has_constraint is not None:
            self.has_constraint = has_constraint
        else:
            if hasattr(self, '_has_constraint'): del self._has_constraint
            if hasattr(self.attribute_map, 'has_constraint'): del self.attribute_map['has_constraint']
            if hasattr(self.openapi_types, 'has_constraint'): del self.openapi_types['has_constraint']
        if adjustable_parameter is not None:
            self.adjustable_parameter = adjustable_parameter
        else:
            if hasattr(self, '_adjustable_parameter'): del self._adjustable_parameter
            if hasattr(self.attribute_map, 'adjustable_parameter'): del self.attribute_map['adjustable_parameter']
            if hasattr(self.openapi_types, 'adjustable_parameter'): del self.openapi_types['adjustable_parameter']
        if has_support_script_location is not None:
            self.has_support_script_location = has_support_script_location
        else:
            if hasattr(self, '_has_support_script_location'): del self._has_support_script_location
            if hasattr(self.attribute_map, 'has_support_script_location'): del self.attribute_map['has_support_script_location']
            if hasattr(self.openapi_types, 'has_support_script_location'): del self.openapi_types['has_support_script_location']
        if label is not None:
            self.label = label
        else:
            if hasattr(self, '_label'): del self._label
            if hasattr(self.attribute_map, 'label'): del self.attribute_map['label']
            if hasattr(self.openapi_types, 'label'): del self.openapi_types['label']
        if has_execution_command is not None:
            self.has_execution_command = has_execution_command
        else:
            if hasattr(self, '_has_execution_command'): del self._has_execution_command
            if hasattr(self.attribute_map, 'has_execution_command'): del self.attribute_map['has_execution_command']
            if hasattr(self.openapi_types, 'has_execution_command'): del self.openapi_types['has_execution_command']
        if has_parameter is not None:
            self.has_parameter = has_parameter
        else:
            if hasattr(self, '_has_parameter'): del self._has_parameter
            if hasattr(self.attribute_map, 'has_parameter'): del self.attribute_map['has_parameter']
            if hasattr(self.openapi_types, 'has_parameter'): del self.openapi_types['has_parameter']
        if has_explanation_diagram is not None:
            self.has_explanation_diagram = has_explanation_diagram
        else:
            if hasattr(self, '_has_explanation_diagram'): del self._has_explanation_diagram
            if hasattr(self.attribute_map, 'has_explanation_diagram'): del self.attribute_map['has_explanation_diagram']
            if hasattr(self.openapi_types, 'has_explanation_diagram'): del self.openapi_types['has_explanation_diagram']
        if has_equation is not None:
            self.has_equation = has_equation
        else:
            if hasattr(self, '_has_equation'): del self._has_equation
            if hasattr(self.attribute_map, 'has_equation'): del self.attribute_map['has_equation']
            if hasattr(self.openapi_types, 'has_equation'): del self.openapi_types['has_equation']
        if has_output is not None:
            self.has_output = has_output
        else:
            if hasattr(self, '_has_output'): del self._has_output
            if hasattr(self.attribute_map, 'has_output'): del self.attribute_map['has_output']
            if hasattr(self.openapi_types, 'has_output'): del self.openapi_types['has_output']
        if has_output_time_interval is not None:
            self.has_output_time_interval = has_output_time_interval
        else:
            if hasattr(self, '_has_output_time_interval'): del self._has_output_time_interval
            if hasattr(self.attribute_map, 'has_output_time_interval'): del self.attribute_map['has_output_time_interval']
            if hasattr(self.openapi_types, 'has_output_time_interval'): del self.openapi_types['has_output_time_interval']
        if has_input is not None:
            self.has_input = has_input
        else:
            if hasattr(self, '_has_input'): del self._has_input
            if hasattr(self.attribute_map, 'has_input'): del self.attribute_map['has_input']
            if hasattr(self.openapi_types, 'has_input'): del self.openapi_types['has_input']

    @property
    def parameter_assignment_method(self):
        """Gets the parameter_assignment_method of this ModelConfiguration.  # noqa: E501


        :return: The parameter_assignment_method of this ModelConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._parameter_assignment_method

    @parameter_assignment_method.setter
    def parameter_assignment_method(self, parameter_assignment_method):
        """Sets the parameter_assignment_method of this ModelConfiguration.


        :param parameter_assignment_method: The parameter_assignment_method of this ModelConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._parameter_assignment_method = parameter_assignment_method

    @property
    def has_component_location(self):
        """Gets the has_component_location of this ModelConfiguration.  # noqa: E501


        :return: The has_component_location of this ModelConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._has_component_location

    @has_component_location.setter
    def has_component_location(self, has_component_location):
        """Sets the has_component_location of this ModelConfiguration.


        :param has_component_location: The has_component_location of this ModelConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._has_component_location = has_component_location

    @property
    def has_grid(self):
        """Gets the has_grid of this ModelConfiguration.  # noqa: E501


        :return: The has_grid of this ModelConfiguration.  # noqa: E501
        :rtype: list[Grid]
        """
        return self._has_grid

    @has_grid.setter
    def has_grid(self, has_grid):
        """Sets the has_grid of this ModelConfiguration.


        :param has_grid: The has_grid of this ModelConfiguration.  # noqa: E501
        :type: list[Grid]
        """

        self._has_grid = has_grid

    @property
    def has_process(self):
        """Gets the has_process of this ModelConfiguration.  # noqa: E501


        :return: The has_process of this ModelConfiguration.  # noqa: E501
        :rtype: list[Process]
        """
        return self._has_process

    @has_process.setter
    def has_process(self, has_process):
        """Sets the has_process of this ModelConfiguration.


        :param has_process: The has_process of this ModelConfiguration.  # noqa: E501
        :type: list[Process]
        """

        self._has_process = has_process

    @property
    def has_implementation_script_location(self):
        """Gets the has_implementation_script_location of this ModelConfiguration.  # noqa: E501


        :return: The has_implementation_script_location of this ModelConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._has_implementation_script_location

    @has_implementation_script_location.setter
    def has_implementation_script_location(self, has_implementation_script_location):
        """Sets the has_implementation_script_location of this ModelConfiguration.


        :param has_implementation_script_location: The has_implementation_script_location of this ModelConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._has_implementation_script_location = has_implementation_script_location

    @property
    def type(self):
        """Gets the type of this ModelConfiguration.  # noqa: E501


        :return: The type of this ModelConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelConfiguration.


        :param type: The type of this ModelConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._type = type

    @property
    def calibrated_variable(self):
        """Gets the calibrated_variable of this ModelConfiguration.  # noqa: E501


        :return: The calibrated_variable of this ModelConfiguration.  # noqa: E501
        :rtype: list[object]
        """
        return self._calibrated_variable

    @calibrated_variable.setter
    def calibrated_variable(self, calibrated_variable):
        """Sets the calibrated_variable of this ModelConfiguration.


        :param calibrated_variable: The calibrated_variable of this ModelConfiguration.  # noqa: E501
        :type: list[object]
        """

        self._calibrated_variable = calibrated_variable

    @property
    def has_model_category(self):
        """Gets the has_model_category of this ModelConfiguration.  # noqa: E501


        :return: The has_model_category of this ModelConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._has_model_category

    @has_model_category.setter
    def has_model_category(self, has_model_category):
        """Sets the has_model_category of this ModelConfiguration.


        :param has_model_category: The has_model_category of this ModelConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._has_model_category = has_model_category

    @property
    def has_software_image(self):
        """Gets the has_software_image of this ModelConfiguration.  # noqa: E501


        :return: The has_software_image of this ModelConfiguration.  # noqa: E501
        :rtype: list[object]
        """
        return self._has_software_image

    @has_software_image.setter
    def has_software_image(self, has_software_image):
        """Sets the has_software_image of this ModelConfiguration.


        :param has_software_image: The has_software_image of this ModelConfiguration.  # noqa: E501
        :type: list[object]
        """

        self._has_software_image = has_software_image

    @property
    def compatible_visualization_software(self):
        """Gets the compatible_visualization_software of this ModelConfiguration.  # noqa: E501


        :return: The compatible_visualization_software of this ModelConfiguration.  # noqa: E501
        :rtype: list[object]
        """
        return self._compatible_visualization_software

    @compatible_visualization_software.setter
    def compatible_visualization_software(self, compatible_visualization_software):
        """Sets the compatible_visualization_software of this ModelConfiguration.


        :param compatible_visualization_software: The compatible_visualization_software of this ModelConfiguration.  # noqa: E501
        :type: list[object]
        """

        self._compatible_visualization_software = compatible_visualization_software

    @property
    def calibration_method(self):
        """Gets the calibration_method of this ModelConfiguration.  # noqa: E501


        :return: The calibration_method of this ModelConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._calibration_method

    @calibration_method.setter
    def calibration_method(self, calibration_method):
        """Sets the calibration_method of this ModelConfiguration.


        :param calibration_method: The calibration_method of this ModelConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._calibration_method = calibration_method

    @property
    def has_region(self):
        """Gets the has_region of this ModelConfiguration.  # noqa: E501


        :return: The has_region of this ModelConfiguration.  # noqa: E501
        :rtype: list[Region]
        """
        return self._has_region

    @has_region.setter
    def has_region(self, has_region):
        """Sets the has_region of this ModelConfiguration.


        :param has_region: The has_region of this ModelConfiguration.  # noqa: E501
        :type: list[Region]
        """

        self._has_region = has_region

    @property
    def has_model_result_table(self):
        """Gets the has_model_result_table of this ModelConfiguration.  # noqa: E501


        :return: The has_model_result_table of this ModelConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._has_model_result_table

    @has_model_result_table.setter
    def has_model_result_table(self, has_model_result_table):
        """Sets the has_model_result_table of this ModelConfiguration.


        :param has_model_result_table: The has_model_result_table of this ModelConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._has_model_result_table = has_model_result_table

    @property
    def calibration_target_variable(self):
        """Gets the calibration_target_variable of this ModelConfiguration.  # noqa: E501


        :return: The calibration_target_variable of this ModelConfiguration.  # noqa: E501
        :rtype: list[object]
        """
        return self._calibration_target_variable

    @calibration_target_variable.setter
    def calibration_target_variable(self, calibration_target_variable):
        """Sets the calibration_target_variable of this ModelConfiguration.


        :param calibration_target_variable: The calibration_target_variable of this ModelConfiguration.  # noqa: E501
        :type: list[object]
        """

        self._calibration_target_variable = calibration_target_variable

    @property
    def id(self):
        """Gets the id of this ModelConfiguration.  # noqa: E501


        :return: The id of this ModelConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelConfiguration.


        :param id: The id of this ModelConfiguration.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def has_expert_tuned_model(self):
        """Gets the has_expert_tuned_model of this ModelConfiguration.  # noqa: E501


        :return: The has_expert_tuned_model of this ModelConfiguration.  # noqa: E501
        :rtype: list[ModelConfiguration]
        """
        return self._has_expert_tuned_model

    @has_expert_tuned_model.setter
    def has_expert_tuned_model(self, has_expert_tuned_model):
        """Sets the has_expert_tuned_model of this ModelConfiguration.


        :param has_expert_tuned_model: The has_expert_tuned_model of this ModelConfiguration.  # noqa: E501
        :type: list[ModelConfiguration]
        """

        self._has_expert_tuned_model = has_expert_tuned_model

    @property
    def has_calibration(self):
        """Gets the has_calibration of this ModelConfiguration.  # noqa: E501


        :return: The has_calibration of this ModelConfiguration.  # noqa: E501
        :rtype: list[ModelConfiguration]
        """
        return self._has_calibration

    @has_calibration.setter
    def has_calibration(self, has_calibration):
        """Sets the has_calibration of this ModelConfiguration.


        :param has_calibration: The has_calibration of this ModelConfiguration.  # noqa: E501
        :type: list[ModelConfiguration]
        """

        self._has_calibration = has_calibration

    @property
    def has_causal_diagram(self):
        """Gets the has_causal_diagram of this ModelConfiguration.  # noqa: E501


        :return: The has_causal_diagram of this ModelConfiguration.  # noqa: E501
        :rtype: list[CausalDiagram]
        """
        return self._has_causal_diagram

    @has_causal_diagram.setter
    def has_causal_diagram(self, has_causal_diagram):
        """Sets the has_causal_diagram of this ModelConfiguration.


        :param has_causal_diagram: The has_causal_diagram of this ModelConfiguration.  # noqa: E501
        :type: list[CausalDiagram]
        """

        self._has_causal_diagram = has_causal_diagram

    @property
    def has_sample_execution(self):
        """Gets the has_sample_execution of this ModelConfiguration.  # noqa: E501


        :return: The has_sample_execution of this ModelConfiguration.  # noqa: E501
        :rtype: list[object]
        """
        return self._has_sample_execution

    @has_sample_execution.setter
    def has_sample_execution(self, has_sample_execution):
        """Sets the has_sample_execution of this ModelConfiguration.


        :param has_sample_execution: The has_sample_execution of this ModelConfiguration.  # noqa: E501
        :type: list[object]
        """

        self._has_sample_execution = has_sample_execution

    @property
    def has_sample_result(self):
        """Gets the has_sample_result of this ModelConfiguration.  # noqa: E501


        :return: The has_sample_result of this ModelConfiguration.  # noqa: E501
        :rtype: list[object]
        """
        return self._has_sample_result

    @has_sample_result.setter
    def has_sample_result(self, has_sample_result):
        """Sets the has_sample_result of this ModelConfiguration.


        :param has_sample_result: The has_sample_result of this ModelConfiguration.  # noqa: E501
        :type: list[object]
        """

        self._has_sample_result = has_sample_result

    @property
    def has_constraint(self):
        """Gets the has_constraint of this ModelConfiguration.  # noqa: E501


        :return: The has_constraint of this ModelConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._has_constraint

    @has_constraint.setter
    def has_constraint(self, has_constraint):
        """Sets the has_constraint of this ModelConfiguration.


        :param has_constraint: The has_constraint of this ModelConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._has_constraint = has_constraint

    @property
    def adjustable_parameter(self):
        """Gets the adjustable_parameter of this ModelConfiguration.  # noqa: E501


        :return: The adjustable_parameter of this ModelConfiguration.  # noqa: E501
        :rtype: list[object]
        """
        return self._adjustable_parameter

    @adjustable_parameter.setter
    def adjustable_parameter(self, adjustable_parameter):
        """Sets the adjustable_parameter of this ModelConfiguration.


        :param adjustable_parameter: The adjustable_parameter of this ModelConfiguration.  # noqa: E501
        :type: list[object]
        """

        self._adjustable_parameter = adjustable_parameter

    @property
    def has_support_script_location(self):
        """Gets the has_support_script_location of this ModelConfiguration.  # noqa: E501


        :return: The has_support_script_location of this ModelConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._has_support_script_location

    @has_support_script_location.setter
    def has_support_script_location(self, has_support_script_location):
        """Sets the has_support_script_location of this ModelConfiguration.


        :param has_support_script_location: The has_support_script_location of this ModelConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._has_support_script_location = has_support_script_location

    @property
    def label(self):
        """Gets the label of this ModelConfiguration.  # noqa: E501


        :return: The label of this ModelConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ModelConfiguration.


        :param label: The label of this ModelConfiguration.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def has_execution_command(self):
        """Gets the has_execution_command of this ModelConfiguration.  # noqa: E501


        :return: The has_execution_command of this ModelConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._has_execution_command

    @has_execution_command.setter
    def has_execution_command(self, has_execution_command):
        """Sets the has_execution_command of this ModelConfiguration.


        :param has_execution_command: The has_execution_command of this ModelConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._has_execution_command = has_execution_command

    @property
    def has_parameter(self):
        """Gets the has_parameter of this ModelConfiguration.  # noqa: E501


        :return: The has_parameter of this ModelConfiguration.  # noqa: E501
        :rtype: list[object]
        """
        return self._has_parameter

    @has_parameter.setter
    def has_parameter(self, has_parameter):
        """Sets the has_parameter of this ModelConfiguration.


        :param has_parameter: The has_parameter of this ModelConfiguration.  # noqa: E501
        :type: list[object]
        """

        self._has_parameter = has_parameter

    @property
    def has_explanation_diagram(self):
        """Gets the has_explanation_diagram of this ModelConfiguration.  # noqa: E501


        :return: The has_explanation_diagram of this ModelConfiguration.  # noqa: E501
        :rtype: list[object]
        """
        return self._has_explanation_diagram

    @has_explanation_diagram.setter
    def has_explanation_diagram(self, has_explanation_diagram):
        """Sets the has_explanation_diagram of this ModelConfiguration.


        :param has_explanation_diagram: The has_explanation_diagram of this ModelConfiguration.  # noqa: E501
        :type: list[object]
        """

        self._has_explanation_diagram = has_explanation_diagram

    @property
    def has_equation(self):
        """Gets the has_equation of this ModelConfiguration.  # noqa: E501


        :return: The has_equation of this ModelConfiguration.  # noqa: E501
        :rtype: list[Equation]
        """
        return self._has_equation

    @has_equation.setter
    def has_equation(self, has_equation):
        """Sets the has_equation of this ModelConfiguration.


        :param has_equation: The has_equation of this ModelConfiguration.  # noqa: E501
        :type: list[Equation]
        """

        self._has_equation = has_equation

    @property
    def has_output(self):
        """Gets the has_output of this ModelConfiguration.  # noqa: E501


        :return: The has_output of this ModelConfiguration.  # noqa: E501
        :rtype: list[object]
        """
        return self._has_output

    @has_output.setter
    def has_output(self, has_output):
        """Sets the has_output of this ModelConfiguration.


        :param has_output: The has_output of this ModelConfiguration.  # noqa: E501
        :type: list[object]
        """

        self._has_output = has_output

    @property
    def has_output_time_interval(self):
        """Gets the has_output_time_interval of this ModelConfiguration.  # noqa: E501


        :return: The has_output_time_interval of this ModelConfiguration.  # noqa: E501
        :rtype: list[TimeInterval]
        """
        return self._has_output_time_interval

    @has_output_time_interval.setter
    def has_output_time_interval(self, has_output_time_interval):
        """Sets the has_output_time_interval of this ModelConfiguration.


        :param has_output_time_interval: The has_output_time_interval of this ModelConfiguration.  # noqa: E501
        :type: list[TimeInterval]
        """

        self._has_output_time_interval = has_output_time_interval

    @property
    def has_input(self):
        """Gets the has_input of this ModelConfiguration.  # noqa: E501


        :return: The has_input of this ModelConfiguration.  # noqa: E501
        :rtype: list[object]
        """
        return self._has_input

    @has_input.setter
    def has_input(self, has_input):
        """Sets the has_input of this ModelConfiguration.


        :param has_input: The has_input of this ModelConfiguration.  # noqa: E501
        :type: list[object]
        """

        self._has_input = has_input

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
            else:
                continue                
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
