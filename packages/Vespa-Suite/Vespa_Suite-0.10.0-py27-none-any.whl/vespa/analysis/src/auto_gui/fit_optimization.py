# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.3 on Wed Sep 11 12:18:28 2019
#

import wx
from vespa.common.wx_gravy.widgets.floatspin_multiplier.floatspin_multiplier_base import FloatSpinMultiplier
from wx.lib.agw.floatspin import FloatSpin, EVT_FLOATSPIN, FS_LEFT, FS_RIGHT, FS_CENTRE, FS_READONLY

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class PanelOptimization(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: PanelOptimization.__init__
        kwds["style"] = kwds.get("style", 0) | wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        self.ComboOptimizeMethod = wx.ComboBox(self, wx.ID_ANY, choices=[], style=wx.CB_READONLY)
        self.CheckOptimizeScalingFlag = wx.CheckBox(self, wx.ID_ANY, "Parameter scaling")
        self.SpinOptimizeGlobalIterations = wx.SpinCtrl(self, wx.ID_ANY, "", min=0, max=100)
        self.FloatOptimizeStopTolerance = FloatSpinMultiplier(self, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, multiplier=1.1, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.SpinOptimizeMaxIterations = wx.SpinCtrl(self, wx.ID_ANY, "", min=0, max=100)
        self.static_line_11 = wx.StaticLine(self, wx.ID_ANY)
        self.FloatOptimizeLimitsRangeArea = FloatSpin(self, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatOptimizeLimitsRangePpm = FloatSpin(self, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatOptimizeLimitsRangePpmAlt = FloatSpin(self, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.checkApplyRangePpmAlt = wx.CheckBox(self, wx.ID_ANY, "Apply Freq (alt)")
        self.FloatOptimzeLimitsRangePhase0 = FloatSpin(self, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.SP_WRAP | wx.TE_PROCESS_ENTER)
        self.FloatOptimizeLimitsMinLinewidth = FloatSpin(self, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.StaticMaxLinewidth = wx.StaticText(self, wx.ID_ANY, "0.0")
        self.FloatOptimizeLimitsRangePhase1 = FloatSpin(self, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatOptimizeLimitsMaxLinewidth = FloatSpin(self, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.StaticMinLinewidth = wx.StaticText(self, wx.ID_ANY, "0.0")
        self.ComboOptimizeWeightsMethod = wx.ComboBox(self, wx.ID_ANY, choices=["Evenly weighted", "Locally weighted"], style=wx.CB_READONLY)
        self.PanelLocalWeights = wx.Panel(self, wx.ID_ANY)
        self.FloatOptimizeWeightsScaleFactor = FloatSpinMultiplier(self.PanelLocalWeights, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, multiplier=1.1, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatOptimizeWeightsWidthFactor = FloatSpin(self.PanelLocalWeights, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.CheckOptimizeWeightsWaterFlag = wx.CheckBox(self, wx.ID_ANY, " Apply Min in Water Region - Start:")
        self.FloatOptimizeWeightsWaterStart = FloatSpin(self, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        self.FloatOptimizeWeightsWaterEnd = FloatSpin(self, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        self.CheckOptimizeWeightsLipidFlag = wx.CheckBox(self, wx.ID_ANY, " Apply Min in Lipid Region   - Start:")
        self.FloatOptimizeWeightsLipidStart = FloatSpin(self, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        self.FloatOptimizeWeightsLipidEnd = FloatSpin(self, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        self.FloatOptimizeWeightsSmallPeakFactor = FloatSpin(self, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_COMBOBOX, self.on_optimize_method, self.ComboOptimizeMethod)
        self.Bind(wx.EVT_CHECKBOX, self.on_optimize_scaling_flag, self.CheckOptimizeScalingFlag)
        self.Bind(wx.EVT_SPINCTRL, self.on_optimize_global_iterations, self.SpinOptimizeGlobalIterations)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_stop_tolerance, self.FloatOptimizeStopTolerance)
        self.Bind(wx.EVT_SPINCTRL, self.on_optimize_max_iterations, self.SpinOptimizeMaxIterations)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_limits_range_area, self.FloatOptimizeLimitsRangeArea)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_limits_range_ppm, self.FloatOptimizeLimitsRangePpm)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_limits_range_ppm_alt, self.FloatOptimizeLimitsRangePpmAlt)
        self.Bind(wx.EVT_CHECKBOX, self.on_optimize_apply_range_ppm_alt, self.checkApplyRangePpmAlt)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_limits_range_phase0, self.FloatOptimzeLimitsRangePhase0)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_limits_min_linewidth, self.FloatOptimizeLimitsMinLinewidth)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_limits_range_phase1, self.FloatOptimizeLimitsRangePhase1)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_limits_max_linewidth, self.FloatOptimizeLimitsMaxLinewidth)
        self.Bind(wx.EVT_COMBOBOX, self.on_optimize_weights_method, self.ComboOptimizeWeightsMethod)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_weights_scale_factor, self.FloatOptimizeWeightsScaleFactor)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_weights_width_factor, self.FloatOptimizeWeightsWidthFactor)
        self.Bind(wx.EVT_CHECKBOX, self.on_optimize_weights_water_flag, self.CheckOptimizeWeightsWaterFlag)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_weights_water_start, self.FloatOptimizeWeightsWaterStart)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_weights_water_end, self.FloatOptimizeWeightsWaterEnd)
        self.Bind(wx.EVT_CHECKBOX, self.on_optimize_weights_lipid_flag, self.CheckOptimizeWeightsLipidFlag)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_weights_lipid_start, self.FloatOptimizeWeightsLipidStart)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_weights_lipid_end, self.FloatOptimizeWeightsLipidEnd)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_weights_small_peak_factor, self.FloatOptimizeWeightsSmallPeakFactor)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: PanelOptimization.__set_properties
        self.ComboOptimizeWeightsMethod.SetSelection(0)
        self.PanelLocalWeights.Hide()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: PanelOptimization.__do_layout
        sizer_51 = wx.BoxSizer(wx.VERTICAL)
        sizer_10 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Optimization Weight Calculation"), wx.VERTICAL)
        grid_sizer_7 = wx.FlexGridSizer(3, 4, 2, 2)
        sizer_69 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_68 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Bounds for Metabolite Model Parameters"), wx.VERTICAL)
        grid_sizer_11 = wx.FlexGridSizer(4, 6, 4, 4)
        grid_sizer_8 = wx.FlexGridSizer(2, 4, 2, 2)
        sizer_57 = wx.BoxSizer(wx.HORIZONTAL)
        label_4 = wx.StaticText(self, wx.ID_ANY, "Algorithm:")
        sizer_57.Add(label_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)
        sizer_57.Add(self.ComboOptimizeMethod, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_57.Add(self.CheckOptimizeScalingFlag, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 6)
        sizer_51.Add(sizer_57, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 8)
        labelIter = wx.StaticText(self, wx.ID_ANY, "Global Iterations:")
        grid_sizer_8.Add(labelIter, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.LEFT | wx.RIGHT, 3)
        grid_sizer_8.Add(self.SpinOptimizeGlobalIterations, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_8.Add((20, 20), 0, wx.EXPAND, 0)
        grid_sizer_8.Add((20, 20), 0, wx.EXPAND, 0)
        labelStop = wx.StaticText(self, wx.ID_ANY, "Stop Tolerance:")
        grid_sizer_8.Add(labelStop, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)
        grid_sizer_8.Add(self.FloatOptimizeStopTolerance, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)
        labelMaxIter = wx.StaticText(self, wx.ID_ANY, "Max Matrix Iter:")
        grid_sizer_8.Add(labelMaxIter, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)
        grid_sizer_8.Add(self.SpinOptimizeMaxIterations, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_51.Add(grid_sizer_8, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 4)
        sizer_51.Add(self.static_line_11, 0, wx.EXPAND, 0)
        labelMetabAmp = wx.StaticText(self, wx.ID_ANY, "Area +/- [%]:")
        grid_sizer_11.Add(labelMetabAmp, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)
        grid_sizer_11.Add(self.FloatOptimizeLimitsRangeArea, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_11.Add((20, 20), 0, 0, 0)
        grid_sizer_11.Add((20, 20), 0, 0, 0)
        grid_sizer_11.Add((20, 20), 0, 0, 0)
        grid_sizer_11.Add((20, 20), 0, 0, 0)
        labelMetabFreq = wx.StaticText(self, wx.ID_ANY, "Freq +/- [Hz]:")
        grid_sizer_11.Add(labelMetabFreq, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)
        grid_sizer_11.Add(self.FloatOptimizeLimitsRangePpm, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        labelMetabFreqAlt = wx.StaticText(self, wx.ID_ANY, "Freq (alt) +/- [Hz]:")
        grid_sizer_11.Add(labelMetabFreqAlt, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)
        grid_sizer_11.Add(self.FloatOptimizeLimitsRangePpmAlt, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_11.Add(self.checkApplyRangePpmAlt, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)
        grid_sizer_11.Add((20, 20), 0, 0, 0)
        labelMetabPh0 = wx.StaticText(self, wx.ID_ANY, "Ph0 +/- [Deg]:")
        grid_sizer_11.Add(labelMetabPh0, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)
        grid_sizer_11.Add(self.FloatOptimzeLimitsRangePhase0, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        labelTaTb1 = wx.StaticText(self, wx.ID_ANY, "Ta=Tb [s] Min of:")
        grid_sizer_11.Add(labelTaTb1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)
        grid_sizer_11.Add(self.FloatOptimizeLimitsMinLinewidth, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        labelMetabMinToMax = wx.StaticText(self, wx.ID_ANY, "-> Max LW [Hz]:")
        grid_sizer_11.Add(labelMetabMinToMax, 0, wx.ALIGN_CENTER | wx.ALL, 3)
        grid_sizer_11.Add(self.StaticMaxLinewidth, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)
        labelMetabPh1 = wx.StaticText(self, wx.ID_ANY, "Ph1 +/- [Deg]:")
        grid_sizer_11.Add(labelMetabPh1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)
        grid_sizer_11.Add(self.FloatOptimizeLimitsRangePhase1, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        labelTaTb2 = wx.StaticText(self, wx.ID_ANY, "Ta=Tb [s] Max of:")
        grid_sizer_11.Add(labelTaTb2, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)
        grid_sizer_11.Add(self.FloatOptimizeLimitsMaxLinewidth, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        labelMetabMaxToMin = wx.StaticText(self, wx.ID_ANY, "->  Min LW [Hz]:")
        grid_sizer_11.Add(labelMetabMaxToMin, 0, wx.ALIGN_CENTER | wx.ALL, 3)
        grid_sizer_11.Add(self.StaticMinLinewidth, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)
        sizer_5.Add(grid_sizer_11, 1, 0, 0)
        sizer_51.Add(sizer_5, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 8)
        label_5 = wx.StaticText(self, wx.ID_ANY, "Weight Scheme:")
        sizer_68.Add(label_5, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 2)
        sizer_68.Add(self.ComboOptimizeWeightsMethod, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 4)
        sizer_10.Add(sizer_68, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
        labelAreaWeight = wx.StaticText(self.PanelLocalWeights, wx.ID_ANY, "Local Scale Factor:")
        sizer_69.Add(labelAreaWeight, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)
        sizer_69.Add(self.FloatOptimizeWeightsScaleFactor, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 6)
        labelLWLocal = wx.StaticText(self.PanelLocalWeights, wx.ID_ANY, "Linewidth Multiplier:")
        sizer_69.Add(labelLWLocal, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 4)
        sizer_69.Add(self.FloatOptimizeWeightsWidthFactor, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        self.PanelLocalWeights.SetSizer(sizer_69)
        sizer_10.Add(self.PanelLocalWeights, 0, wx.EXPAND, 0)
        grid_sizer_7.Add(self.CheckOptimizeWeightsWaterFlag, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.RIGHT, 4)
        grid_sizer_7.Add(self.FloatOptimizeWeightsWaterStart, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 6)
        label_9 = wx.StaticText(self, wx.ID_ANY, "End:")
        grid_sizer_7.Add(label_9, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.LEFT | wx.RIGHT, 4)
        grid_sizer_7.Add(self.FloatOptimizeWeightsWaterEnd, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_7.Add(self.CheckOptimizeWeightsLipidFlag, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.RIGHT, 4)
        grid_sizer_7.Add(self.FloatOptimizeWeightsLipidStart, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 6)
        label_10 = wx.StaticText(self, wx.ID_ANY, "End:")
        grid_sizer_7.Add(label_10, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.LEFT | wx.RIGHT, 4)
        grid_sizer_7.Add(self.FloatOptimizeWeightsLipidEnd, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        label_34 = wx.StaticText(self, wx.ID_ANY, "Small Peaks Scale Factor:")
        grid_sizer_7.Add(label_34, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.RIGHT, 4)
        grid_sizer_7.Add(self.FloatOptimizeWeightsSmallPeakFactor, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_7.Add((20, 20), 0, wx.EXPAND, 0)
        grid_sizer_7.Add((20, 20), 0, wx.EXPAND, 0)
        sizer_10.Add(grid_sizer_7, 1, wx.EXPAND | wx.TOP, 4)
        sizer_51.Add(sizer_10, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 8)
        self.SetSizer(sizer_51)
        sizer_51.Fit(self)
        self.Layout()
        # end wxGlade

    def on_optimize_method(self, event):  # wxGlade: PanelOptimization.<event_handler>
        print("Event handler 'on_optimize_method' not implemented!")
        event.Skip()

    def on_optimize_scaling_flag(self, event):  # wxGlade: PanelOptimization.<event_handler>
        print("Event handler 'on_optimize_scaling_flag' not implemented!")
        event.Skip()

    def on_optimize_global_iterations(self, event):  # wxGlade: PanelOptimization.<event_handler>
        print("Event handler 'on_optimize_global_iterations' not implemented!")
        event.Skip()

    def on_optimize_stop_tolerance(self, event):  # wxGlade: PanelOptimization.<event_handler>
        print("Event handler 'on_optimize_stop_tolerance' not implemented!")
        event.Skip()

    def on_optimize_max_iterations(self, event):  # wxGlade: PanelOptimization.<event_handler>
        print("Event handler 'on_optimize_max_iterations' not implemented!")
        event.Skip()

    def on_optimize_limits_range_area(self, event):  # wxGlade: PanelOptimization.<event_handler>
        print("Event handler 'on_optimize_limits_range_area' not implemented!")
        event.Skip()

    def on_optimize_limits_range_ppm(self, event):  # wxGlade: PanelOptimization.<event_handler>
        print("Event handler 'on_optimize_limits_range_ppm' not implemented!")
        event.Skip()

    def on_optimize_limits_range_ppm_alt(self, event):  # wxGlade: PanelOptimization.<event_handler>
        print("Event handler 'on_optimize_limits_range_ppm_alt' not implemented!")
        event.Skip()

    def on_optimize_apply_range_ppm_alt(self, event):  # wxGlade: PanelOptimization.<event_handler>
        print("Event handler 'on_optimize_apply_range_ppm_alt' not implemented!")
        event.Skip()

    def on_optimize_limits_range_phase0(self, event):  # wxGlade: PanelOptimization.<event_handler>
        print("Event handler 'on_optimize_limits_range_phase0' not implemented!")
        event.Skip()

    def on_optimize_limits_min_linewidth(self, event):  # wxGlade: PanelOptimization.<event_handler>
        print("Event handler 'on_optimize_limits_min_linewidth' not implemented!")
        event.Skip()

    def on_optimize_limits_range_phase1(self, event):  # wxGlade: PanelOptimization.<event_handler>
        print("Event handler 'on_optimize_limits_range_phase1' not implemented!")
        event.Skip()

    def on_optimize_limits_max_linewidth(self, event):  # wxGlade: PanelOptimization.<event_handler>
        print("Event handler 'on_optimize_limits_max_linewidth' not implemented!")
        event.Skip()

    def on_optimize_weights_method(self, event):  # wxGlade: PanelOptimization.<event_handler>
        print("Event handler 'on_optimize_weights_method' not implemented!")
        event.Skip()

    def on_optimize_weights_scale_factor(self, event):  # wxGlade: PanelOptimization.<event_handler>
        print("Event handler 'on_optimize_weights_scale_factor' not implemented!")
        event.Skip()

    def on_optimize_weights_width_factor(self, event):  # wxGlade: PanelOptimization.<event_handler>
        print("Event handler 'on_optimize_weights_width_factor' not implemented!")
        event.Skip()

    def on_optimize_weights_water_flag(self, event):  # wxGlade: PanelOptimization.<event_handler>
        print("Event handler 'on_optimize_weights_water_flag' not implemented!")
        event.Skip()

    def on_optimize_weights_water_start(self, event):  # wxGlade: PanelOptimization.<event_handler>
        print("Event handler 'on_optimize_weights_water_start' not implemented!")
        event.Skip()

    def on_optimize_weights_water_end(self, event):  # wxGlade: PanelOptimization.<event_handler>
        print("Event handler 'on_optimize_weights_water_end' not implemented!")
        event.Skip()

    def on_optimize_weights_lipid_flag(self, event):  # wxGlade: PanelOptimization.<event_handler>
        print("Event handler 'on_optimize_weights_lipid_flag' not implemented!")
        event.Skip()

    def on_optimize_weights_lipid_start(self, event):  # wxGlade: PanelOptimization.<event_handler>
        print("Event handler 'on_optimize_weights_lipid_start' not implemented!")
        event.Skip()

    def on_optimize_weights_lipid_end(self, event):  # wxGlade: PanelOptimization.<event_handler>
        print("Event handler 'on_optimize_weights_lipid_end' not implemented!")
        event.Skip()

    def on_optimize_weights_small_peak_factor(self, event):  # wxGlade: PanelOptimization.<event_handler>
        print("Event handler 'on_optimize_weights_small_peak_factor' not implemented!")
        event.Skip()

# end of class PanelOptimization

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1314, 1069))
        self.PanelOptimization = PanelOptimization(self, wx.ID_ANY)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("frame_1")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(self.PanelOptimization, 0, 0, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

# end of class MyFrame
