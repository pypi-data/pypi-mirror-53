# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.3 on Mon Sep 30 18:51:50 2019
#

import wx
from vespa.common.wx_gravy.widgets.floatspin_multiplier.floatspin_multiplier_base import FloatSpinMultiplier
from wx.lib.agw.floatspin import FloatSpin, EVT_FLOATSPIN, FS_LEFT, FS_RIGHT, FS_CENTRE, FS_READONLY

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class PanelVoigtUI(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: PanelVoigtUI.__init__
        kwds["style"] = kwds.get("style", 0) | wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        self.SplitterWindow = wx.SplitterWindow(self, wx.ID_ANY, style=wx.SP_3D | wx.SP_BORDER)
        self.PanelVoigtControls = wx.Panel(self.SplitterWindow, wx.ID_ANY)
        self.VoigtNotebook = wx.Notebook(self.PanelVoigtControls, wx.ID_ANY, style=0)
        self.PanelMetabolite = wx.Panel(self.VoigtNotebook, wx.ID_ANY)
        self.ButtonPriorInformationFromDatabase = wx.Button(self.PanelMetabolite, wx.ID_ANY, "Prior Information From Database...")
        self.ButtonPriorInformationFromFile = wx.Button(self.PanelMetabolite, wx.ID_ANY, "Prior Information from File...")
        self.TextPriorInformationSource = wx.TextCtrl(self.PanelMetabolite, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.FloatPriorPpmStart = FloatSpin(self.PanelMetabolite, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatPriorPpmEnd = FloatSpin(self.PanelMetabolite, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.PanelMetaboliteLines = wx.ScrolledWindow(self.PanelMetabolite, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
        self.LabelMetabolites = wx.StaticText(self.PanelMetaboliteLines, wx.ID_ANY, "placeholder")
        self.ComboLineshapeModel = wx.ComboBox(self.PanelMetabolite, wx.ID_ANY, choices=["Voigt", "Gaussian", "Lorentzian"], style=wx.CB_READONLY)
        self.CheckPriorCalculateCombinations = wx.CheckBox(self.PanelMetabolite, wx.ID_ANY, "Calculate Metabolite Combinations (e.g. Cr+PCr)")
        self.PanelInitialValues = wx.Panel(self.VoigtNotebook, wx.ID_ANY)
        self.ComboInitialB0ShiftMethod = wx.ComboBox(self.PanelInitialValues, wx.ID_ANY, choices=[], style=wx.CB_READONLY)
        self.FloatB0ShiftValue = FloatSpin(self.PanelInitialValues, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        self.ComboInitialBaselineMethod = wx.ComboBox(self.PanelInitialValues, wx.ID_ANY, choices=[], style=wx.CB_READONLY)
        self.PanelBaselineInitLowess = wx.Panel(self.PanelInitialValues, wx.ID_ANY)
        self.FloatBaselineInitIgnoreWidth = FloatSpin(self.PanelBaselineInitLowess, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        self.FloatInitialBaselineLowessWidth = FloatSpin(self.PanelBaselineInitLowess, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        self.CheckInitialPeakSearchAbs = wx.CheckBox(self.PanelInitialValues, wx.ID_ANY, " Area from abs(Real) data")
        self.ComboInitialSmallPeakAreas = wx.ComboBox(self.PanelInitialValues, wx.ID_ANY, choices=[], style=wx.CB_READONLY)
        self.CheckInitialCrChoSeparation = wx.CheckBox(self.PanelInitialValues, wx.ID_ANY, " Cho/Cr 0.2 PPM separation")
        self.ComboInitialSmallPeakFreqs = wx.ComboBox(self.PanelInitialValues, wx.ID_ANY, choices=[], style=wx.CB_READONLY)
        self.ComboInitialLinewidthMethod = wx.ComboBox(self.PanelInitialValues, wx.ID_ANY, choices=[], style=wx.CB_READONLY)
        self.FloatLinewidthValue = FloatSpin(self.PanelInitialValues, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        self.PanelInitialLinewidth = wx.Panel(self.PanelInitialValues, wx.ID_ANY)
        self.FloatInitialLinewidthStart = FloatSpin(self.PanelInitialLinewidth, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        self.FloatInitialLinewidthEnd = FloatSpin(self.PanelInitialLinewidth, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        self.FloatInitialLinewidthMultiplier = FloatSpin(self.PanelInitialLinewidth, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=0.1, agwStyle=FS_LEFT, style=0)
        self.ComboInitialPhaseMethod = wx.ComboBox(self.PanelInitialValues, wx.ID_ANY, choices=["Manual", "Correlation - Phase0 only", "Correlation - Phase0+Phase1", "Integration - Phase0 only", "Integration - Phase0+Phase1"], style=wx.CB_READONLY)
        self.FloatInitialPhase0Value = FloatSpin(self.PanelInitialValues, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        self.FloatInitialPhase1Value = FloatSpin(self.PanelInitialValues, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        self.PanelKOFilter = wx.Panel(self.PanelInitialValues, wx.ID_ANY)
        self.CheckApplyKoFilter = wx.CheckBox(self.PanelKOFilter, wx.ID_ANY, " Apply Filter ")
        self.SpinInitialKOLinewidthMinimum = wx.SpinCtrl(self.PanelKOFilter, wx.ID_ANY, "", min=0, max=100)
        self.SpinInitialKOPoints = wx.SpinCtrl(self.PanelKOFilter, wx.ID_ANY, "", min=0, max=100)
        self.PanelBaseline = wx.Panel(self.VoigtNotebook, wx.ID_ANY)
        self.ComboBaselineMethod = wx.ComboBox(self.PanelBaseline, wx.ID_ANY, choices=[], style=wx.CB_READONLY)
        self.CheckBaselineSmoothingFlag = wx.CheckBox(self.PanelBaseline, wx.ID_ANY, " Smooth whole metabolite region")
        self.CheckBaselineSkipLastSmooth = wx.CheckBox(self.PanelBaseline, wx.ID_ANY, " Smoothing OFF for last iteration")
        self.FloatBaselineSmoothingWidth = FloatSpin(self.PanelBaseline, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatBaselineUnderestimate = FloatSpin(self.PanelBaseline, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.PanelBaselineParameters = wx.Panel(self.PanelBaseline, wx.ID_ANY)
        self.PanelBsplineParameters = wx.Panel(self.PanelBaselineParameters, wx.ID_ANY)
        self.SpinBaselineSplineNknots = wx.SpinCtrl(self.PanelBsplineParameters, wx.ID_ANY, "", min=0, max=100)
        self.FloatBaselineSplineSpacing = FloatSpin(self.PanelBsplineParameters, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.StaticHzSpacing = wx.StaticText(self.PanelBsplineParameters, wx.ID_ANY, "xx.yyyy")
        self.labelOrder = wx.StaticText(self.PanelBsplineParameters, wx.ID_ANY, "Order of B-splines:")
        self.SpinBaselineSplineOrder = wx.SpinCtrl(self.PanelBsplineParameters, wx.ID_ANY, "", min=0, max=100)
        self.PanelWaveletParameters = wx.Panel(self.PanelBaselineParameters, wx.ID_ANY)
        self.ComboBaselineWaveletScale = wx.ComboBox(self.PanelWaveletParameters, wx.ID_ANY, choices=[], style=wx.CB_READONLY)
        self.FloatBaselineWaveletMinDyad = FloatSpin(self.PanelWaveletParameters, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        self.PanelMacromol = wx.Panel(self.VoigtNotebook, wx.ID_ANY)
        self.ComboMmolModel = wx.ComboBox(self.PanelMacromol, wx.ID_ANY, choices=[], style=wx.CB_READONLY)
        self.PanelMmolSingleDataset = wx.Panel(self.PanelMacromol, wx.ID_ANY)
        self.ButtonMmolSingleDataset = wx.Button(self.PanelMmolSingleDataset, wx.ID_ANY, "Browse Datasets ...")
        self.TextMmolSingleDataset = wx.TextCtrl(self.PanelMmolSingleDataset, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.ComboMmolSingleDatasetInitVal = wx.ComboBox(self.PanelMmolSingleDataset, wx.ID_ANY, choices=[], style=wx.CB_READONLY)
        self.FloatMmolSingleDatasetStartArea = FloatSpin(self.PanelMmolSingleDataset, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        self.FloatMmolSingleDatasetStartFudge = FloatSpin(self.PanelMmolSingleDataset, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        self.label_19 = wx.StaticText(self.PanelMmolSingleDataset, wx.ID_ANY, "  InitVal Range [ppm] - Start : ", style=wx.ALIGN_RIGHT)
        self.FloatMmolSingleDatasetPpmStart = FloatSpin(self.PanelMmolSingleDataset, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        self.FloatMmolSingleDatasetPpmEnd = FloatSpin(self.PanelMmolSingleDataset, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        self.label_21 = wx.StaticText(self.PanelMmolSingleDataset, wx.ID_ANY, "Area Scale - Max [mult] : ")
        self.FloatMmolSingleDatasetLimitMax = FloatSpin(self.PanelMmolSingleDataset, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        self.label_22 = wx.StaticText(self.PanelMmolSingleDataset, wx.ID_ANY, "  Min [mult] : ")
        self.FloatMmolSingleDatasetLimitMin = FloatSpin(self.PanelMmolSingleDataset, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        self.PanelOptimization = wx.Panel(self.VoigtNotebook, wx.ID_ANY)
        self.ComboOptimizeMethod = wx.ComboBox(self.PanelOptimization, wx.ID_ANY, choices=[], style=wx.CB_READONLY)
        self.CheckOptimizeScalingFlag = wx.CheckBox(self.PanelOptimization, wx.ID_ANY, "Parameter scaling")
        self.SpinOptimizeGlobalIterations = wx.SpinCtrl(self.PanelOptimization, wx.ID_ANY, "", min=0, max=100)
        self.FloatOptimizeStopTolerance = FloatSpinMultiplier(self.PanelOptimization, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, multiplier=1.1, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.SpinOptimizeMaxIterations = wx.SpinCtrl(self.PanelOptimization, wx.ID_ANY, "", min=0, max=100)
        self.static_line_11 = wx.StaticLine(self.PanelOptimization, wx.ID_ANY)
        self.ComboOptimizeWeightsMethod = wx.ComboBox(self.PanelOptimization, wx.ID_ANY, choices=["Evenly weighted", "Locally weighted"], style=wx.CB_READONLY)
        self.PanelLocalWeights = wx.Panel(self.PanelOptimization, wx.ID_ANY)
        self.FloatOptimizeWeightsScaleFactor = FloatSpinMultiplier(self.PanelLocalWeights, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, multiplier=1.1, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatOptimizeWeightsWidthFactor = FloatSpin(self.PanelLocalWeights, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.CheckOptimizeWeightsWaterFlag = wx.CheckBox(self.PanelOptimization, wx.ID_ANY, " Apply Min in Water Region - Start:")
        self.FloatOptimizeWeightsWaterStart = FloatSpin(self.PanelOptimization, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        self.FloatOptimizeWeightsWaterEnd = FloatSpin(self.PanelOptimization, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        self.CheckOptimizeWeightsLipidFlag = wx.CheckBox(self.PanelOptimization, wx.ID_ANY, " Apply Min in Lipid Region   - Start:")
        self.FloatOptimizeWeightsLipidStart = FloatSpin(self.PanelOptimization, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        self.FloatOptimizeWeightsLipidEnd = FloatSpin(self.PanelOptimization, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        self.FloatOptimizeWeightsSmallPeakFactor = FloatSpin(self.PanelOptimization, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        self.FloatOptimizeBoundsAreaMax = FloatSpin(self.PanelOptimization, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatOptimizeBoundsAreaMin = FloatSpin(self.PanelOptimization, wx.ID_ANY, value=0.0, digits=3, min_val=0.001, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatOptimizeBoundsAreaMaxSmall = FloatSpin(self.PanelOptimization, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatOptimizeBoundsAreaMinSmall = FloatSpin(self.PanelOptimization, wx.ID_ANY, value=0.0, digits=3, min_val=0.001, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.CheckEnableBoundsAreaSmall = wx.CheckBox(self.PanelOptimization, wx.ID_ANY, "Enable")
        self.FloatOptimizeBoundsRangePpm = FloatSpin(self.PanelOptimization, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatOptimizeBoundsRangePpmSmall = FloatSpin(self.PanelOptimization, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.CheckEnableBoundsPpmSmall = wx.CheckBox(self.PanelOptimization, wx.ID_ANY, "Enable")
        self.FloatOptimizeBoundsRangePhase0 = FloatSpin(self.PanelOptimization, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.SP_WRAP | wx.TE_PROCESS_ENTER)
        self.FloatOptimizeBoundsMinLinewidth = FloatSpin(self.PanelOptimization, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.StaticMaxLinewidth = wx.StaticText(self.PanelOptimization, wx.ID_ANY, "0.0")
        self.FloatOptimizeBoundsRangePhase1 = FloatSpin(self.PanelOptimization, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatOptimizeBoundsMaxLinewidth = FloatSpin(self.PanelOptimization, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.StaticMinLinewidth = wx.StaticText(self.PanelOptimization, wx.ID_ANY, "0.0")
        self.PanelOptimizeConstraintChecks = wx.Panel(self.PanelOptimization, wx.ID_ANY)
        self.CheckOptimizeConstrainPpmNaaNaag = wx.CheckBox(self.PanelOptimizeConstraintChecks, wx.ID_ANY, "  Fix frequency separation - NAAG to NAA ")
        self.CheckOptimizeConstrainPpmCrPcr = wx.CheckBox(self.PanelOptimizeConstraintChecks, wx.ID_ANY, "  Fix frequency separation - PCr to Cr ")
        self.CheckOptimizeConstrainPpmGpcPcho = wx.CheckBox(self.PanelOptimizeConstraintChecks, wx.ID_ANY, "  Fix frequency separation - PCho to GPc")
        self.CheckOptimizeConstrainPpmCr2Pcr2 = wx.CheckBox(self.PanelOptimizeConstraintChecks, wx.ID_ANY, "  Fix frequency separation - PCr2 to Cr2 ")
        self.CheckOptimizeConstrainPpmGluGln = wx.CheckBox(self.PanelOptimizeConstraintChecks, wx.ID_ANY, "  Fix frequency separation - Gln to Glu")
        self.CheckOptimizeConstrainPpmTauGlc = wx.CheckBox(self.PanelOptimizeConstraintChecks, wx.ID_ANY, "  Fix frequency separation - Glc to Tau ")
        self.PanelQuality = wx.Panel(self.VoigtNotebook, wx.ID_ANY)
        self.CheckConfidenceIntervalsFlag = wx.CheckBox(self.PanelQuality, wx.ID_ANY, " Do Confidence Intervals")
        self.labelAlpha = wx.StaticText(self.PanelQuality, wx.ID_ANY, "Alpha:")
        self.FloatConfidenceAlpha = FloatSpin(self.PanelQuality, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.labelCalc = wx.StaticText(self.PanelQuality, wx.ID_ANY, "Calculate for: ")
        self.CheckConfidenceAreaFlagFlag = wx.CheckBox(self.PanelQuality, wx.ID_ANY, "Area")
        self.CheckCofidencePpmFlag = wx.CheckBox(self.PanelQuality, wx.ID_ANY, "PPM  ")
        self.CheckConfidenceLinewidthFlag = wx.CheckBox(self.PanelQuality, wx.ID_ANY, "Linewidth")
        self.CheckConfidencePhaseFlag = wx.CheckBox(self.PanelQuality, wx.ID_ANY, "Phase")
        self.CheckCramerRaoFlag = wx.CheckBox(self.PanelQuality, wx.ID_ANY, " Do Cramer-Rao Bounds")
        self.labelNoiseStr = wx.StaticText(self.PanelQuality, wx.ID_ANY, "Start: ")
        self.FloatCramerRaoPpmStart = FloatSpin(self.PanelQuality, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.labelNoiseEnd = wx.StaticText(self.PanelQuality, wx.ID_ANY, "End: ")
        self.FloatCramerRaoPpmEnd = FloatSpin(self.PanelQuality, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.PanelResults = wx.Panel(self.VoigtNotebook, wx.ID_ANY)
        self.LabelHtmlPlaceholder = wx.StaticText(self.PanelResults, wx.ID_ANY, "HTML Placeholder")
        self.ButtonOutputResultsToHtml = wx.Button(self.PanelResults, wx.ID_ANY, "Output to HTML...")
        self.ButtonOutputResultsToCsv = wx.Button(self.PanelResults, wx.ID_ANY, "Output to CSV...")
        self.ButtonUpdateInitialValues = wx.Button(self.PanelVoigtControls, wx.ID_ANY, "Update Initial Values")
        self.CheckAutoInitialValues = wx.CheckBox(self.PanelVoigtControls, wx.ID_ANY, "Auto")
        self.ButtonFitSpectrum = wx.Button(self.PanelVoigtControls, wx.ID_ANY, "Fit the Spectrum")
        self.ButtonBatchFitAll = wx.Button(self.PanelVoigtControls, wx.ID_ANY, "Batch Process All Voxels")
        self.ButtonPloink = wx.Button(self.PanelVoigtControls, wx.ID_ANY, "Ploink")
        self.window_1_pane_2 = wx.Panel(self.SplitterWindow, wx.ID_ANY)
        self.PanelViewVoigt = wx.Panel(self.window_1_pane_2, wx.ID_ANY)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.on_prior_information_from_database, self.ButtonPriorInformationFromDatabase)
        self.Bind(wx.EVT_BUTTON, self.on_prior_information_from_file, self.ButtonPriorInformationFromFile)
        self.Bind( EVT_FLOATSPIN, self.on_prior_ppm_start, self.FloatPriorPpmStart)
        self.Bind( EVT_FLOATSPIN, self.on_prior_ppm_end, self.FloatPriorPpmEnd)
        self.Bind(wx.EVT_COMBOBOX, self.on_lineshape_model, self.ComboLineshapeModel)
        self.Bind(wx.EVT_CHECKBOX, self.on_prior_calculate_combinations, self.CheckPriorCalculateCombinations)
        self.Bind(wx.EVT_COMBOBOX, self.on_b0_shift_method, self.ComboInitialB0ShiftMethod)
        self.Bind( EVT_FLOATSPIN, self.on_b0_shift_value, self.FloatB0ShiftValue)
        self.Bind(wx.EVT_COMBOBOX, self.on_initial_baseline_method, self.ComboInitialBaselineMethod)
        self.Bind( EVT_FLOATSPIN, self.on_initial_baseline_ignore_width, self.FloatBaselineInitIgnoreWidth)
        self.Bind( EVT_FLOATSPIN, self.on_initial_baseline_lowess_width, self.FloatInitialBaselineLowessWidth)
        self.Bind(wx.EVT_CHECKBOX, self.on_initial_peak_search_abs, self.CheckInitialPeakSearchAbs)
        self.Bind(wx.EVT_COMBOBOX, self.on_initial_small_peak_areas, self.ComboInitialSmallPeakAreas)
        self.Bind(wx.EVT_CHECKBOX, self.on_initial_cr_cho_separation, self.CheckInitialCrChoSeparation)
        self.Bind(wx.EVT_COMBOBOX, self.on_initial_small_peak_freqs, self.ComboInitialSmallPeakFreqs)
        self.Bind(wx.EVT_COMBOBOX, self.on_initial_linewidth_method, self.ComboInitialLinewidthMethod)
        self.Bind( EVT_FLOATSPIN, self.on_linewidth_value, self.FloatLinewidthValue)
        self.Bind( EVT_FLOATSPIN, self.on_initial_linewidth_start, self.FloatInitialLinewidthStart)
        self.Bind( EVT_FLOATSPIN, self.on_initial_linewidth_end, self.FloatInitialLinewidthEnd)
        self.Bind( EVT_FLOATSPIN, self.on_initial_linewidth_multiplier, self.FloatInitialLinewidthMultiplier)
        self.Bind(wx.EVT_COMBOBOX, self.on_initial_phase_method, self.ComboInitialPhaseMethod)
        self.Bind( EVT_FLOATSPIN, self.on_initial_phase0_value, self.FloatInitialPhase0Value)
        self.Bind( EVT_FLOATSPIN, self.on_initial_phase1_value, self.FloatInitialPhase1Value)
        self.Bind(wx.EVT_CHECKBOX, self.on_apply_ko_filter, self.CheckApplyKoFilter)
        self.Bind(wx.EVT_SPINCTRL, self.on_initial_ko_linewidth_minimum, self.SpinInitialKOLinewidthMinimum)
        self.Bind(wx.EVT_SPINCTRL, self.on_initial_ko_points, self.SpinInitialKOPoints)
        self.Bind(wx.EVT_COMBOBOX, self.on_baseline_method, self.ComboBaselineMethod)
        self.Bind(wx.EVT_CHECKBOX, self.on_baseline_smoothing_flag, self.CheckBaselineSmoothingFlag)
        self.Bind(wx.EVT_CHECKBOX, self.on_baseline_skip_last_smooth, self.CheckBaselineSkipLastSmooth)
        self.Bind( EVT_FLOATSPIN, self.on_baseline_smoothing_width, self.FloatBaselineSmoothingWidth)
        self.Bind( EVT_FLOATSPIN, self.on_baseline_underestimate, self.FloatBaselineUnderestimate)
        self.Bind(wx.EVT_SPINCTRL, self.on_baseline_spline_nknots, self.SpinBaselineSplineNknots)
        self.Bind( EVT_FLOATSPIN, self.on_baseline_spline_spacing, self.FloatBaselineSplineSpacing)
        self.Bind(wx.EVT_SPINCTRL, self.on_baseline_spline_order, self.SpinBaselineSplineOrder)
        self.Bind(wx.EVT_COMBOBOX, self.on_baseline_wavelet_scale, self.ComboBaselineWaveletScale)
        self.Bind( EVT_FLOATSPIN, self.on_baseline_wavelet_min_dyad, self.FloatBaselineWaveletMinDyad)
        self.Bind(wx.EVT_COMBOBOX, self.on_mmol_model, self.ComboMmolModel)
        self.Bind(wx.EVT_BUTTON, self.on_mmol_single_dataset, self.ButtonMmolSingleDataset)
        self.Bind(wx.EVT_COMBOBOX, self.on_mmol_single_dataset_initval, self.ComboMmolSingleDatasetInitVal)
        self.Bind( EVT_FLOATSPIN, self.on_mmol_single_dataset_start_area, self.FloatMmolSingleDatasetStartArea)
        self.Bind( EVT_FLOATSPIN, self.on_mmol_single_dataset_start_fudge, self.FloatMmolSingleDatasetStartFudge)
        self.Bind( EVT_FLOATSPIN, self.on_mmol_single_dataset_ppm_start, self.FloatMmolSingleDatasetPpmStart)
        self.Bind( EVT_FLOATSPIN, self.on_mmol_single_dataset_ppm_end, self.FloatMmolSingleDatasetPpmEnd)
        self.Bind( EVT_FLOATSPIN, self.on_mmol_single_dataset_limit_max, self.FloatMmolSingleDatasetLimitMax)
        self.Bind( EVT_FLOATSPIN, self.on_mmol_single_dataset_limit_min, self.FloatMmolSingleDatasetLimitMin)
        self.Bind(wx.EVT_COMBOBOX, self.on_optimize_method, self.ComboOptimizeMethod)
        self.Bind(wx.EVT_CHECKBOX, self.on_optimize_scaling_flag, self.CheckOptimizeScalingFlag)
        self.Bind(wx.EVT_SPINCTRL, self.on_optimize_global_iterations, self.SpinOptimizeGlobalIterations)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_stop_tolerance, self.FloatOptimizeStopTolerance)
        self.Bind(wx.EVT_SPINCTRL, self.on_optimize_max_iterations, self.SpinOptimizeMaxIterations)
        self.Bind(wx.EVT_COMBOBOX, self.on_optimize_weights_method, self.ComboOptimizeWeightsMethod)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_weights_scale_factor, self.FloatOptimizeWeightsScaleFactor)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_weights_width_factor, self.FloatOptimizeWeightsWidthFactor)
        self.Bind(wx.EVT_CHECKBOX, self.on_optimize_weights_water_flag, self.CheckOptimizeWeightsWaterFlag)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_weights_water_start, self.FloatOptimizeWeightsWaterStart)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_weights_water_end, self.FloatOptimizeWeightsWaterEnd)
        self.Bind(wx.EVT_CHECKBOX, self.on_optimize_weights_lipid_flag, self.CheckOptimizeWeightsLipidFlag)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_weights_lipid_start, self.FloatOptimizeWeightsLipidStart)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_weights_lipid_end, self.FloatOptimizeWeightsLipidEnd)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_weights_small_peak_factor, self.FloatOptimizeWeightsSmallPeakFactor)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_bounds_area_max, self.FloatOptimizeBoundsAreaMax)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_bounds_area_min, self.FloatOptimizeBoundsAreaMin)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_bounds_area_max_small, self.FloatOptimizeBoundsAreaMaxSmall)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_bounds_area_min_small, self.FloatOptimizeBoundsAreaMinSmall)
        self.Bind(wx.EVT_CHECKBOX, self.on_optimize_enable_bounds_area_small, self.CheckEnableBoundsAreaSmall)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_bounds_range_ppm, self.FloatOptimizeBoundsRangePpm)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_bounds_range_ppm_small, self.FloatOptimizeBoundsRangePpmSmall)
        self.Bind(wx.EVT_CHECKBOX, self.on_optimize_enable_bounds_ppm_small, self.CheckEnableBoundsPpmSmall)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_bounds_range_phase0, self.FloatOptimizeBoundsRangePhase0)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_bounds_min_linewidth, self.FloatOptimizeBoundsMinLinewidth)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_bounds_range_phase1, self.FloatOptimizeBoundsRangePhase1)
        self.Bind( EVT_FLOATSPIN, self.on_optimize_bounds_max_linewidth, self.FloatOptimizeBoundsMaxLinewidth)
        self.Bind(wx.EVT_CHECKBOX, self.on_optimize_constrain_ppm_naa_naag, self.CheckOptimizeConstrainPpmNaaNaag)
        self.Bind(wx.EVT_CHECKBOX, self.on_optimize_constrain_ppm_cr_pcr, self.CheckOptimizeConstrainPpmCrPcr)
        self.Bind(wx.EVT_CHECKBOX, self.on_optimize_constrain_ppm_gpc_pcho, self.CheckOptimizeConstrainPpmGpcPcho)
        self.Bind(wx.EVT_CHECKBOX, self.on_optimize_constrain_ppm_cr2_pcr2, self.CheckOptimizeConstrainPpmCr2Pcr2)
        self.Bind(wx.EVT_CHECKBOX, self.on_optimize_constrain_ppm_glu_gln, self.CheckOptimizeConstrainPpmGluGln)
        self.Bind(wx.EVT_CHECKBOX, self.on_optimize_constrain_ppm_tau_glc, self.CheckOptimizeConstrainPpmTauGlc)
        self.Bind(wx.EVT_CHECKBOX, self.on_confidence_intervals_flag, self.CheckConfidenceIntervalsFlag)
        self.Bind( EVT_FLOATSPIN, self.on_confidence_alpha, self.FloatConfidenceAlpha)
        self.Bind(wx.EVT_CHECKBOX, self.on_confidence_area_flag, self.CheckConfidenceAreaFlagFlag)
        self.Bind(wx.EVT_CHECKBOX, self.on_confidence_ppm_flag, self.CheckCofidencePpmFlag)
        self.Bind(wx.EVT_CHECKBOX, self.on_confidence_linewidth_flag, self.CheckConfidenceLinewidthFlag)
        self.Bind(wx.EVT_CHECKBOX, self.on_confidence_phase_flag, self.CheckConfidencePhaseFlag)
        self.Bind(wx.EVT_CHECKBOX, self.on_cramer_rao_flag, self.CheckCramerRaoFlag)
        self.Bind( EVT_FLOATSPIN, self.on_cramer_rao_ppm_start, self.FloatCramerRaoPpmStart)
        self.Bind( EVT_FLOATSPIN, self.on_cramer_rao_ppm_end, self.FloatCramerRaoPpmEnd)
        self.Bind(wx.EVT_BUTTON, self.on_output_results_to_html, self.ButtonOutputResultsToHtml)
        self.Bind(wx.EVT_BUTTON, self.on_output_results_to_csv, self.ButtonOutputResultsToCsv)
        self.Bind(wx.EVT_BUTTON, self.on_update_initial_values, self.ButtonUpdateInitialValues)
        self.Bind(wx.EVT_CHECKBOX, self.on_auto_initial_values, self.CheckAutoInitialValues)
        self.Bind(wx.EVT_BUTTON, self.on_fit_spectrum, self.ButtonFitSpectrum)
        self.Bind(wx.EVT_BUTTON, self.on_batch_fit_all, self.ButtonBatchFitAll)
        self.Bind(wx.EVT_BUTTON, self.on_ploink, self.ButtonPloink)
        self.Bind(wx.EVT_SPLITTER_SASH_POS_CHANGED, self.on_splitter, self.SplitterWindow)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: PanelVoigtUI.__set_properties
        self.PanelMetaboliteLines.SetScrollRate(10, 10)
        self.ComboLineshapeModel.SetSelection(0)
        self.CheckPriorCalculateCombinations.SetToolTip("In the results, calculate metaboltie combinations (e.g. Cr+PCr, Tau+Glc, etc.) if necessary metabolites are part of the basis")
        self.ComboInitialB0ShiftMethod.SetMinSize((180, -1))
        self.FloatB0ShiftValue.SetMinSize((90, -1))
        self.ComboInitialBaselineMethod.SetMinSize((180, -1))
        self.FloatBaselineInitIgnoreWidth.SetMinSize((90, -1))
        self.FloatInitialBaselineLowessWidth.SetMinSize((90, -1))
        self.CheckInitialCrChoSeparation.SetValue(1)
        self.ComboInitialLinewidthMethod.SetMinSize((180, -1))
        self.FloatLinewidthValue.SetMinSize((90,-1))
        self.FloatInitialLinewidthStart.SetMinSize((90, -1))
        self.FloatInitialLinewidthEnd.SetMinSize((90, -1))
        self.FloatInitialLinewidthMultiplier.SetMinSize((90, -1))
        self.ComboInitialPhaseMethod.SetMinSize((180, -1))
        self.ComboInitialPhaseMethod.SetSelection(0)
        self.FloatInitialPhase0Value.SetMinSize((90, -1))
        self.FloatInitialPhase1Value.SetMinSize((90, -1))
        self.SpinInitialKOLinewidthMinimum.SetMinSize((60, -1))
        self.SpinInitialKOPoints.SetMinSize((60, -1))
        self.CheckBaselineSkipLastSmooth.SetValue(1)
        self.SpinBaselineSplineNknots.SetMinSize((60, -1))
        self.FloatBaselineSplineSpacing.SetMinSize((60, -1))
        self.SpinBaselineSplineOrder.SetMinSize((60, -1))
        self.ComboOptimizeWeightsMethod.SetSelection(0)
        self.PanelLocalWeights.Hide()
        self.CheckOptimizeConstrainPpmNaaNaag.SetToolTip("Both NAA and NAAG must be enabled in the metabolite basis for this constraint to be set.")
        self.CheckOptimizeConstrainPpmCrPcr.SetToolTip("Both Cr and PCr must be enabled in the metabolite basis for this constraint to be set.\n")
        self.CheckOptimizeConstrainPpmGpcPcho.SetToolTip("Both GPc and PCho must be enabled in the metabolite basis for this constraint to be set.\n")
        self.CheckOptimizeConstrainPpmCr2Pcr2.SetToolTip("Both Cr2 and PCr2 must be enabled in the metabolite basis for this constraint to be set.\n")
        self.CheckOptimizeConstrainPpmGluGln.SetToolTip("Both Glu and Gln must be enabled in the metabolite basis for this constraint to be set.\n")
        self.CheckOptimizeConstrainPpmTauGlc.SetToolTip("Both Tau and Glc must be enabled in the metabolite basis for this constraint to be set.\n")
        self.CheckAutoInitialValues.SetValue(1)
        self.ButtonPloink.Hide()
        self.SplitterWindow.SetMinimumPaneSize(20)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: PanelVoigtUI.__do_layout
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_38 = wx.BoxSizer(wx.VERTICAL)
        sizer_28 = wx.BoxSizer(wx.VERTICAL)
        sizer_2_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_35 = wx.BoxSizer(wx.VERTICAL)
        sizer_56 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_23 = wx.BoxSizer(wx.VERTICAL)
        sizer_71 = wx.BoxSizer(wx.VERTICAL)
        sizer_33 = wx.StaticBoxSizer(wx.StaticBox(self.PanelQuality, wx.ID_ANY, "Cramer-Rao Bounds"), wx.VERTICAL)
        sizer_75 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_74 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9 = wx.StaticBoxSizer(wx.StaticBox(self.PanelQuality, wx.ID_ANY, "Confidence Intervals"), wx.VERTICAL)
        sizer_73 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_72 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_51 = wx.BoxSizer(wx.VERTICAL)
        sizer_26 = wx.StaticBoxSizer(wx.StaticBox(self.PanelOptimizeConstraintChecks, wx.ID_ANY, "Constraints between Metabolite Model Parameters"), wx.VERTICAL)
        sizer_5 = wx.StaticBoxSizer(wx.StaticBox(self.PanelOptimization, wx.ID_ANY, "Bounds for Model Parameters"), wx.VERTICAL)
        sizer_39 = wx.StaticBoxSizer(wx.StaticBox(self.PanelOptimization, wx.ID_ANY, "     Global Parameter Bounds"), wx.VERTICAL)
        grid_sizer_11 = wx.FlexGridSizer(2, 6, 4, 4)
        sizer_36 = wx.StaticBoxSizer(wx.StaticBox(self.PanelOptimization, wx.ID_ANY, "     Metabolite-Specific Parameter Bounds"), wx.VERTICAL)
        grid_sizer_1 = wx.FlexGridSizer(4, 6, 4, 4)
        sizer_10 = wx.StaticBoxSizer(wx.StaticBox(self.PanelOptimization, wx.ID_ANY, "Optimization Weight Calculation"), wx.VERTICAL)
        grid_sizer_7 = wx.FlexGridSizer(3, 4, 2, 2)
        sizer_69 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_68 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_8 = wx.FlexGridSizer(2, 4, 2, 2)
        sizer_57 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_25 = wx.StaticBoxSizer(wx.StaticBox(self.PanelMmolSingleDataset, wx.ID_ANY, "Select Single Basis Dataset"), wx.VERTICAL)
        sizer_31 = wx.StaticBoxSizer(wx.StaticBox(self.PanelMmolSingleDataset, wx.ID_ANY, "Constraints"), wx.VERTICAL)
        sizer_32 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_29 = wx.StaticBoxSizer(wx.StaticBox(self.PanelMmolSingleDataset, wx.ID_ANY, "Initial Values"), wx.VERTICAL)
        grid_sizer_3 = wx.FlexGridSizer(2, 4, 4, 4)
        sizer_27 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_25_copy = wx.StaticBoxSizer(wx.StaticBox(self.PanelMmolSingleDataset, wx.ID_ANY, ""), wx.HORIZONTAL)
        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_20 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_19 = wx.StaticBoxSizer(wx.StaticBox(self.PanelWaveletParameters, wx.ID_ANY, "Wavelet Filter Parameters"), wx.VERTICAL)
        grid_sizer_6 = wx.FlexGridSizer(2, 2, 2, 2)
        sizer_22 = wx.StaticBoxSizer(wx.StaticBox(self.PanelBsplineParameters, wx.ID_ANY, "B-spline Parameters"), wx.VERTICAL)
        grid_sizer_5 = wx.FlexGridSizer(3, 4, 2, 2)
        sizer_21 = wx.StaticBoxSizer(wx.StaticBox(self.PanelBaseline, wx.ID_ANY, "Smoothing Parameters"), wx.VERTICAL)
        grid_sizer_4 = wx.FlexGridSizer(2, 2, 2, 2)
        sizer_30 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_24 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_44 = wx.BoxSizer(wx.VERTICAL)
        sizer_41 = wx.StaticBoxSizer(wx.StaticBox(self.PanelKOFilter, wx.ID_ANY, "Truncation Filter - Area Corrections"), wx.VERTICAL)
        sizer_37 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_15 = wx.StaticBoxSizer(wx.StaticBox(self.PanelInitialValues, wx.ID_ANY, "Phase 0/1"), wx.VERTICAL)
        sizer_66 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_18 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12 = wx.StaticBoxSizer(wx.StaticBox(self.PanelInitialValues, wx.ID_ANY, "Linewidth"), wx.VERTICAL)
        grid_sizer_2 = wx.FlexGridSizer(2, 4, 4, 4)
        sizer_49 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_38_copy = wx.StaticBoxSizer(wx.StaticBox(self.PanelInitialValues, wx.ID_ANY, "Area and PPM - By Peak Search"), wx.VERTICAL)
        grid_sizer_9 = wx.FlexGridSizer(2, 3, 2, 2)
        sizer_61 = wx.StaticBoxSizer(wx.StaticBox(self.PanelInitialValues, wx.ID_ANY, "Data Pre-processing "), wx.VERTICAL)
        sizer_63 = wx.StaticBoxSizer(wx.StaticBox(self.PanelInitialValues, wx.ID_ANY, "Baseline Estimate - Improves Peak Estimation"), wx.VERTICAL)
        grid_sizer_10 = wx.FlexGridSizer(2, 2, 2, 2)
        sizer_52 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_62 = wx.StaticBoxSizer(wx.StaticBox(self.PanelInitialValues, wx.ID_ANY, "B0 Shift - Aligns Data With Model"), wx.VERTICAL)
        sizer_45 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11 = wx.BoxSizer(wx.VERTICAL)
        sizer_14 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_16 = wx.StaticBoxSizer(wx.StaticBox(self.PanelMetabolite, wx.ID_ANY, "Metabolites In Model"), wx.VERTICAL)
        MetaboliteGridSizer = wx.FlexGridSizer(1, 7, 5, 5)
        sizer_53 = wx.StaticBoxSizer(wx.StaticBox(self.PanelMetabolite, wx.ID_ANY, "Metabolite Prior Information"), wx.VERTICAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_17 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_17.Add(self.ButtonPriorInformationFromDatabase, 0, wx.RIGHT, 4)
        sizer_17.Add(self.ButtonPriorInformationFromFile, 0, 0, 0)
        sizer_53.Add(sizer_17, 1, wx.ALL | wx.EXPAND, 4)
        label_3 = wx.StaticText(self.PanelMetabolite, wx.ID_ANY, "Source:")
        sizer_7.Add(label_3, 0, wx.ALL, 4)
        sizer_7.Add(self.TextPriorInformationSource, 1, 0, 0)
        sizer_53.Add(sizer_7, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 4)
        labelPeakRange = wx.StaticText(self.PanelMetabolite, wx.ID_ANY, "Peak Include Range [ppm]  -")
        sizer_8.Add(labelPeakRange, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)
        labelStart = wx.StaticText(self.PanelMetabolite, wx.ID_ANY, "Start: ")
        sizer_8.Add(labelStart, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 2)
        sizer_8.Add(self.FloatPriorPpmStart, 0, 0, 0)
        labelEnd = wx.StaticText(self.PanelMetabolite, wx.ID_ANY, "End: ")
        sizer_8.Add(labelEnd, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.LEFT, 10)
        sizer_8.Add(self.FloatPriorPpmEnd, 0, wx.LEFT, 0)
        sizer_53.Add(sizer_8, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 4)
        sizer_11.Add(sizer_53, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 8)
        MetaboliteGridSizer.Add(self.LabelMetabolites, 0, wx.ALL, 2)
        self.PanelMetaboliteLines.SetSizer(MetaboliteGridSizer)
        sizer_16.Add(self.PanelMetaboliteLines, 1, wx.BOTTOM | wx.EXPAND | wx.TOP, 4)
        sizer_11.Add(sizer_16, 1, wx.EXPAND, 0)
        label_2 = wx.StaticText(self.PanelMetabolite, wx.ID_ANY, "Lineshape Model:")
        sizer_14.Add(label_2, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)
        sizer_14.Add(self.ComboLineshapeModel, 0, wx.RIGHT, 4)
        sizer_14.Add(self.CheckPriorCalculateCombinations, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)
        sizer_11.Add(sizer_14, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 4)
        self.PanelMetabolite.SetSizer(sizer_11)
        label_7 = wx.StaticText(self.PanelInitialValues, wx.ID_ANY, "Method:")
        sizer_45.Add(label_7, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 2)
        sizer_45.Add(self.ComboInitialB0ShiftMethod, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 8)
        label_11 = wx.StaticText(self.PanelInitialValues, wx.ID_ANY, "B0 Value [Hz]:")
        sizer_45.Add(label_11, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 8)
        sizer_45.Add(self.FloatB0ShiftValue, 0, wx.EXPAND | wx.LEFT, 2)
        sizer_62.Add(sizer_45, 0, wx.ALIGN_CENTER_VERTICAL | wx.BOTTOM | wx.TOP, 2)
        sizer_61.Add(sizer_62, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 4)
        label_13 = wx.StaticText(self.PanelInitialValues, wx.ID_ANY, "Method:")
        sizer_52.Add(label_13, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 2)
        sizer_52.Add(self.ComboInitialBaselineMethod, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_63.Add(sizer_52, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 4)
        label_10_copy = wx.StaticText(self.PanelBaselineInitLowess, wx.ID_ANY, "Peak Ignore Region Width [Hz]:")
        grid_sizer_10.Add(label_10_copy, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.RIGHT, 2)
        grid_sizer_10.Add(self.FloatBaselineInitIgnoreWidth, 0, 0, 0)
        label_9_copy = wx.StaticText(self.PanelBaselineInitLowess, wx.ID_ANY, "Filter Window Size [Hz]:")
        grid_sizer_10.Add(label_9_copy, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.RIGHT, 2)
        grid_sizer_10.Add(self.FloatInitialBaselineLowessWidth, 0, 0, 6)
        self.PanelBaselineInitLowess.SetSizer(grid_sizer_10)
        sizer_63.Add(self.PanelBaselineInitLowess, 0, wx.BOTTOM | wx.TOP, 4)
        sizer_61.Add(sizer_63, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 4)
        sizer_44.Add(sizer_61, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 8)
        grid_sizer_9.Add(self.CheckInitialPeakSearchAbs, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 8)
        label_16 = wx.StaticText(self.PanelInitialValues, wx.ID_ANY, "Small Peaks Area From:")
        grid_sizer_9.Add(label_16, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.LEFT, 8)
        grid_sizer_9.Add(self.ComboInitialSmallPeakAreas, 0, wx.LEFT, 4)
        grid_sizer_9.Add(self.CheckInitialCrChoSeparation, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 8)
        label_17 = wx.StaticText(self.PanelInitialValues, wx.ID_ANY, "Small Peaks PPM From:")
        grid_sizer_9.Add(label_17, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.LEFT, 8)
        grid_sizer_9.Add(self.ComboInitialSmallPeakFreqs, 0, wx.LEFT, 4)
        sizer_38_copy.Add(grid_sizer_9, 0, 0, 0)
        sizer_44.Add(sizer_38_copy, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 4)
        label_12_copy = wx.StaticText(self.PanelInitialValues, wx.ID_ANY, "Method:")
        sizer_49.Add(label_12_copy, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 2)
        sizer_49.Add(self.ComboInitialLinewidthMethod, 0, wx.ALIGN_CENTER_VERTICAL, 6)
        label_6 = wx.StaticText(self.PanelInitialValues, wx.ID_ANY, "Linewidth Value [Hz]:")
        sizer_49.Add(label_6, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 20)
        sizer_49.Add(self.FloatLinewidthValue, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND | wx.LEFT, 4)
        sizer_12.Add(sizer_49, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 4)
        label_23 = wx.StaticText(self.PanelInitialLinewidth, wx.ID_ANY, "Calculation Range [PPM] - Start:")
        grid_sizer_2.Add(label_23, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_2.Add(self.FloatInitialLinewidthStart, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.EXPAND, 4)
        label_24 = wx.StaticText(self.PanelInitialLinewidth, wx.ID_ANY, "End:")
        grid_sizer_2.Add(label_24, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_2.Add(self.FloatInitialLinewidthEnd, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
        label_1 = wx.StaticText(self.PanelInitialLinewidth, wx.ID_ANY, "Initial Width Multiplier: ")
        grid_sizer_2.Add(label_1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_2.Add(self.FloatInitialLinewidthMultiplier, 1, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
        grid_sizer_2.Add((20, 20), 0, wx.EXPAND, 0)
        grid_sizer_2.Add((20, 20), 0, wx.EXPAND, 0)
        self.PanelInitialLinewidth.SetSizer(grid_sizer_2)
        sizer_12.Add(self.PanelInitialLinewidth, 0, wx.EXPAND, 0)
        sizer_44.Add(sizer_12, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 4)
        label_8 = wx.StaticText(self.PanelInitialValues, wx.ID_ANY, "Method:")
        sizer_18.Add(label_8, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 2)
        sizer_18.Add(self.ComboInitialPhaseMethod, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_15.Add(sizer_18, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
        label_25 = wx.StaticText(self.PanelInitialValues, wx.ID_ANY, "Initial Value - Phase 0:")
        sizer_66.Add(label_25, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.RIGHT, 4)
        sizer_66.Add(self.FloatInitialPhase0Value, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.RIGHT, 4)
        label_26 = wx.StaticText(self.PanelInitialValues, wx.ID_ANY, "Phase 1:")
        sizer_66.Add(label_26, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.LEFT | wx.RIGHT, 4)
        sizer_66.Add(self.FloatInitialPhase1Value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_15.Add(sizer_66, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
        sizer_44.Add(sizer_15, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 4)
        sizer_37.Add(self.CheckApplyKoFilter, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)
        labelLinewidthMinimum = wx.StaticText(self.PanelKOFilter, wx.ID_ANY, "Linewidth Min:")
        sizer_37.Add(labelLinewidthMinimum, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 4)
        sizer_37.Add(self.SpinInitialKOLinewidthMinimum, 0, wx.RIGHT, 4)
        labelKissOffPoints = wx.StaticText(self.PanelKOFilter, wx.ID_ANY, "Truncation [points]:")
        sizer_37.Add(labelKissOffPoints, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 4)
        sizer_37.Add(self.SpinInitialKOPoints, 0, 0, 0)
        sizer_41.Add(sizer_37, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
        self.PanelKOFilter.SetSizer(sizer_41)
        sizer_44.Add(self.PanelKOFilter, 1, wx.EXPAND, 0)
        self.PanelInitialValues.SetSizer(sizer_44)
        label_1_copy = wx.StaticText(self.PanelBaseline, wx.ID_ANY, "Baseline Method:")
        sizer_24.Add(label_1_copy, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)
        sizer_24.Add(self.ComboBaselineMethod, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_20.Add(sizer_24, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 8)
        sizer_30.Add(self.CheckBaselineSmoothingFlag, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 8)
        sizer_30.Add(self.CheckBaselineSkipLastSmooth, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)
        sizer_21.Add(sizer_30, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 8)
        labelMetab = wx.StaticText(self.PanelBaseline, wx.ID_ANY, "Metab Region Lowess - Window Size [Hz]:")
        grid_sizer_4.Add(labelMetab, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.RIGHT, 4)
        grid_sizer_4.Add(self.FloatBaselineSmoothingWidth, 0, 0, 0)
        labelFirstPass = wx.StaticText(self.PanelBaseline, wx.ID_ANY, "First Pass Underestimation [%]:")
        grid_sizer_4.Add(labelFirstPass, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.RIGHT, 4)
        grid_sizer_4.Add(self.FloatBaselineUnderestimate, 0, 0, 0)
        sizer_21.Add(grid_sizer_4, 1, 0, 0)
        sizer_20.Add(sizer_21, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 8)
        labelSplineNumber = wx.StaticText(self.PanelBsplineParameters, wx.ID_ANY, "Variable Smoothing Factor:")
        grid_sizer_5.Add(labelSplineNumber, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.RIGHT, 4)
        grid_sizer_5.Add(self.SpinBaselineSplineNknots, 0, 0, 0)
        grid_sizer_5.Add((20, 20), 0, wx.EXPAND, 0)
        grid_sizer_5.Add((20, 20), 0, wx.EXPAND, 0)
        labelSplineSpacing = wx.StaticText(self.PanelBsplineParameters, wx.ID_ANY, "Fixed knot spacing [pts] of")
        grid_sizer_5.Add(labelSplineSpacing, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.RIGHT, 4)
        grid_sizer_5.Add(self.FloatBaselineSplineSpacing, 0, wx.RIGHT, 4)
        label_111 = wx.StaticText(self.PanelBsplineParameters, wx.ID_ANY, "gives [Hz] spacing of ")
        grid_sizer_5.Add(label_111, 0, wx.ALIGN_CENTER | wx.LEFT | wx.RIGHT, 2)
        grid_sizer_5.Add(self.StaticHzSpacing, 0, wx.ALIGN_CENTER | wx.LEFT | wx.RIGHT, 2)
        grid_sizer_5.Add(self.labelOrder, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.RIGHT, 4)
        grid_sizer_5.Add(self.SpinBaselineSplineOrder, 0, 0, 0)
        grid_sizer_5.Add((20, 20), 0, wx.EXPAND, 0)
        grid_sizer_5.Add((20, 20), 0, wx.EXPAND, 0)
        sizer_22.Add(grid_sizer_5, 1, wx.EXPAND, 0)
        self.PanelBsplineParameters.SetSizer(sizer_22)
        sizer_3.Add(self.PanelBsplineParameters, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 8)
        labelWaveletScale = wx.StaticText(self.PanelWaveletParameters, wx.ID_ANY, "Wavelet Scale Multiplier [x Linewidth]:")
        grid_sizer_6.Add(labelWaveletScale, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)
        grid_sizer_6.Add(self.ComboBaselineWaveletScale, 0, 0, 0)
        labelWaveletDyad = wx.StaticText(self.PanelWaveletParameters, wx.ID_ANY, "Wavelet Dyad Min Scale [Hz]:")
        grid_sizer_6.Add(labelWaveletDyad, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 4)
        grid_sizer_6.Add(self.FloatBaselineWaveletMinDyad, 1, wx.EXPAND, 0)
        sizer_19.Add(grid_sizer_6, 1, 0, 0)
        self.PanelWaveletParameters.SetSizer(sizer_19)
        sizer_3.Add(self.PanelWaveletParameters, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 8)
        self.PanelBaselineParameters.SetSizer(sizer_3)
        sizer_20.Add(self.PanelBaselineParameters, 0, wx.EXPAND, 0)
        self.PanelBaseline.SetSizer(sizer_20)
        label_12 = wx.StaticText(self.PanelMacromol, wx.ID_ANY, "Macromolecule Model:")
        sizer_13.Add(label_12, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 3)
        sizer_13.Add(self.ComboMmolModel, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_6.Add(sizer_13, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 6)
        sizer_25_copy.Add(self.ButtonMmolSingleDataset, 0, 0, 0)
        sizer_25_copy.Add(self.TextMmolSingleDataset, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_25.Add(sizer_25_copy, 0, wx.ALL | wx.EXPAND, 4)
        label_15 = wx.StaticText(self.PanelMmolSingleDataset, wx.ID_ANY, "Method : ")
        sizer_27.Add(label_15, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_27.Add(self.ComboMmolSingleDatasetInitVal, 0, 0, 0)
        sizer_29.Add(sizer_27, 0, wx.EXPAND, 0)
        label_14 = wx.StaticText(self.PanelMmolSingleDataset, wx.ID_ANY, "  Basis Area Scale : ", style=wx.ALIGN_RIGHT)
        grid_sizer_3.Add(label_14, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_3.Add(self.FloatMmolSingleDatasetStartArea, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
        label_18 = wx.StaticText(self.PanelMmolSingleDataset, wx.ID_ANY, "  Fudge : ", style=wx.ALIGN_RIGHT)
        grid_sizer_3.Add(label_18, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_3.Add(self.FloatMmolSingleDatasetStartFudge, 0, 0, 0)
        grid_sizer_3.Add(self.label_19, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_3.Add(self.FloatMmolSingleDatasetPpmStart, 0, 0, 0)
        label_20 = wx.StaticText(self.PanelMmolSingleDataset, wx.ID_ANY, "  End : ", style=wx.ALIGN_RIGHT)
        grid_sizer_3.Add(label_20, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_3.Add(self.FloatMmolSingleDatasetPpmEnd, 0, 0, 0)
        sizer_29.Add(grid_sizer_3, 1, wx.ALL | wx.EXPAND, 4)
        sizer_25.Add(sizer_29, 1, wx.ALL | wx.EXPAND, 4)
        sizer_32.Add(self.label_21, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_32.Add(self.FloatMmolSingleDatasetLimitMax, 0, 0, 0)
        sizer_32.Add(self.label_22, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_32.Add(self.FloatMmolSingleDatasetLimitMin, 0, 0, 0)
        sizer_31.Add(sizer_32, 1, 0, 0)
        sizer_25.Add(sizer_31, 0, wx.ALL | wx.EXPAND, 4)
        self.PanelMmolSingleDataset.SetSizer(sizer_25)
        sizer_6.Add(self.PanelMmolSingleDataset, 0, wx.ALL | wx.EXPAND, 4)
        self.PanelMacromol.SetSizer(sizer_6)
        label_4 = wx.StaticText(self.PanelOptimization, wx.ID_ANY, "Algorithm:")
        sizer_57.Add(label_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)
        sizer_57.Add(self.ComboOptimizeMethod, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_57.Add(self.CheckOptimizeScalingFlag, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 6)
        sizer_51.Add(sizer_57, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 8)
        labelIter = wx.StaticText(self.PanelOptimization, wx.ID_ANY, "Global Iterations:")
        grid_sizer_8.Add(labelIter, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.LEFT | wx.RIGHT, 3)
        grid_sizer_8.Add(self.SpinOptimizeGlobalIterations, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_8.Add((20, 20), 0, wx.EXPAND, 0)
        grid_sizer_8.Add((20, 20), 0, wx.EXPAND, 0)
        labelStop = wx.StaticText(self.PanelOptimization, wx.ID_ANY, "Stop Tolerance:")
        grid_sizer_8.Add(labelStop, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)
        grid_sizer_8.Add(self.FloatOptimizeStopTolerance, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)
        labelMaxIter = wx.StaticText(self.PanelOptimization, wx.ID_ANY, "Max Matrix Iter:")
        grid_sizer_8.Add(labelMaxIter, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)
        grid_sizer_8.Add(self.SpinOptimizeMaxIterations, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_51.Add(grid_sizer_8, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 4)
        sizer_51.Add(self.static_line_11, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 6)
        label_5 = wx.StaticText(self.PanelOptimization, wx.ID_ANY, "Weight Scheme:")
        sizer_68.Add(label_5, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 2)
        sizer_68.Add(self.ComboOptimizeWeightsMethod, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 4)
        sizer_10.Add(sizer_68, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
        labelAreaWeight = wx.StaticText(self.PanelLocalWeights, wx.ID_ANY, "Local Scale Factor:")
        sizer_69.Add(labelAreaWeight, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)
        sizer_69.Add(self.FloatOptimizeWeightsScaleFactor, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 6)
        labelLWLocal = wx.StaticText(self.PanelLocalWeights, wx.ID_ANY, "Linewidth Multiplier:")
        sizer_69.Add(labelLWLocal, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 4)
        sizer_69.Add(self.FloatOptimizeWeightsWidthFactor, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        self.PanelLocalWeights.SetSizer(sizer_69)
        sizer_10.Add(self.PanelLocalWeights, 0, wx.EXPAND, 0)
        grid_sizer_7.Add(self.CheckOptimizeWeightsWaterFlag, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.RIGHT, 4)
        grid_sizer_7.Add(self.FloatOptimizeWeightsWaterStart, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 6)
        label_9 = wx.StaticText(self.PanelOptimization, wx.ID_ANY, "End:")
        grid_sizer_7.Add(label_9, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.LEFT | wx.RIGHT, 4)
        grid_sizer_7.Add(self.FloatOptimizeWeightsWaterEnd, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_7.Add(self.CheckOptimizeWeightsLipidFlag, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.RIGHT, 4)
        grid_sizer_7.Add(self.FloatOptimizeWeightsLipidStart, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 6)
        label_10 = wx.StaticText(self.PanelOptimization, wx.ID_ANY, "End:")
        grid_sizer_7.Add(label_10, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.LEFT | wx.RIGHT, 4)
        grid_sizer_7.Add(self.FloatOptimizeWeightsLipidEnd, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        label_34 = wx.StaticText(self.PanelOptimization, wx.ID_ANY, "Small Peaks Scale Factor:")
        grid_sizer_7.Add(label_34, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.RIGHT, 4)
        grid_sizer_7.Add(self.FloatOptimizeWeightsSmallPeakFactor, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_7.Add((20, 20), 0, wx.EXPAND, 0)
        grid_sizer_7.Add((20, 20), 0, wx.EXPAND, 0)
        sizer_10.Add(grid_sizer_7, 1, wx.EXPAND | wx.TOP, 4)
        sizer_51.Add(sizer_10, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 8)
        label_27 = wx.StaticText(self.PanelOptimization, wx.ID_ANY, "Areas - General")
        grid_sizer_1.Add(label_27, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        labelMetabAmp = wx.StaticText(self.PanelOptimization, wx.ID_ANY, "Max [%]:")
        grid_sizer_1.Add(labelMetabAmp, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)
        grid_sizer_1.Add(self.FloatOptimizeBoundsAreaMax, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        labelMetabAmp_copy = wx.StaticText(self.PanelOptimization, wx.ID_ANY, "Min [%]:")
        grid_sizer_1.Add(labelMetabAmp_copy, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)
        grid_sizer_1.Add(self.FloatOptimizeBoundsAreaMin, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        label_28 = wx.StaticText(self.PanelOptimization, wx.ID_ANY, "Areas - Small Peaks")
        grid_sizer_1.Add(label_28, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        labelMetabAmp_copy_1 = wx.StaticText(self.PanelOptimization, wx.ID_ANY, "Max [%]:")
        grid_sizer_1.Add(labelMetabAmp_copy_1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)
        grid_sizer_1.Add(self.FloatOptimizeBoundsAreaMaxSmall, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        labelMetabAmp_copy_copy = wx.StaticText(self.PanelOptimization, wx.ID_ANY, "Min [%]:")
        grid_sizer_1.Add(labelMetabAmp_copy_copy, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)
        grid_sizer_1.Add(self.FloatOptimizeBoundsAreaMinSmall, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.CheckEnableBoundsAreaSmall, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)
        label_29 = wx.StaticText(self.PanelOptimization, wx.ID_ANY, "Freqs - General")
        grid_sizer_1.Add(label_29, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        labelMetabFreq = wx.StaticText(self.PanelOptimization, wx.ID_ANY, " +/- [Hz]:")
        grid_sizer_1.Add(labelMetabFreq, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)
        grid_sizer_1.Add(self.FloatOptimizeBoundsRangePpm, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        label_30 = wx.StaticText(self.PanelOptimization, wx.ID_ANY, "Freqs - Small Peaks")
        grid_sizer_1.Add(label_30, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        labelMetabFreqAlt = wx.StaticText(self.PanelOptimization, wx.ID_ANY, " +/- [Hz]:")
        grid_sizer_1.Add(labelMetabFreqAlt, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)
        grid_sizer_1.Add(self.FloatOptimizeBoundsRangePpmSmall, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.CheckEnableBoundsPpmSmall, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        sizer_36.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        sizer_5.Add(sizer_36, 0, wx.EXPAND, 0)
        labelMetabPh0 = wx.StaticText(self.PanelOptimization, wx.ID_ANY, "Ph0 +/- [Deg]:")
        grid_sizer_11.Add(labelMetabPh0, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)
        grid_sizer_11.Add(self.FloatOptimizeBoundsRangePhase0, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        labelTaTb1 = wx.StaticText(self.PanelOptimization, wx.ID_ANY, "    Ta=Tb [s] Min of:")
        grid_sizer_11.Add(labelTaTb1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)
        grid_sizer_11.Add(self.FloatOptimizeBoundsMinLinewidth, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        labelMetabMinToMax = wx.StaticText(self.PanelOptimization, wx.ID_ANY, "-> Max LW [Hz]:")
        grid_sizer_11.Add(labelMetabMinToMax, 0, wx.ALIGN_CENTER | wx.ALL, 3)
        grid_sizer_11.Add(self.StaticMaxLinewidth, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)
        labelMetabPh1 = wx.StaticText(self.PanelOptimization, wx.ID_ANY, "Ph1 +/- [Deg]:")
        grid_sizer_11.Add(labelMetabPh1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)
        grid_sizer_11.Add(self.FloatOptimizeBoundsRangePhase1, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        labelTaTb2 = wx.StaticText(self.PanelOptimization, wx.ID_ANY, "    Ta=Tb [s] Max of:")
        grid_sizer_11.Add(labelTaTb2, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)
        grid_sizer_11.Add(self.FloatOptimizeBoundsMaxLinewidth, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        labelMetabMaxToMin = wx.StaticText(self.PanelOptimization, wx.ID_ANY, "->  Min LW [Hz]:")
        grid_sizer_11.Add(labelMetabMaxToMin, 0, wx.ALIGN_CENTER | wx.ALL, 3)
        grid_sizer_11.Add(self.StaticMinLinewidth, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)
        sizer_39.Add(grid_sizer_11, 1, 0, 0)
        sizer_5.Add(sizer_39, 0, wx.EXPAND, 0)
        sizer_51.Add(sizer_5, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 8)
        sizer_26.Add(self.CheckOptimizeConstrainPpmNaaNaag, 0, wx.ALL, 4)
        sizer_26.Add(self.CheckOptimizeConstrainPpmCrPcr, 0, wx.ALL, 4)
        sizer_26.Add(self.CheckOptimizeConstrainPpmGpcPcho, 0, wx.ALL, 4)
        sizer_26.Add(self.CheckOptimizeConstrainPpmCr2Pcr2, 0, wx.ALL, 4)
        sizer_26.Add(self.CheckOptimizeConstrainPpmGluGln, 0, wx.ALL, 4)
        sizer_26.Add(self.CheckOptimizeConstrainPpmTauGlc, 0, wx.ALL, 4)
        self.PanelOptimizeConstraintChecks.SetSizer(sizer_26)
        sizer_51.Add(self.PanelOptimizeConstraintChecks, 1, wx.EXPAND, 0)
        self.PanelOptimization.SetSizer(sizer_51)
        sizer_72.Add(self.CheckConfidenceIntervalsFlag, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 12)
        sizer_72.Add(self.labelAlpha, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 4)
        sizer_72.Add(self.FloatConfidenceAlpha, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_9.Add(sizer_72, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 4)
        sizer_73.Add(self.labelCalc, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 3)
        sizer_73.Add(self.CheckConfidenceAreaFlagFlag, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 8)
        sizer_73.Add(self.CheckCofidencePpmFlag, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 4)
        sizer_73.Add(self.CheckConfidenceLinewidthFlag, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 4)
        sizer_73.Add(self.CheckConfidencePhaseFlag, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 4)
        sizer_9.Add(sizer_73, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 4)
        sizer_71.Add(sizer_9, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 4)
        sizer_74.Add(self.CheckCramerRaoFlag, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 0)
        sizer_33.Add(sizer_74, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 4)
        labelNoise = wx.StaticText(self.PanelQuality, wx.ID_ANY, "Noise Measure Range [PPM]:")
        sizer_75.Add(labelNoise, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)
        sizer_75.Add(self.labelNoiseStr, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 4)
        sizer_75.Add(self.FloatCramerRaoPpmStart, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)
        sizer_75.Add(self.labelNoiseEnd, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 4)
        sizer_75.Add(self.FloatCramerRaoPpmEnd, 0, 0, 0)
        sizer_33.Add(sizer_75, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
        sizer_71.Add(sizer_33, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 4)
        self.PanelQuality.SetSizer(sizer_71)
        sizer_23.Add(self.LabelHtmlPlaceholder, 1, wx.EXPAND, 0)
        sizer_35.Add(sizer_23, 1, wx.ALL | wx.EXPAND, 4)
        sizer_56.Add(self.ButtonOutputResultsToHtml, 0, 0, 0)
        sizer_56.Add(self.ButtonOutputResultsToCsv, 0, 0, 0)
        sizer_35.Add(sizer_56, 0, wx.ALL, 5)
        self.PanelResults.SetSizer(sizer_35)
        self.VoigtNotebook.AddPage(self.PanelMetabolite, "Metabolites")
        self.VoigtNotebook.AddPage(self.PanelInitialValues, "Initial Values")
        self.VoigtNotebook.AddPage(self.PanelBaseline, "Baseline")
        self.VoigtNotebook.AddPage(self.PanelMacromol, "Macromol")
        self.VoigtNotebook.AddPage(self.PanelOptimization, "Optimize")
        self.VoigtNotebook.AddPage(self.PanelQuality, "Quality")
        self.VoigtNotebook.AddPage(self.PanelResults, "Results")
        sizer_2_copy.Add(self.VoigtNotebook, 1, wx.EXPAND | wx.TOP, 3)
        sizer_4.Add(self.ButtonUpdateInitialValues, 0, wx.ALL, 4)
        sizer_4.Add(self.CheckAutoInitialValues, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_4.Add(self.ButtonFitSpectrum, 0, wx.ALL, 4)
        sizer_4.Add((60, 20), 1, wx.EXPAND, 0)
        sizer_4.Add(self.ButtonBatchFitAll, 0, wx.ALL, 4)
        sizer_4.Add(self.ButtonPloink, 0, wx.ALL, 4)
        sizer_2_copy.Add(sizer_4, 0, wx.ALL | wx.EXPAND, 4)
        sizer_28.Add(sizer_2_copy, 1, wx.EXPAND, 0)
        self.PanelVoigtControls.SetSizer(sizer_28)
        sizer_38.Add(self.PanelViewVoigt, 1, wx.EXPAND, 0)
        self.window_1_pane_2.SetSizer(sizer_38)
        self.SplitterWindow.SplitVertically(self.PanelVoigtControls, self.window_1_pane_2)
        sizer_2.Add(self.SplitterWindow, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_2)
        sizer_2.Fit(self)
        self.Layout()
        # end wxGlade

    def on_prior_information_from_database(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_prior_information_from_database' not implemented!")
        event.Skip()

    def on_prior_information_from_file(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_prior_information_from_file' not implemented!")
        event.Skip()

    def on_prior_ppm_start(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_prior_ppm_start' not implemented!")
        event.Skip()

    def on_prior_ppm_end(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_prior_ppm_end' not implemented!")
        event.Skip()

    def on_lineshape_model(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_lineshape_model' not implemented!")
        event.Skip()

    def on_prior_calculate_combinations(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_prior_calculate_combinations' not implemented!")
        event.Skip()

    def on_b0_shift_method(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_b0_shift_method' not implemented!")
        event.Skip()

    def on_b0_shift_value(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_b0_shift_value' not implemented!")
        event.Skip()

    def on_initial_baseline_method(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_initial_baseline_method' not implemented!")
        event.Skip()

    def on_initial_baseline_ignore_width(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_initial_baseline_ignore_width' not implemented!")
        event.Skip()

    def on_initial_baseline_lowess_width(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_initial_baseline_lowess_width' not implemented!")
        event.Skip()

    def on_initial_peak_search_abs(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_initial_peak_search_abs' not implemented!")
        event.Skip()

    def on_initial_small_peak_areas(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_initial_small_peak_areas' not implemented!")
        event.Skip()

    def on_initial_cr_cho_separation(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_initial_cr_cho_separation' not implemented!")
        event.Skip()

    def on_initial_small_peak_freqs(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_initial_small_peak_freqs' not implemented!")
        event.Skip()

    def on_initial_linewidth_method(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_initial_linewidth_method' not implemented!")
        event.Skip()

    def on_linewidth_value(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_linewidth_value' not implemented!")
        event.Skip()

    def on_initial_linewidth_start(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_initial_linewidth_start' not implemented!")
        event.Skip()

    def on_initial_linewidth_end(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_initial_linewidth_end' not implemented!")
        event.Skip()

    def on_initial_linewidth_multiplier(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_initial_linewidth_multiplier' not implemented!")
        event.Skip()

    def on_initial_phase_method(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_initial_phase_method' not implemented!")
        event.Skip()

    def on_initial_phase0_value(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_initial_phase0_value' not implemented!")
        event.Skip()

    def on_initial_phase1_value(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_initial_phase1_value' not implemented!")
        event.Skip()

    def on_apply_ko_filter(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_apply_ko_filter' not implemented!")
        event.Skip()

    def on_initial_ko_linewidth_minimum(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_initial_ko_linewidth_minimum' not implemented!")
        event.Skip()

    def on_initial_ko_points(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_initial_ko_points' not implemented!")
        event.Skip()

    def on_baseline_method(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_baseline_method' not implemented!")
        event.Skip()

    def on_baseline_smoothing_flag(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_baseline_smoothing_flag' not implemented!")
        event.Skip()

    def on_baseline_skip_last_smooth(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_baseline_skip_last_smooth' not implemented!")
        event.Skip()

    def on_baseline_smoothing_width(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_baseline_smoothing_width' not implemented!")
        event.Skip()

    def on_baseline_underestimate(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_baseline_underestimate' not implemented!")
        event.Skip()

    def on_baseline_spline_nknots(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_baseline_spline_nknots' not implemented!")
        event.Skip()

    def on_baseline_spline_spacing(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_baseline_spline_spacing' not implemented!")
        event.Skip()

    def on_baseline_spline_order(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_baseline_spline_order' not implemented!")
        event.Skip()

    def on_baseline_wavelet_scale(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_baseline_wavelet_scale' not implemented!")
        event.Skip()

    def on_baseline_wavelet_min_dyad(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_baseline_wavelet_min_dyad' not implemented!")
        event.Skip()

    def on_mmol_model(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_mmol_model' not implemented!")
        event.Skip()

    def on_mmol_single_dataset(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_mmol_single_dataset' not implemented!")
        event.Skip()

    def on_mmol_single_dataset_initval(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_mmol_single_dataset_initval' not implemented!")
        event.Skip()

    def on_mmol_single_dataset_start_area(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_mmol_single_dataset_start_area' not implemented!")
        event.Skip()

    def on_mmol_single_dataset_start_fudge(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_mmol_single_dataset_start_fudge' not implemented!")
        event.Skip()

    def on_mmol_single_dataset_ppm_start(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_mmol_single_dataset_ppm_start' not implemented!")
        event.Skip()

    def on_mmol_single_dataset_ppm_end(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_mmol_single_dataset_ppm_end' not implemented!")
        event.Skip()

    def on_mmol_single_dataset_limit_max(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_mmol_single_dataset_limit_max' not implemented!")
        event.Skip()

    def on_mmol_single_dataset_limit_min(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_mmol_single_dataset_limit_min' not implemented!")
        event.Skip()

    def on_optimize_method(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_method' not implemented!")
        event.Skip()

    def on_optimize_scaling_flag(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_scaling_flag' not implemented!")
        event.Skip()

    def on_optimize_global_iterations(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_global_iterations' not implemented!")
        event.Skip()

    def on_optimize_stop_tolerance(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_stop_tolerance' not implemented!")
        event.Skip()

    def on_optimize_max_iterations(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_max_iterations' not implemented!")
        event.Skip()

    def on_optimize_weights_method(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_weights_method' not implemented!")
        event.Skip()

    def on_optimize_weights_scale_factor(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_weights_scale_factor' not implemented!")
        event.Skip()

    def on_optimize_weights_width_factor(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_weights_width_factor' not implemented!")
        event.Skip()

    def on_optimize_weights_water_flag(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_weights_water_flag' not implemented!")
        event.Skip()

    def on_optimize_weights_water_start(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_weights_water_start' not implemented!")
        event.Skip()

    def on_optimize_weights_water_end(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_weights_water_end' not implemented!")
        event.Skip()

    def on_optimize_weights_lipid_flag(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_weights_lipid_flag' not implemented!")
        event.Skip()

    def on_optimize_weights_lipid_start(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_weights_lipid_start' not implemented!")
        event.Skip()

    def on_optimize_weights_lipid_end(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_weights_lipid_end' not implemented!")
        event.Skip()

    def on_optimize_weights_small_peak_factor(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_weights_small_peak_factor' not implemented!")
        event.Skip()

    def on_optimize_bounds_area_max(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_bounds_area_max' not implemented!")
        event.Skip()

    def on_optimize_bounds_area_min(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_bounds_area_min' not implemented!")
        event.Skip()

    def on_optimize_bounds_area_max_small(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_bounds_area_max_small' not implemented!")
        event.Skip()

    def on_optimize_bounds_area_min_small(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_bounds_area_min_small' not implemented!")
        event.Skip()

    def on_optimize_enable_bounds_area_small(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_enable_bounds_area_small' not implemented!")
        event.Skip()

    def on_optimize_bounds_range_ppm(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_bounds_range_ppm' not implemented!")
        event.Skip()

    def on_optimize_bounds_range_ppm_small(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_bounds_range_ppm_small' not implemented!")
        event.Skip()

    def on_optimize_enable_bounds_ppm_small(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_enable_bounds_ppm_small' not implemented!")
        event.Skip()

    def on_optimize_bounds_range_phase0(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_bounds_range_phase0' not implemented!")
        event.Skip()

    def on_optimize_bounds_min_linewidth(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_bounds_min_linewidth' not implemented!")
        event.Skip()

    def on_optimize_bounds_range_phase1(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_bounds_range_phase1' not implemented!")
        event.Skip()

    def on_optimize_bounds_max_linewidth(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_bounds_max_linewidth' not implemented!")
        event.Skip()

    def on_optimize_constrain_ppm_naa_naag(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_constrain_ppm_naa_naag' not implemented!")
        event.Skip()

    def on_optimize_constrain_ppm_cr_pcr(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_constrain_ppm_cr_pcr' not implemented!")
        event.Skip()

    def on_optimize_constrain_ppm_gpc_pcho(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_constrain_ppm_gpc_pcho' not implemented!")
        event.Skip()

    def on_optimize_constrain_ppm_cr2_pcr2(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_constrain_ppm_cr2_pcr2' not implemented!")
        event.Skip()

    def on_optimize_constrain_ppm_glu_gln(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_constrain_ppm_glu_gln' not implemented!")
        event.Skip()

    def on_optimize_constrain_ppm_tau_glc(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_optimize_constrain_ppm_tau_glc' not implemented!")
        event.Skip()

    def on_confidence_intervals_flag(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_confidence_intervals_flag' not implemented!")
        event.Skip()

    def on_confidence_alpha(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_confidence_alpha' not implemented!")
        event.Skip()

    def on_confidence_area_flag(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_confidence_area_flag' not implemented!")
        event.Skip()

    def on_confidence_ppm_flag(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_confidence_ppm_flag' not implemented!")
        event.Skip()

    def on_confidence_linewidth_flag(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_confidence_linewidth_flag' not implemented!")
        event.Skip()

    def on_confidence_phase_flag(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_confidence_phase_flag' not implemented!")
        event.Skip()

    def on_cramer_rao_flag(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_cramer_rao_flag' not implemented!")
        event.Skip()

    def on_cramer_rao_ppm_start(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_cramer_rao_ppm_start' not implemented!")
        event.Skip()

    def on_cramer_rao_ppm_end(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_cramer_rao_ppm_end' not implemented!")
        event.Skip()

    def on_output_results_to_html(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_output_results_to_html' not implemented!")
        event.Skip()

    def on_output_results_to_csv(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_output_results_to_csv' not implemented!")
        event.Skip()

    def on_update_initial_values(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_update_initial_values' not implemented!")
        event.Skip()

    def on_auto_initial_values(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_auto_initial_values' not implemented!")
        event.Skip()

    def on_fit_spectrum(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_fit_spectrum' not implemented!")
        event.Skip()

    def on_batch_fit_all(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_batch_fit_all' not implemented!")
        event.Skip()

    def on_ploink(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_ploink' not implemented!")
        event.Skip()

    def on_splitter(self, event):  # wxGlade: PanelVoigtUI.<event_handler>
        print("Event handler 'on_splitter' not implemented!")
        event.Skip()

# end of class PanelVoigtUI

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((945, 1069))
        self.PanelVoigtUI = PanelVoigtUI(self, wx.ID_ANY)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("frame_1")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(self.PanelVoigtUI, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

# end of class MyFrame
