# coding: utf-8

"""
    Octopus Energy

    This is a representation of the Octopus Energy [REST API](https://developer.octopus.energy/docs/api/)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Charge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value_exc_vat': 'float',
        'value_inc_vat': 'float',
        'valid_from': 'str',
        'valid_to': 'str'
    }

    attribute_map = {
        'value_exc_vat': 'value_exc_vat',
        'value_inc_vat': 'value_inc_vat',
        'valid_from': 'valid_from',
        'valid_to': 'valid_to'
    }

    def __init__(self, value_exc_vat=None, value_inc_vat=None, valid_from=None, valid_to=None):  # noqa: E501
        """Charge - a model defined in Swagger"""  # noqa: E501

        self._value_exc_vat = None
        self._value_inc_vat = None
        self._valid_from = None
        self._valid_to = None
        self.discriminator = None

        if value_exc_vat is not None:
            self.value_exc_vat = value_exc_vat
        if value_inc_vat is not None:
            self.value_inc_vat = value_inc_vat
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to

    @property
    def value_exc_vat(self):
        """Gets the value_exc_vat of this Charge.  # noqa: E501


        :return: The value_exc_vat of this Charge.  # noqa: E501
        :rtype: float
        """
        return self._value_exc_vat

    @value_exc_vat.setter
    def value_exc_vat(self, value_exc_vat):
        """Sets the value_exc_vat of this Charge.


        :param value_exc_vat: The value_exc_vat of this Charge.  # noqa: E501
        :type: float
        """

        self._value_exc_vat = value_exc_vat

    @property
    def value_inc_vat(self):
        """Gets the value_inc_vat of this Charge.  # noqa: E501


        :return: The value_inc_vat of this Charge.  # noqa: E501
        :rtype: float
        """
        return self._value_inc_vat

    @value_inc_vat.setter
    def value_inc_vat(self, value_inc_vat):
        """Sets the value_inc_vat of this Charge.


        :param value_inc_vat: The value_inc_vat of this Charge.  # noqa: E501
        :type: float
        """

        self._value_inc_vat = value_inc_vat

    @property
    def valid_from(self):
        """Gets the valid_from of this Charge.  # noqa: E501


        :return: The valid_from of this Charge.  # noqa: E501
        :rtype: str
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this Charge.


        :param valid_from: The valid_from of this Charge.  # noqa: E501
        :type: str
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this Charge.  # noqa: E501


        :return: The valid_to of this Charge.  # noqa: E501
        :rtype: str
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this Charge.


        :param valid_to: The valid_to of this Charge.  # noqa: E501
        :type: str
        """

        self._valid_to = valid_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Charge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
