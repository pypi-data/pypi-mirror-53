# coding: utf-8

"""
    Octopus Energy

    This is a representation of the Octopus Energy [REST API](https://developer.octopus.energy/docs/api/)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2001(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gsp': 'str',
        'mpan': 'str',
        'profile_class': 'str'
    }

    attribute_map = {
        'gsp': 'gsp',
        'mpan': 'mpan',
        'profile_class': 'profile_class'
    }

    def __init__(self, gsp=None, mpan=None, profile_class=None):  # noqa: E501
        """InlineResponse2001 - a model defined in Swagger"""  # noqa: E501

        self._gsp = None
        self._mpan = None
        self._profile_class = None
        self.discriminator = None

        self.gsp = gsp
        self.mpan = mpan
        self.profile_class = profile_class

    @property
    def gsp(self):
        """Gets the gsp of this InlineResponse2001.  # noqa: E501


        :return: The gsp of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._gsp

    @gsp.setter
    def gsp(self, gsp):
        """Sets the gsp of this InlineResponse2001.


        :param gsp: The gsp of this InlineResponse2001.  # noqa: E501
        :type: str
        """
        if gsp is None:
            raise ValueError("Invalid value for `gsp`, must not be `None`")  # noqa: E501

        self._gsp = gsp

    @property
    def mpan(self):
        """Gets the mpan of this InlineResponse2001.  # noqa: E501


        :return: The mpan of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._mpan

    @mpan.setter
    def mpan(self, mpan):
        """Sets the mpan of this InlineResponse2001.


        :param mpan: The mpan of this InlineResponse2001.  # noqa: E501
        :type: str
        """
        if mpan is None:
            raise ValueError("Invalid value for `mpan`, must not be `None`")  # noqa: E501

        self._mpan = mpan

    @property
    def profile_class(self):
        """Gets the profile_class of this InlineResponse2001.  # noqa: E501


        :return: The profile_class of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._profile_class

    @profile_class.setter
    def profile_class(self, profile_class):
        """Sets the profile_class of this InlineResponse2001.


        :param profile_class: The profile_class of this InlineResponse2001.  # noqa: E501
        :type: str
        """
        if profile_class is None:
            raise ValueError("Invalid value for `profile_class`, must not be `None`")  # noqa: E501

        self._profile_class = profile_class

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
