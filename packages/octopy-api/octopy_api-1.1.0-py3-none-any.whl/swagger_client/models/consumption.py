# coding: utf-8

"""
    Octopus Energy

    This is a representation of the Octopus Energy [REST API](https://developer.octopus.energy/docs/api/)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Consumption(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consumption': 'float',
        'interval_start': 'str',
        'interval_end': 'str'
    }

    attribute_map = {
        'consumption': 'consumption',
        'interval_start': 'interval_start',
        'interval_end': 'interval_end'
    }

    def __init__(self, consumption=None, interval_start=None, interval_end=None):  # noqa: E501
        """Consumption - a model defined in Swagger"""  # noqa: E501

        self._consumption = None
        self._interval_start = None
        self._interval_end = None
        self.discriminator = None

        if consumption is not None:
            self.consumption = consumption
        if interval_start is not None:
            self.interval_start = interval_start
        if interval_end is not None:
            self.interval_end = interval_end

    @property
    def consumption(self):
        """Gets the consumption of this Consumption.  # noqa: E501


        :return: The consumption of this Consumption.  # noqa: E501
        :rtype: float
        """
        return self._consumption

    @consumption.setter
    def consumption(self, consumption):
        """Sets the consumption of this Consumption.


        :param consumption: The consumption of this Consumption.  # noqa: E501
        :type: float
        """

        self._consumption = consumption

    @property
    def interval_start(self):
        """Gets the interval_start of this Consumption.  # noqa: E501


        :return: The interval_start of this Consumption.  # noqa: E501
        :rtype: str
        """
        return self._interval_start

    @interval_start.setter
    def interval_start(self, interval_start):
        """Sets the interval_start of this Consumption.


        :param interval_start: The interval_start of this Consumption.  # noqa: E501
        :type: str
        """

        self._interval_start = interval_start

    @property
    def interval_end(self):
        """Gets the interval_end of this Consumption.  # noqa: E501


        :return: The interval_end of this Consumption.  # noqa: E501
        :rtype: str
        """
        return self._interval_end

    @interval_end.setter
    def interval_end(self, interval_end):
        """Sets the interval_end of this Consumption.


        :param interval_end: The interval_end of this Consumption.  # noqa: E501
        :type: str
        """

        self._interval_end = interval_end

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Consumption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
