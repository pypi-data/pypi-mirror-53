# coding: utf-8

"""
    Octopus Energy

    This is a representation of the Octopus Energy [REST API](https://developer.octopus.energy/docs/api/)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.extra_product_sample_consumption import ExtraProductSampleConsumption  # noqa: F401,E501
from swagger_client.models.extra_product_sample_quotes import ExtraProductSampleQuotes  # noqa: F401,E501
from swagger_client.models.tariffs import Tariffs  # noqa: F401,E501


class ExtraProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tariffs_active_at': 'str',
        'single_register_electricity_tariffs': 'Tariffs',
        'dual_register_electricity_tariffs': 'Tariffs',
        'single_register_gas_tariffs': 'Tariffs',
        'sample_quotes': 'ExtraProductSampleQuotes',
        'sample_consumption': 'ExtraProductSampleConsumption'
    }

    attribute_map = {
        'tariffs_active_at': 'tariffs_active_at',
        'single_register_electricity_tariffs': 'single_register_electricity_tariffs',
        'dual_register_electricity_tariffs': 'dual_register_electricity_tariffs',
        'single_register_gas_tariffs': 'single_register_gas_tariffs',
        'sample_quotes': 'sample_quotes',
        'sample_consumption': 'sample_consumption'
    }

    def __init__(self, tariffs_active_at=None, single_register_electricity_tariffs=None, dual_register_electricity_tariffs=None, single_register_gas_tariffs=None, sample_quotes=None, sample_consumption=None):  # noqa: E501
        """ExtraProduct - a model defined in Swagger"""  # noqa: E501

        self._tariffs_active_at = None
        self._single_register_electricity_tariffs = None
        self._dual_register_electricity_tariffs = None
        self._single_register_gas_tariffs = None
        self._sample_quotes = None
        self._sample_consumption = None
        self.discriminator = None

        if tariffs_active_at is not None:
            self.tariffs_active_at = tariffs_active_at
        if single_register_electricity_tariffs is not None:
            self.single_register_electricity_tariffs = single_register_electricity_tariffs
        if dual_register_electricity_tariffs is not None:
            self.dual_register_electricity_tariffs = dual_register_electricity_tariffs
        if single_register_gas_tariffs is not None:
            self.single_register_gas_tariffs = single_register_gas_tariffs
        if sample_quotes is not None:
            self.sample_quotes = sample_quotes
        if sample_consumption is not None:
            self.sample_consumption = sample_consumption

    @property
    def tariffs_active_at(self):
        """Gets the tariffs_active_at of this ExtraProduct.  # noqa: E501


        :return: The tariffs_active_at of this ExtraProduct.  # noqa: E501
        :rtype: str
        """
        return self._tariffs_active_at

    @tariffs_active_at.setter
    def tariffs_active_at(self, tariffs_active_at):
        """Sets the tariffs_active_at of this ExtraProduct.


        :param tariffs_active_at: The tariffs_active_at of this ExtraProduct.  # noqa: E501
        :type: str
        """

        self._tariffs_active_at = tariffs_active_at

    @property
    def single_register_electricity_tariffs(self):
        """Gets the single_register_electricity_tariffs of this ExtraProduct.  # noqa: E501


        :return: The single_register_electricity_tariffs of this ExtraProduct.  # noqa: E501
        :rtype: Tariffs
        """
        return self._single_register_electricity_tariffs

    @single_register_electricity_tariffs.setter
    def single_register_electricity_tariffs(self, single_register_electricity_tariffs):
        """Sets the single_register_electricity_tariffs of this ExtraProduct.


        :param single_register_electricity_tariffs: The single_register_electricity_tariffs of this ExtraProduct.  # noqa: E501
        :type: Tariffs
        """

        self._single_register_electricity_tariffs = single_register_electricity_tariffs

    @property
    def dual_register_electricity_tariffs(self):
        """Gets the dual_register_electricity_tariffs of this ExtraProduct.  # noqa: E501


        :return: The dual_register_electricity_tariffs of this ExtraProduct.  # noqa: E501
        :rtype: Tariffs
        """
        return self._dual_register_electricity_tariffs

    @dual_register_electricity_tariffs.setter
    def dual_register_electricity_tariffs(self, dual_register_electricity_tariffs):
        """Sets the dual_register_electricity_tariffs of this ExtraProduct.


        :param dual_register_electricity_tariffs: The dual_register_electricity_tariffs of this ExtraProduct.  # noqa: E501
        :type: Tariffs
        """

        self._dual_register_electricity_tariffs = dual_register_electricity_tariffs

    @property
    def single_register_gas_tariffs(self):
        """Gets the single_register_gas_tariffs of this ExtraProduct.  # noqa: E501


        :return: The single_register_gas_tariffs of this ExtraProduct.  # noqa: E501
        :rtype: Tariffs
        """
        return self._single_register_gas_tariffs

    @single_register_gas_tariffs.setter
    def single_register_gas_tariffs(self, single_register_gas_tariffs):
        """Sets the single_register_gas_tariffs of this ExtraProduct.


        :param single_register_gas_tariffs: The single_register_gas_tariffs of this ExtraProduct.  # noqa: E501
        :type: Tariffs
        """

        self._single_register_gas_tariffs = single_register_gas_tariffs

    @property
    def sample_quotes(self):
        """Gets the sample_quotes of this ExtraProduct.  # noqa: E501


        :return: The sample_quotes of this ExtraProduct.  # noqa: E501
        :rtype: ExtraProductSampleQuotes
        """
        return self._sample_quotes

    @sample_quotes.setter
    def sample_quotes(self, sample_quotes):
        """Sets the sample_quotes of this ExtraProduct.


        :param sample_quotes: The sample_quotes of this ExtraProduct.  # noqa: E501
        :type: ExtraProductSampleQuotes
        """

        self._sample_quotes = sample_quotes

    @property
    def sample_consumption(self):
        """Gets the sample_consumption of this ExtraProduct.  # noqa: E501


        :return: The sample_consumption of this ExtraProduct.  # noqa: E501
        :rtype: ExtraProductSampleConsumption
        """
        return self._sample_consumption

    @sample_consumption.setter
    def sample_consumption(self, sample_consumption):
        """Sets the sample_consumption of this ExtraProduct.


        :param sample_consumption: The sample_consumption of this ExtraProduct.  # noqa: E501
        :type: ExtraProductSampleConsumption
        """

        self._sample_consumption = sample_consumption

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtraProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
