# coding: utf-8

"""
    Octopus Energy

    This is a representation of the Octopus Energy [REST API](https://developer.octopus.energy/docs/api/)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.extra_product import ExtraProduct  # noqa: F401,E501
from swagger_client.models.extra_product_sample_consumption import ExtraProductSampleConsumption  # noqa: F401,E501
from swagger_client.models.extra_product_sample_quotes import ExtraProductSampleQuotes  # noqa: F401,E501
from swagger_client.models.link import Link  # noqa: F401,E501
from swagger_client.models.product import Product  # noqa: F401,E501
from swagger_client.models.tariffs import Tariffs  # noqa: F401,E501


class DetailedProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'full_name': 'str',
        'display_name': 'str',
        'description': 'str',
        'is_variable': 'bool',
        'is_green': 'bool',
        'is_tracker': 'bool',
        'is_prepay': 'bool',
        'is_business': 'bool',
        'is_restricted': 'bool',
        'term': 'int',
        'brand': 'str',
        'available_from': 'str',
        'available_to': 'str',
        'links': 'list[Link]',
        'tariffs_active_at': 'str',
        'single_register_electricity_tariffs': 'Tariffs',
        'dual_register_electricity_tariffs': 'Tariffs',
        'single_register_gas_tariffs': 'Tariffs',
        'sample_quotes': 'ExtraProductSampleQuotes',
        'sample_consumption': 'ExtraProductSampleConsumption'
    }

    attribute_map = {
        'code': 'code',
        'full_name': 'full_name',
        'display_name': 'display_name',
        'description': 'description',
        'is_variable': 'is_variable',
        'is_green': 'is_green',
        'is_tracker': 'is_tracker',
        'is_prepay': 'is_prepay',
        'is_business': 'is_business',
        'is_restricted': 'is_restricted',
        'term': 'term',
        'brand': 'brand',
        'available_from': 'available_from',
        'available_to': 'available_to',
        'links': 'links',
        'tariffs_active_at': 'tariffs_active_at',
        'single_register_electricity_tariffs': 'single_register_electricity_tariffs',
        'dual_register_electricity_tariffs': 'dual_register_electricity_tariffs',
        'single_register_gas_tariffs': 'single_register_gas_tariffs',
        'sample_quotes': 'sample_quotes',
        'sample_consumption': 'sample_consumption'
    }

    def __init__(self, code=None, full_name=None, display_name=None, description=None, is_variable=None, is_green=None, is_tracker=None, is_prepay=None, is_business=None, is_restricted=None, term=None, brand=None, available_from=None, available_to=None, links=None, tariffs_active_at=None, single_register_electricity_tariffs=None, dual_register_electricity_tariffs=None, single_register_gas_tariffs=None, sample_quotes=None, sample_consumption=None):  # noqa: E501
        """DetailedProduct - a model defined in Swagger"""  # noqa: E501

        self._code = None
        self._full_name = None
        self._display_name = None
        self._description = None
        self._is_variable = None
        self._is_green = None
        self._is_tracker = None
        self._is_prepay = None
        self._is_business = None
        self._is_restricted = None
        self._term = None
        self._brand = None
        self._available_from = None
        self._available_to = None
        self._links = None
        self._tariffs_active_at = None
        self._single_register_electricity_tariffs = None
        self._dual_register_electricity_tariffs = None
        self._single_register_gas_tariffs = None
        self._sample_quotes = None
        self._sample_consumption = None
        self.discriminator = None

        if code is not None:
            self.code = code
        if full_name is not None:
            self.full_name = full_name
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if is_variable is not None:
            self.is_variable = is_variable
        if is_green is not None:
            self.is_green = is_green
        if is_tracker is not None:
            self.is_tracker = is_tracker
        if is_prepay is not None:
            self.is_prepay = is_prepay
        if is_business is not None:
            self.is_business = is_business
        if is_restricted is not None:
            self.is_restricted = is_restricted
        if term is not None:
            self.term = term
        if brand is not None:
            self.brand = brand
        if available_from is not None:
            self.available_from = available_from
        if available_to is not None:
            self.available_to = available_to
        if links is not None:
            self.links = links
        if tariffs_active_at is not None:
            self.tariffs_active_at = tariffs_active_at
        if single_register_electricity_tariffs is not None:
            self.single_register_electricity_tariffs = single_register_electricity_tariffs
        if dual_register_electricity_tariffs is not None:
            self.dual_register_electricity_tariffs = dual_register_electricity_tariffs
        if single_register_gas_tariffs is not None:
            self.single_register_gas_tariffs = single_register_gas_tariffs
        if sample_quotes is not None:
            self.sample_quotes = sample_quotes
        if sample_consumption is not None:
            self.sample_consumption = sample_consumption

    @property
    def code(self):
        """Gets the code of this DetailedProduct.  # noqa: E501


        :return: The code of this DetailedProduct.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this DetailedProduct.


        :param code: The code of this DetailedProduct.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def full_name(self):
        """Gets the full_name of this DetailedProduct.  # noqa: E501


        :return: The full_name of this DetailedProduct.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this DetailedProduct.


        :param full_name: The full_name of this DetailedProduct.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def display_name(self):
        """Gets the display_name of this DetailedProduct.  # noqa: E501


        :return: The display_name of this DetailedProduct.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DetailedProduct.


        :param display_name: The display_name of this DetailedProduct.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this DetailedProduct.  # noqa: E501


        :return: The description of this DetailedProduct.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DetailedProduct.


        :param description: The description of this DetailedProduct.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_variable(self):
        """Gets the is_variable of this DetailedProduct.  # noqa: E501


        :return: The is_variable of this DetailedProduct.  # noqa: E501
        :rtype: bool
        """
        return self._is_variable

    @is_variable.setter
    def is_variable(self, is_variable):
        """Sets the is_variable of this DetailedProduct.


        :param is_variable: The is_variable of this DetailedProduct.  # noqa: E501
        :type: bool
        """

        self._is_variable = is_variable

    @property
    def is_green(self):
        """Gets the is_green of this DetailedProduct.  # noqa: E501


        :return: The is_green of this DetailedProduct.  # noqa: E501
        :rtype: bool
        """
        return self._is_green

    @is_green.setter
    def is_green(self, is_green):
        """Sets the is_green of this DetailedProduct.


        :param is_green: The is_green of this DetailedProduct.  # noqa: E501
        :type: bool
        """

        self._is_green = is_green

    @property
    def is_tracker(self):
        """Gets the is_tracker of this DetailedProduct.  # noqa: E501


        :return: The is_tracker of this DetailedProduct.  # noqa: E501
        :rtype: bool
        """
        return self._is_tracker

    @is_tracker.setter
    def is_tracker(self, is_tracker):
        """Sets the is_tracker of this DetailedProduct.


        :param is_tracker: The is_tracker of this DetailedProduct.  # noqa: E501
        :type: bool
        """

        self._is_tracker = is_tracker

    @property
    def is_prepay(self):
        """Gets the is_prepay of this DetailedProduct.  # noqa: E501


        :return: The is_prepay of this DetailedProduct.  # noqa: E501
        :rtype: bool
        """
        return self._is_prepay

    @is_prepay.setter
    def is_prepay(self, is_prepay):
        """Sets the is_prepay of this DetailedProduct.


        :param is_prepay: The is_prepay of this DetailedProduct.  # noqa: E501
        :type: bool
        """

        self._is_prepay = is_prepay

    @property
    def is_business(self):
        """Gets the is_business of this DetailedProduct.  # noqa: E501


        :return: The is_business of this DetailedProduct.  # noqa: E501
        :rtype: bool
        """
        return self._is_business

    @is_business.setter
    def is_business(self, is_business):
        """Sets the is_business of this DetailedProduct.


        :param is_business: The is_business of this DetailedProduct.  # noqa: E501
        :type: bool
        """

        self._is_business = is_business

    @property
    def is_restricted(self):
        """Gets the is_restricted of this DetailedProduct.  # noqa: E501


        :return: The is_restricted of this DetailedProduct.  # noqa: E501
        :rtype: bool
        """
        return self._is_restricted

    @is_restricted.setter
    def is_restricted(self, is_restricted):
        """Sets the is_restricted of this DetailedProduct.


        :param is_restricted: The is_restricted of this DetailedProduct.  # noqa: E501
        :type: bool
        """

        self._is_restricted = is_restricted

    @property
    def term(self):
        """Gets the term of this DetailedProduct.  # noqa: E501


        :return: The term of this DetailedProduct.  # noqa: E501
        :rtype: int
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this DetailedProduct.


        :param term: The term of this DetailedProduct.  # noqa: E501
        :type: int
        """

        self._term = term

    @property
    def brand(self):
        """Gets the brand of this DetailedProduct.  # noqa: E501


        :return: The brand of this DetailedProduct.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this DetailedProduct.


        :param brand: The brand of this DetailedProduct.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def available_from(self):
        """Gets the available_from of this DetailedProduct.  # noqa: E501


        :return: The available_from of this DetailedProduct.  # noqa: E501
        :rtype: str
        """
        return self._available_from

    @available_from.setter
    def available_from(self, available_from):
        """Sets the available_from of this DetailedProduct.


        :param available_from: The available_from of this DetailedProduct.  # noqa: E501
        :type: str
        """

        self._available_from = available_from

    @property
    def available_to(self):
        """Gets the available_to of this DetailedProduct.  # noqa: E501


        :return: The available_to of this DetailedProduct.  # noqa: E501
        :rtype: str
        """
        return self._available_to

    @available_to.setter
    def available_to(self, available_to):
        """Sets the available_to of this DetailedProduct.


        :param available_to: The available_to of this DetailedProduct.  # noqa: E501
        :type: str
        """

        self._available_to = available_to

    @property
    def links(self):
        """Gets the links of this DetailedProduct.  # noqa: E501


        :return: The links of this DetailedProduct.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DetailedProduct.


        :param links: The links of this DetailedProduct.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def tariffs_active_at(self):
        """Gets the tariffs_active_at of this DetailedProduct.  # noqa: E501


        :return: The tariffs_active_at of this DetailedProduct.  # noqa: E501
        :rtype: str
        """
        return self._tariffs_active_at

    @tariffs_active_at.setter
    def tariffs_active_at(self, tariffs_active_at):
        """Sets the tariffs_active_at of this DetailedProduct.


        :param tariffs_active_at: The tariffs_active_at of this DetailedProduct.  # noqa: E501
        :type: str
        """

        self._tariffs_active_at = tariffs_active_at

    @property
    def single_register_electricity_tariffs(self):
        """Gets the single_register_electricity_tariffs of this DetailedProduct.  # noqa: E501


        :return: The single_register_electricity_tariffs of this DetailedProduct.  # noqa: E501
        :rtype: Tariffs
        """
        return self._single_register_electricity_tariffs

    @single_register_electricity_tariffs.setter
    def single_register_electricity_tariffs(self, single_register_electricity_tariffs):
        """Sets the single_register_electricity_tariffs of this DetailedProduct.


        :param single_register_electricity_tariffs: The single_register_electricity_tariffs of this DetailedProduct.  # noqa: E501
        :type: Tariffs
        """

        self._single_register_electricity_tariffs = single_register_electricity_tariffs

    @property
    def dual_register_electricity_tariffs(self):
        """Gets the dual_register_electricity_tariffs of this DetailedProduct.  # noqa: E501


        :return: The dual_register_electricity_tariffs of this DetailedProduct.  # noqa: E501
        :rtype: Tariffs
        """
        return self._dual_register_electricity_tariffs

    @dual_register_electricity_tariffs.setter
    def dual_register_electricity_tariffs(self, dual_register_electricity_tariffs):
        """Sets the dual_register_electricity_tariffs of this DetailedProduct.


        :param dual_register_electricity_tariffs: The dual_register_electricity_tariffs of this DetailedProduct.  # noqa: E501
        :type: Tariffs
        """

        self._dual_register_electricity_tariffs = dual_register_electricity_tariffs

    @property
    def single_register_gas_tariffs(self):
        """Gets the single_register_gas_tariffs of this DetailedProduct.  # noqa: E501


        :return: The single_register_gas_tariffs of this DetailedProduct.  # noqa: E501
        :rtype: Tariffs
        """
        return self._single_register_gas_tariffs

    @single_register_gas_tariffs.setter
    def single_register_gas_tariffs(self, single_register_gas_tariffs):
        """Sets the single_register_gas_tariffs of this DetailedProduct.


        :param single_register_gas_tariffs: The single_register_gas_tariffs of this DetailedProduct.  # noqa: E501
        :type: Tariffs
        """

        self._single_register_gas_tariffs = single_register_gas_tariffs

    @property
    def sample_quotes(self):
        """Gets the sample_quotes of this DetailedProduct.  # noqa: E501


        :return: The sample_quotes of this DetailedProduct.  # noqa: E501
        :rtype: ExtraProductSampleQuotes
        """
        return self._sample_quotes

    @sample_quotes.setter
    def sample_quotes(self, sample_quotes):
        """Sets the sample_quotes of this DetailedProduct.


        :param sample_quotes: The sample_quotes of this DetailedProduct.  # noqa: E501
        :type: ExtraProductSampleQuotes
        """

        self._sample_quotes = sample_quotes

    @property
    def sample_consumption(self):
        """Gets the sample_consumption of this DetailedProduct.  # noqa: E501


        :return: The sample_consumption of this DetailedProduct.  # noqa: E501
        :rtype: ExtraProductSampleConsumption
        """
        return self._sample_consumption

    @sample_consumption.setter
    def sample_consumption(self, sample_consumption):
        """Sets the sample_consumption of this DetailedProduct.


        :param sample_consumption: The sample_consumption of this DetailedProduct.  # noqa: E501
        :type: ExtraProductSampleConsumption
        """

        self._sample_consumption = sample_consumption

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetailedProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
