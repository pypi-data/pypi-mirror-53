# coding: utf-8

"""
    Octopus Energy

    This is a representation of the Octopus Energy [REST API](https://developer.octopus.energy/docs/api/)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.link import Link  # noqa: F401,E501


class PartialTariff(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'standard_unit_rate_exc_vat': 'int',
        'standard_unit_rate_inc_vat': 'int',
        'standing_charge_exc_vat': 'int',
        'standing_charge_inc_vat': 'int',
        'online_discount_exc_vat': 'int',
        'online_discount_inc_vat': 'int',
        'dual_fuel_discount_exc_vat': 'int',
        'dual_fuel_discount_inc_vat': 'int',
        'exit_fees_exc_vat': 'int',
        'exit_fees_inc_vat': 'int',
        'links': 'list[Link]'
    }

    attribute_map = {
        'code': 'code',
        'standard_unit_rate_exc_vat': 'standard_unit_rate_exc_vat',
        'standard_unit_rate_inc_vat': 'standard_unit_rate_inc_vat',
        'standing_charge_exc_vat': 'standing_charge_exc_vat',
        'standing_charge_inc_vat': 'standing_charge_inc_vat',
        'online_discount_exc_vat': 'online_discount_exc_vat',
        'online_discount_inc_vat': 'online_discount_inc_vat',
        'dual_fuel_discount_exc_vat': 'dual_fuel_discount_exc_vat',
        'dual_fuel_discount_inc_vat': 'dual_fuel_discount_inc_vat',
        'exit_fees_exc_vat': 'exit_fees_exc_vat',
        'exit_fees_inc_vat': 'exit_fees_inc_vat',
        'links': 'links'
    }

    def __init__(self, code=None, standard_unit_rate_exc_vat=None, standard_unit_rate_inc_vat=None, standing_charge_exc_vat=None, standing_charge_inc_vat=None, online_discount_exc_vat=None, online_discount_inc_vat=None, dual_fuel_discount_exc_vat=None, dual_fuel_discount_inc_vat=None, exit_fees_exc_vat=None, exit_fees_inc_vat=None, links=None):  # noqa: E501
        """PartialTariff - a model defined in Swagger"""  # noqa: E501

        self._code = None
        self._standard_unit_rate_exc_vat = None
        self._standard_unit_rate_inc_vat = None
        self._standing_charge_exc_vat = None
        self._standing_charge_inc_vat = None
        self._online_discount_exc_vat = None
        self._online_discount_inc_vat = None
        self._dual_fuel_discount_exc_vat = None
        self._dual_fuel_discount_inc_vat = None
        self._exit_fees_exc_vat = None
        self._exit_fees_inc_vat = None
        self._links = None
        self.discriminator = None

        if code is not None:
            self.code = code
        if standard_unit_rate_exc_vat is not None:
            self.standard_unit_rate_exc_vat = standard_unit_rate_exc_vat
        if standard_unit_rate_inc_vat is not None:
            self.standard_unit_rate_inc_vat = standard_unit_rate_inc_vat
        if standing_charge_exc_vat is not None:
            self.standing_charge_exc_vat = standing_charge_exc_vat
        if standing_charge_inc_vat is not None:
            self.standing_charge_inc_vat = standing_charge_inc_vat
        if online_discount_exc_vat is not None:
            self.online_discount_exc_vat = online_discount_exc_vat
        if online_discount_inc_vat is not None:
            self.online_discount_inc_vat = online_discount_inc_vat
        if dual_fuel_discount_exc_vat is not None:
            self.dual_fuel_discount_exc_vat = dual_fuel_discount_exc_vat
        if dual_fuel_discount_inc_vat is not None:
            self.dual_fuel_discount_inc_vat = dual_fuel_discount_inc_vat
        if exit_fees_exc_vat is not None:
            self.exit_fees_exc_vat = exit_fees_exc_vat
        if exit_fees_inc_vat is not None:
            self.exit_fees_inc_vat = exit_fees_inc_vat
        if links is not None:
            self.links = links

    @property
    def code(self):
        """Gets the code of this PartialTariff.  # noqa: E501


        :return: The code of this PartialTariff.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PartialTariff.


        :param code: The code of this PartialTariff.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def standard_unit_rate_exc_vat(self):
        """Gets the standard_unit_rate_exc_vat of this PartialTariff.  # noqa: E501


        :return: The standard_unit_rate_exc_vat of this PartialTariff.  # noqa: E501
        :rtype: int
        """
        return self._standard_unit_rate_exc_vat

    @standard_unit_rate_exc_vat.setter
    def standard_unit_rate_exc_vat(self, standard_unit_rate_exc_vat):
        """Sets the standard_unit_rate_exc_vat of this PartialTariff.


        :param standard_unit_rate_exc_vat: The standard_unit_rate_exc_vat of this PartialTariff.  # noqa: E501
        :type: int
        """

        self._standard_unit_rate_exc_vat = standard_unit_rate_exc_vat

    @property
    def standard_unit_rate_inc_vat(self):
        """Gets the standard_unit_rate_inc_vat of this PartialTariff.  # noqa: E501


        :return: The standard_unit_rate_inc_vat of this PartialTariff.  # noqa: E501
        :rtype: int
        """
        return self._standard_unit_rate_inc_vat

    @standard_unit_rate_inc_vat.setter
    def standard_unit_rate_inc_vat(self, standard_unit_rate_inc_vat):
        """Sets the standard_unit_rate_inc_vat of this PartialTariff.


        :param standard_unit_rate_inc_vat: The standard_unit_rate_inc_vat of this PartialTariff.  # noqa: E501
        :type: int
        """

        self._standard_unit_rate_inc_vat = standard_unit_rate_inc_vat

    @property
    def standing_charge_exc_vat(self):
        """Gets the standing_charge_exc_vat of this PartialTariff.  # noqa: E501


        :return: The standing_charge_exc_vat of this PartialTariff.  # noqa: E501
        :rtype: int
        """
        return self._standing_charge_exc_vat

    @standing_charge_exc_vat.setter
    def standing_charge_exc_vat(self, standing_charge_exc_vat):
        """Sets the standing_charge_exc_vat of this PartialTariff.


        :param standing_charge_exc_vat: The standing_charge_exc_vat of this PartialTariff.  # noqa: E501
        :type: int
        """

        self._standing_charge_exc_vat = standing_charge_exc_vat

    @property
    def standing_charge_inc_vat(self):
        """Gets the standing_charge_inc_vat of this PartialTariff.  # noqa: E501


        :return: The standing_charge_inc_vat of this PartialTariff.  # noqa: E501
        :rtype: int
        """
        return self._standing_charge_inc_vat

    @standing_charge_inc_vat.setter
    def standing_charge_inc_vat(self, standing_charge_inc_vat):
        """Sets the standing_charge_inc_vat of this PartialTariff.


        :param standing_charge_inc_vat: The standing_charge_inc_vat of this PartialTariff.  # noqa: E501
        :type: int
        """

        self._standing_charge_inc_vat = standing_charge_inc_vat

    @property
    def online_discount_exc_vat(self):
        """Gets the online_discount_exc_vat of this PartialTariff.  # noqa: E501


        :return: The online_discount_exc_vat of this PartialTariff.  # noqa: E501
        :rtype: int
        """
        return self._online_discount_exc_vat

    @online_discount_exc_vat.setter
    def online_discount_exc_vat(self, online_discount_exc_vat):
        """Sets the online_discount_exc_vat of this PartialTariff.


        :param online_discount_exc_vat: The online_discount_exc_vat of this PartialTariff.  # noqa: E501
        :type: int
        """

        self._online_discount_exc_vat = online_discount_exc_vat

    @property
    def online_discount_inc_vat(self):
        """Gets the online_discount_inc_vat of this PartialTariff.  # noqa: E501


        :return: The online_discount_inc_vat of this PartialTariff.  # noqa: E501
        :rtype: int
        """
        return self._online_discount_inc_vat

    @online_discount_inc_vat.setter
    def online_discount_inc_vat(self, online_discount_inc_vat):
        """Sets the online_discount_inc_vat of this PartialTariff.


        :param online_discount_inc_vat: The online_discount_inc_vat of this PartialTariff.  # noqa: E501
        :type: int
        """

        self._online_discount_inc_vat = online_discount_inc_vat

    @property
    def dual_fuel_discount_exc_vat(self):
        """Gets the dual_fuel_discount_exc_vat of this PartialTariff.  # noqa: E501


        :return: The dual_fuel_discount_exc_vat of this PartialTariff.  # noqa: E501
        :rtype: int
        """
        return self._dual_fuel_discount_exc_vat

    @dual_fuel_discount_exc_vat.setter
    def dual_fuel_discount_exc_vat(self, dual_fuel_discount_exc_vat):
        """Sets the dual_fuel_discount_exc_vat of this PartialTariff.


        :param dual_fuel_discount_exc_vat: The dual_fuel_discount_exc_vat of this PartialTariff.  # noqa: E501
        :type: int
        """

        self._dual_fuel_discount_exc_vat = dual_fuel_discount_exc_vat

    @property
    def dual_fuel_discount_inc_vat(self):
        """Gets the dual_fuel_discount_inc_vat of this PartialTariff.  # noqa: E501


        :return: The dual_fuel_discount_inc_vat of this PartialTariff.  # noqa: E501
        :rtype: int
        """
        return self._dual_fuel_discount_inc_vat

    @dual_fuel_discount_inc_vat.setter
    def dual_fuel_discount_inc_vat(self, dual_fuel_discount_inc_vat):
        """Sets the dual_fuel_discount_inc_vat of this PartialTariff.


        :param dual_fuel_discount_inc_vat: The dual_fuel_discount_inc_vat of this PartialTariff.  # noqa: E501
        :type: int
        """

        self._dual_fuel_discount_inc_vat = dual_fuel_discount_inc_vat

    @property
    def exit_fees_exc_vat(self):
        """Gets the exit_fees_exc_vat of this PartialTariff.  # noqa: E501


        :return: The exit_fees_exc_vat of this PartialTariff.  # noqa: E501
        :rtype: int
        """
        return self._exit_fees_exc_vat

    @exit_fees_exc_vat.setter
    def exit_fees_exc_vat(self, exit_fees_exc_vat):
        """Sets the exit_fees_exc_vat of this PartialTariff.


        :param exit_fees_exc_vat: The exit_fees_exc_vat of this PartialTariff.  # noqa: E501
        :type: int
        """

        self._exit_fees_exc_vat = exit_fees_exc_vat

    @property
    def exit_fees_inc_vat(self):
        """Gets the exit_fees_inc_vat of this PartialTariff.  # noqa: E501


        :return: The exit_fees_inc_vat of this PartialTariff.  # noqa: E501
        :rtype: int
        """
        return self._exit_fees_inc_vat

    @exit_fees_inc_vat.setter
    def exit_fees_inc_vat(self, exit_fees_inc_vat):
        """Sets the exit_fees_inc_vat of this PartialTariff.


        :param exit_fees_inc_vat: The exit_fees_inc_vat of this PartialTariff.  # noqa: E501
        :type: int
        """

        self._exit_fees_inc_vat = exit_fees_inc_vat

    @property
    def links(self):
        """Gets the links of this PartialTariff.  # noqa: E501


        :return: The links of this PartialTariff.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PartialTariff.


        :param links: The links of this PartialTariff.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartialTariff):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
