# coding: utf-8

"""
    Octopus Energy

    This is a representation of the Octopus Energy [REST API](https://developer.octopus.energy/docs/api/)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def electricity_meter_points_mpan_get(self, mpan, **kwargs):  # noqa: E501
        """Retrieve the details of a meter-point  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.electricity_meter_points_mpan_get(mpan, async=True)
        >>> result = thread.get()

        :param async bool
        :param str mpan: The electricity meter-point’s MPAN (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.electricity_meter_points_mpan_get_with_http_info(mpan, **kwargs)  # noqa: E501
        else:
            (data) = self.electricity_meter_points_mpan_get_with_http_info(mpan, **kwargs)  # noqa: E501
            return data

    def electricity_meter_points_mpan_get_with_http_info(self, mpan, **kwargs):  # noqa: E501
        """Retrieve the details of a meter-point  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.electricity_meter_points_mpan_get_with_http_info(mpan, async=True)
        >>> result = thread.get()

        :param async bool
        :param str mpan: The electricity meter-point’s MPAN (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mpan']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method electricity_meter_points_mpan_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mpan' is set
        if ('mpan' not in params or
                params['mpan'] is None):
            raise ValueError("Missing the required parameter `mpan` when calling `electricity_meter_points_mpan_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mpan' in params:
            path_params['mpan'] = params['mpan']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/electricity-meter-points/{mpan}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def electricity_meter_points_mpan_meters_serial_number_consumption_get(self, mpan, serial_number, **kwargs):  # noqa: E501
        """Return a list of kWh consumption values for half-hour periods for a given meter-point and meter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.electricity_meter_points_mpan_meters_serial_number_consumption_get(mpan, serial_number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str mpan: The electricity meter-point’s MPAN (required)
        :param str serial_number: The meter's serial number (required)
        :param str period_from: Show consumption from the given datetime (inclusive). This parameter can be provided on its own
        :param str period_to: Show consumption to the given datetime (exclusive). This parameter also requires providing the period_from parameter to create a range
        :param int page_size: Page size of returned results. Default is 100, maximum is 25,000 to give a full year of half-hourly consumption details
        :param str order_by: Ordering of results returned. Default is that results are returned in reverse order from latest available figure.
        :param str group_by: Grouping of consumption. Default is that consumption is returned in half-hour periods.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.electricity_meter_points_mpan_meters_serial_number_consumption_get_with_http_info(mpan, serial_number, **kwargs)  # noqa: E501
        else:
            (data) = self.electricity_meter_points_mpan_meters_serial_number_consumption_get_with_http_info(mpan, serial_number, **kwargs)  # noqa: E501
            return data

    def electricity_meter_points_mpan_meters_serial_number_consumption_get_with_http_info(self, mpan, serial_number, **kwargs):  # noqa: E501
        """Return a list of kWh consumption values for half-hour periods for a given meter-point and meter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.electricity_meter_points_mpan_meters_serial_number_consumption_get_with_http_info(mpan, serial_number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str mpan: The electricity meter-point’s MPAN (required)
        :param str serial_number: The meter's serial number (required)
        :param str period_from: Show consumption from the given datetime (inclusive). This parameter can be provided on its own
        :param str period_to: Show consumption to the given datetime (exclusive). This parameter also requires providing the period_from parameter to create a range
        :param int page_size: Page size of returned results. Default is 100, maximum is 25,000 to give a full year of half-hourly consumption details
        :param str order_by: Ordering of results returned. Default is that results are returned in reverse order from latest available figure.
        :param str group_by: Grouping of consumption. Default is that consumption is returned in half-hour periods.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mpan', 'serial_number', 'period_from', 'period_to', 'page_size', 'order_by', 'group_by']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method electricity_meter_points_mpan_meters_serial_number_consumption_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mpan' is set
        if ('mpan' not in params or
                params['mpan'] is None):
            raise ValueError("Missing the required parameter `mpan` when calling `electricity_meter_points_mpan_meters_serial_number_consumption_get`")  # noqa: E501
        # verify the required parameter 'serial_number' is set
        if ('serial_number' not in params or
                params['serial_number'] is None):
            raise ValueError("Missing the required parameter `serial_number` when calling `electricity_meter_points_mpan_meters_serial_number_consumption_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mpan' in params:
            path_params['mpan'] = params['mpan']  # noqa: E501
        if 'serial_number' in params:
            path_params['serial_number'] = params['serial_number']  # noqa: E501

        query_params = []
        if 'period_from' in params:
            query_params.append(('period_from', params['period_from']))  # noqa: E501
        if 'period_to' in params:
            query_params.append(('period_to', params['period_to']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'group_by' in params:
            query_params.append(('group_by', params['group_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/electricity-meter-points/{mpan}/meters/{serial_number}/consumption/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def gas_meter_points_mprn_get(self, mprn, **kwargs):  # noqa: E501
        """Retrieve the details of a meter-point  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.gas_meter_points_mprn_get(mprn, async=True)
        >>> result = thread.get()

        :param async bool
        :param str mprn: The gas meter-point’s MPRN (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.gas_meter_points_mprn_get_with_http_info(mprn, **kwargs)  # noqa: E501
        else:
            (data) = self.gas_meter_points_mprn_get_with_http_info(mprn, **kwargs)  # noqa: E501
            return data

    def gas_meter_points_mprn_get_with_http_info(self, mprn, **kwargs):  # noqa: E501
        """Retrieve the details of a meter-point  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.gas_meter_points_mprn_get_with_http_info(mprn, async=True)
        >>> result = thread.get()

        :param async bool
        :param str mprn: The gas meter-point’s MPRN (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mprn']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gas_meter_points_mprn_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mprn' is set
        if ('mprn' not in params or
                params['mprn'] is None):
            raise ValueError("Missing the required parameter `mprn` when calling `gas_meter_points_mprn_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mprn' in params:
            path_params['mprn'] = params['mprn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/gas-meter-points/{mprn}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def gas_meter_points_mprn_meters_serial_number_consumption_get(self, mprn, serial_number, **kwargs):  # noqa: E501
        """Return a list of kWh consumption values for half-hour periods for a given meter-point and meter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.gas_meter_points_mprn_meters_serial_number_consumption_get(mprn, serial_number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str mprn: The gas meter-point’s MPRN (required)
        :param str serial_number: The meter's serial number (required)
        :param str period_from: Show consumption from the given datetime (inclusive). This parameter can be provided on its own
        :param str period_to: Show consumption to the given datetime (exclusive). This parameter also requires providing the period_from parameter to create a range
        :param int page_size: Page size of returned results. Default is 100, maximum is 25,000 to give a full year of half-hourly consumption details
        :param str order_by: Ordering of results returned. Default is that results are returned in reverse order from latest available figure.
        :param str group_by: Grouping of consumption. Default is that consumption is returned in half-hour periods.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.gas_meter_points_mprn_meters_serial_number_consumption_get_with_http_info(mprn, serial_number, **kwargs)  # noqa: E501
        else:
            (data) = self.gas_meter_points_mprn_meters_serial_number_consumption_get_with_http_info(mprn, serial_number, **kwargs)  # noqa: E501
            return data

    def gas_meter_points_mprn_meters_serial_number_consumption_get_with_http_info(self, mprn, serial_number, **kwargs):  # noqa: E501
        """Return a list of kWh consumption values for half-hour periods for a given meter-point and meter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.gas_meter_points_mprn_meters_serial_number_consumption_get_with_http_info(mprn, serial_number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str mprn: The gas meter-point’s MPRN (required)
        :param str serial_number: The meter's serial number (required)
        :param str period_from: Show consumption from the given datetime (inclusive). This parameter can be provided on its own
        :param str period_to: Show consumption to the given datetime (exclusive). This parameter also requires providing the period_from parameter to create a range
        :param int page_size: Page size of returned results. Default is 100, maximum is 25,000 to give a full year of half-hourly consumption details
        :param str order_by: Ordering of results returned. Default is that results are returned in reverse order from latest available figure.
        :param str group_by: Grouping of consumption. Default is that consumption is returned in half-hour periods.
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mprn', 'serial_number', 'period_from', 'period_to', 'page_size', 'order_by', 'group_by']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gas_meter_points_mprn_meters_serial_number_consumption_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mprn' is set
        if ('mprn' not in params or
                params['mprn'] is None):
            raise ValueError("Missing the required parameter `mprn` when calling `gas_meter_points_mprn_meters_serial_number_consumption_get`")  # noqa: E501
        # verify the required parameter 'serial_number' is set
        if ('serial_number' not in params or
                params['serial_number'] is None):
            raise ValueError("Missing the required parameter `serial_number` when calling `gas_meter_points_mprn_meters_serial_number_consumption_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mprn' in params:
            path_params['mprn'] = params['mprn']  # noqa: E501
        if 'serial_number' in params:
            path_params['serial_number'] = params['serial_number']  # noqa: E501

        query_params = []
        if 'period_from' in params:
            query_params.append(('period_from', params['period_from']))  # noqa: E501
        if 'period_to' in params:
            query_params.append(('period_to', params['period_to']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'group_by' in params:
            query_params.append(('group_by', params['group_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/gas-meter-points/{mprn}/meters/{serial_number}/consumption/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_get(self, **kwargs):  # noqa: E501
        """a list of energy products  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.products_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool is_variable: Show only variable products
        :param bool is_green: Show only green products
        :param bool is_tracker: Show only tracker products
        :param bool is_prepay: Show only pre-pay products
        :param bool is_business: Show only business products
        :param str available_at: Show products available for new agreements on the given datetime
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.products_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.products_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def products_get_with_http_info(self, **kwargs):  # noqa: E501
        """a list of energy products  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.products_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool is_variable: Show only variable products
        :param bool is_green: Show only green products
        :param bool is_tracker: Show only tracker products
        :param bool is_prepay: Show only pre-pay products
        :param bool is_business: Show only business products
        :param str available_at: Show products available for new agreements on the given datetime
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['is_variable', 'is_green', 'is_tracker', 'is_prepay', 'is_business', 'available_at']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'is_variable' in params:
            query_params.append(('is_variable', params['is_variable']))  # noqa: E501
        if 'is_green' in params:
            query_params.append(('is_green', params['is_green']))  # noqa: E501
        if 'is_tracker' in params:
            query_params.append(('is_tracker', params['is_tracker']))  # noqa: E501
        if 'is_prepay' in params:
            query_params.append(('is_prepay', params['is_prepay']))  # noqa: E501
        if 'is_business' in params:
            query_params.append(('is_business', params['is_business']))  # noqa: E501
        if 'available_at' in params:
            query_params.append(('available_at', params['available_at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_product_code_electricity_tariffs_tariff_code_day_unit_rates_get(self, product_code, tariff_code, **kwargs):  # noqa: E501
        """a list of unit rates and standing charges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.products_product_code_electricity_tariffs_tariff_code_day_unit_rates_get(product_code, tariff_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_code: The code of the product to be retrieved, for example VAR-17-01-11 (required)
        :param str tariff_code: The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.products_product_code_electricity_tariffs_tariff_code_day_unit_rates_get_with_http_info(product_code, tariff_code, **kwargs)  # noqa: E501
        else:
            (data) = self.products_product_code_electricity_tariffs_tariff_code_day_unit_rates_get_with_http_info(product_code, tariff_code, **kwargs)  # noqa: E501
            return data

    def products_product_code_electricity_tariffs_tariff_code_day_unit_rates_get_with_http_info(self, product_code, tariff_code, **kwargs):  # noqa: E501
        """a list of unit rates and standing charges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.products_product_code_electricity_tariffs_tariff_code_day_unit_rates_get_with_http_info(product_code, tariff_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_code: The code of the product to be retrieved, for example VAR-17-01-11 (required)
        :param str tariff_code: The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_code', 'tariff_code']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_product_code_electricity_tariffs_tariff_code_day_unit_rates_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_code' is set
        if ('product_code' not in params or
                params['product_code'] is None):
            raise ValueError("Missing the required parameter `product_code` when calling `products_product_code_electricity_tariffs_tariff_code_day_unit_rates_get`")  # noqa: E501
        # verify the required parameter 'tariff_code' is set
        if ('tariff_code' not in params or
                params['tariff_code'] is None):
            raise ValueError("Missing the required parameter `tariff_code` when calling `products_product_code_electricity_tariffs_tariff_code_day_unit_rates_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_code' in params:
            path_params['product_code'] = params['product_code']  # noqa: E501
        if 'tariff_code' in params:
            path_params['tariff_code'] = params['tariff_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/{product_code}/electricity-tariffs/{tariff_code}/day-unit-rates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_product_code_electricity_tariffs_tariff_code_night_unit_rates_get(self, product_code, tariff_code, **kwargs):  # noqa: E501
        """a list of unit rates and standing charges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.products_product_code_electricity_tariffs_tariff_code_night_unit_rates_get(product_code, tariff_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_code: The code of the product to be retrieved, for example VAR-17-01-11 (required)
        :param str tariff_code: The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.products_product_code_electricity_tariffs_tariff_code_night_unit_rates_get_with_http_info(product_code, tariff_code, **kwargs)  # noqa: E501
        else:
            (data) = self.products_product_code_electricity_tariffs_tariff_code_night_unit_rates_get_with_http_info(product_code, tariff_code, **kwargs)  # noqa: E501
            return data

    def products_product_code_electricity_tariffs_tariff_code_night_unit_rates_get_with_http_info(self, product_code, tariff_code, **kwargs):  # noqa: E501
        """a list of unit rates and standing charges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.products_product_code_electricity_tariffs_tariff_code_night_unit_rates_get_with_http_info(product_code, tariff_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_code: The code of the product to be retrieved, for example VAR-17-01-11 (required)
        :param str tariff_code: The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_code', 'tariff_code']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_product_code_electricity_tariffs_tariff_code_night_unit_rates_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_code' is set
        if ('product_code' not in params or
                params['product_code'] is None):
            raise ValueError("Missing the required parameter `product_code` when calling `products_product_code_electricity_tariffs_tariff_code_night_unit_rates_get`")  # noqa: E501
        # verify the required parameter 'tariff_code' is set
        if ('tariff_code' not in params or
                params['tariff_code'] is None):
            raise ValueError("Missing the required parameter `tariff_code` when calling `products_product_code_electricity_tariffs_tariff_code_night_unit_rates_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_code' in params:
            path_params['product_code'] = params['product_code']  # noqa: E501
        if 'tariff_code' in params:
            path_params['tariff_code'] = params['tariff_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/{product_code}/electricity-tariffs/{tariff_code}/night-unit-rates/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_product_code_electricity_tariffs_tariff_code_standard_unit_rates_get(self, product_code, tariff_code, **kwargs):  # noqa: E501
        """a list of unit rates and standing charges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.products_product_code_electricity_tariffs_tariff_code_standard_unit_rates_get(product_code, tariff_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_code: The code of the product to be retrieved, for example VAR-17-01-11 (required)
        :param str tariff_code: The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.products_product_code_electricity_tariffs_tariff_code_standard_unit_rates_get_with_http_info(product_code, tariff_code, **kwargs)  # noqa: E501
        else:
            (data) = self.products_product_code_electricity_tariffs_tariff_code_standard_unit_rates_get_with_http_info(product_code, tariff_code, **kwargs)  # noqa: E501
            return data

    def products_product_code_electricity_tariffs_tariff_code_standard_unit_rates_get_with_http_info(self, product_code, tariff_code, **kwargs):  # noqa: E501
        """a list of unit rates and standing charges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.products_product_code_electricity_tariffs_tariff_code_standard_unit_rates_get_with_http_info(product_code, tariff_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_code: The code of the product to be retrieved, for example VAR-17-01-11 (required)
        :param str tariff_code: The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_code', 'tariff_code']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_product_code_electricity_tariffs_tariff_code_standard_unit_rates_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_code' is set
        if ('product_code' not in params or
                params['product_code'] is None):
            raise ValueError("Missing the required parameter `product_code` when calling `products_product_code_electricity_tariffs_tariff_code_standard_unit_rates_get`")  # noqa: E501
        # verify the required parameter 'tariff_code' is set
        if ('tariff_code' not in params or
                params['tariff_code'] is None):
            raise ValueError("Missing the required parameter `tariff_code` when calling `products_product_code_electricity_tariffs_tariff_code_standard_unit_rates_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_code' in params:
            path_params['product_code'] = params['product_code']  # noqa: E501
        if 'tariff_code' in params:
            path_params['tariff_code'] = params['tariff_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/{product_code}/electricity-tariffs/{tariff_code}/standard-unit-rates/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_product_code_electricity_tariffs_tariff_code_standing_charges_get(self, product_code, tariff_code, **kwargs):  # noqa: E501
        """a list of unit rates and standing charges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.products_product_code_electricity_tariffs_tariff_code_standing_charges_get(product_code, tariff_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_code: The code of the product to be retrieved, for example VAR-17-01-11 (required)
        :param str tariff_code: The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.products_product_code_electricity_tariffs_tariff_code_standing_charges_get_with_http_info(product_code, tariff_code, **kwargs)  # noqa: E501
        else:
            (data) = self.products_product_code_electricity_tariffs_tariff_code_standing_charges_get_with_http_info(product_code, tariff_code, **kwargs)  # noqa: E501
            return data

    def products_product_code_electricity_tariffs_tariff_code_standing_charges_get_with_http_info(self, product_code, tariff_code, **kwargs):  # noqa: E501
        """a list of unit rates and standing charges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.products_product_code_electricity_tariffs_tariff_code_standing_charges_get_with_http_info(product_code, tariff_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_code: The code of the product to be retrieved, for example VAR-17-01-11 (required)
        :param str tariff_code: The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_code', 'tariff_code']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_product_code_electricity_tariffs_tariff_code_standing_charges_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_code' is set
        if ('product_code' not in params or
                params['product_code'] is None):
            raise ValueError("Missing the required parameter `product_code` when calling `products_product_code_electricity_tariffs_tariff_code_standing_charges_get`")  # noqa: E501
        # verify the required parameter 'tariff_code' is set
        if ('tariff_code' not in params or
                params['tariff_code'] is None):
            raise ValueError("Missing the required parameter `tariff_code` when calling `products_product_code_electricity_tariffs_tariff_code_standing_charges_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_code' in params:
            path_params['product_code'] = params['product_code']  # noqa: E501
        if 'tariff_code' in params:
            path_params['tariff_code'] = params['tariff_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/{product_code}/electricity-tariffs/{tariff_code}/standing-charges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_product_code_gas_tariffs_tariff_code_standard_unit_rates_get(self, product_code, tariff_code, **kwargs):  # noqa: E501
        """a list of unit rates and standing charges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.products_product_code_gas_tariffs_tariff_code_standard_unit_rates_get(product_code, tariff_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_code: The code of the product to be retrieved, for example VAR-17-01-11 (required)
        :param str tariff_code: The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.products_product_code_gas_tariffs_tariff_code_standard_unit_rates_get_with_http_info(product_code, tariff_code, **kwargs)  # noqa: E501
        else:
            (data) = self.products_product_code_gas_tariffs_tariff_code_standard_unit_rates_get_with_http_info(product_code, tariff_code, **kwargs)  # noqa: E501
            return data

    def products_product_code_gas_tariffs_tariff_code_standard_unit_rates_get_with_http_info(self, product_code, tariff_code, **kwargs):  # noqa: E501
        """a list of unit rates and standing charges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.products_product_code_gas_tariffs_tariff_code_standard_unit_rates_get_with_http_info(product_code, tariff_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_code: The code of the product to be retrieved, for example VAR-17-01-11 (required)
        :param str tariff_code: The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_code', 'tariff_code']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_product_code_gas_tariffs_tariff_code_standard_unit_rates_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_code' is set
        if ('product_code' not in params or
                params['product_code'] is None):
            raise ValueError("Missing the required parameter `product_code` when calling `products_product_code_gas_tariffs_tariff_code_standard_unit_rates_get`")  # noqa: E501
        # verify the required parameter 'tariff_code' is set
        if ('tariff_code' not in params or
                params['tariff_code'] is None):
            raise ValueError("Missing the required parameter `tariff_code` when calling `products_product_code_gas_tariffs_tariff_code_standard_unit_rates_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_code' in params:
            path_params['product_code'] = params['product_code']  # noqa: E501
        if 'tariff_code' in params:
            path_params['tariff_code'] = params['tariff_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/{product_code}/gas-tariffs/{tariff_code}/standard-unit-rates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_product_code_gas_tariffs_tariff_code_standing_charges_get(self, product_code, tariff_code, **kwargs):  # noqa: E501
        """a list of unit rates and standing charges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.products_product_code_gas_tariffs_tariff_code_standing_charges_get(product_code, tariff_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_code: The code of the product to be retrieved, for example VAR-17-01-11 (required)
        :param str tariff_code: The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.products_product_code_gas_tariffs_tariff_code_standing_charges_get_with_http_info(product_code, tariff_code, **kwargs)  # noqa: E501
        else:
            (data) = self.products_product_code_gas_tariffs_tariff_code_standing_charges_get_with_http_info(product_code, tariff_code, **kwargs)  # noqa: E501
            return data

    def products_product_code_gas_tariffs_tariff_code_standing_charges_get_with_http_info(self, product_code, tariff_code, **kwargs):  # noqa: E501
        """a list of unit rates and standing charges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.products_product_code_gas_tariffs_tariff_code_standing_charges_get_with_http_info(product_code, tariff_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_code: The code of the product to be retrieved, for example VAR-17-01-11 (required)
        :param str tariff_code: The code of the tariff to be retrieved, for example E-1R-VAR-17-01-11-A (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_code', 'tariff_code']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_product_code_gas_tariffs_tariff_code_standing_charges_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_code' is set
        if ('product_code' not in params or
                params['product_code'] is None):
            raise ValueError("Missing the required parameter `product_code` when calling `products_product_code_gas_tariffs_tariff_code_standing_charges_get`")  # noqa: E501
        # verify the required parameter 'tariff_code' is set
        if ('tariff_code' not in params or
                params['tariff_code'] is None):
            raise ValueError("Missing the required parameter `tariff_code` when calling `products_product_code_gas_tariffs_tariff_code_standing_charges_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_code' in params:
            path_params['product_code'] = params['product_code']  # noqa: E501
        if 'tariff_code' in params:
            path_params['tariff_code'] = params['tariff_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/{product_code}/gas-tariffs/{tariff_code}/standing-charges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_product_code_get(self, product_code, **kwargs):  # noqa: E501
        """a list of energy products  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.products_product_code_get(product_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_code: The code of the product to be retrieved, for example VAR-17-01-11 (required)
        :param str tariffs_active_at: The point in time in which to show the active charges. Defaults to current datetime
        :return: DetailedProduct
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.products_product_code_get_with_http_info(product_code, **kwargs)  # noqa: E501
        else:
            (data) = self.products_product_code_get_with_http_info(product_code, **kwargs)  # noqa: E501
            return data

    def products_product_code_get_with_http_info(self, product_code, **kwargs):  # noqa: E501
        """a list of energy products  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.products_product_code_get_with_http_info(product_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_code: The code of the product to be retrieved, for example VAR-17-01-11 (required)
        :param str tariffs_active_at: The point in time in which to show the active charges. Defaults to current datetime
        :return: DetailedProduct
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_code', 'tariffs_active_at']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_product_code_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_code' is set
        if ('product_code' not in params or
                params['product_code'] is None):
            raise ValueError("Missing the required parameter `product_code` when calling `products_product_code_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_code' in params:
            path_params['product_code'] = params['product_code']  # noqa: E501

        query_params = []
        if 'tariffs_active_at' in params:
            query_params.append(('tariffs_active_at', params['tariffs_active_at']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/{product_code}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DetailedProduct',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
