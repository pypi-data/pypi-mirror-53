# coding: utf-8

"""
    Web API Swagger specification

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import os
import sys
import unittest
import warnings

ABSPATH = os.path.abspath(os.path.realpath(os.path.dirname(__file__)) + "/..")
sys.path.append(ABSPATH)
import asposecellscloud
from asposecellscloud.rest import ApiException
from asposecellscloud.apis.cells_api import CellsApi
import AuthUtil
from asposecellscloud.models import Shape


class TestCellsShapesApi(unittest.TestCase):
    """ CellsShapesApi unit test stubs """

    def setUp(self):
        warnings.simplefilter("ignore",ResourceWarning)
        # self.api_client = AuthUtil.GetApiClient()
        self.api = asposecellscloud.apis.cells_api.CellsApi(AuthUtil.GetAPPSID(),AuthUtil.GetAPPKey())

    def tearDown(self):
        pass

    def test_cells_shapes_delete_worksheet_shape(self):
        """
        Test case for cells_shapes_delete_worksheet_shape

        Delete a shape in worksheet
        """
        name ='Book1.xlsx'  
        sheet_name ='Sheet1'    
        shapeindex = 0       
        folder = "Temp"
        AuthUtil.Ready(self.api, name, folder)
        result = self.api.cells_shapes_delete_worksheet_shape(name, sheet_name, shapeindex,folder=folder)
        pass

    def test_cells_shapes_delete_worksheet_shapes(self):
        """
        Test case for cells_shapes_delete_worksheet_shapes

        delete all shapes in worksheet
        """
        name ='Book1.xlsx'  
        sheet_name ='Sheet1'    
        shapeindex = 0       
        folder = "Temp"
        AuthUtil.Ready(self.api, name, folder)
        result = self.api.cells_shapes_delete_worksheet_shapes(name, sheet_name, folder=folder)
        pass

    def test_cells_shapes_get_worksheet_shape(self):
        """
        Test case for cells_shapes_get_worksheet_shape

        Get worksheet shape
        """
        name ='Book1.xlsx'  
        sheet_name ='Sheet1'    
        shapeindex = 0       
        folder = "Temp"
        AuthUtil.Ready(self.api, name, folder)
        result = self.api.cells_shapes_get_worksheet_shape(name, sheet_name, shapeindex,folder=folder)
        pass

    def test_cells_shapes_get_worksheet_shapes(self):
        """
        Test case for cells_shapes_get_worksheet_shapes

        Get worksheet shapes 
        """
        name ='Book1.xlsx'  
        sheet_name ='Sheet1'    
        shapeindex = 0       
        folder = "Temp"
        AuthUtil.Ready(self.api, name, folder)
        result = self.api.cells_shapes_get_worksheet_shapes(name, sheet_name, folder=folder)
        pass

    def test_cells_shapes_post_worksheet_shape(self):
        """
        Test case for cells_shapes_post_worksheet_shape

        Update a shape in worksheet
        """
        name ='Book1.xlsx'  
        sheet_name ='Sheet1'    
        shapeindex = 0   
        dto = Shape()
        dto.lower_right_column = 10
        folder = "Temp"
        AuthUtil.Ready(self.api, name, folder)
        result = self.api.cells_shapes_post_worksheet_shape(name, sheet_name, shapeindex,dto=dto,folder=folder)
        pass

    def test_cells_shapes_put_worksheet_shape(self):
        """
        Test case for cells_shapes_put_worksheet_shape

        Add shape in worksheet
        """
        name ='Book1.xlsx'  
        sheet_name ='Sheet1'    
        drawingType= "button"  
        upperLeftRow=1 
        upperLeftColumn= 1 
        top=10
        left= 10
        width= 100 
        height= 90 
        folder = "Temp"
        AuthUtil.Ready(self.api, name, folder)
        result = self.api.cells_shapes_put_worksheet_shape(name, sheet_name, drawingType,upperLeftRow,upperLeftColumn, top, left, width, height,folder=folder)
        pass


if __name__ == '__main__':
    unittest.main()
