from .prefs import prefs

block_to_code = {
              'motion_movesteps': {'code': '{indent}self.move_steps({steps})\n'},
              'motion_turnright': {'code': '{indent}self.turn_right_degrees({degrees})\n'},
               'motion_turnleft': {'code': '{indent}self.turn_left_degrees({degrees})\n'},
       'motion_pointindirection': {'code': '{indent}self.point_in_direction({direction})\n'},
      'motion_pointtowards_menu': {'code': '{towards}'},
           'motion_pointtowards': {'code': '{indent}self.point_towards({towards})\n'},
              'motion_goto_menu': {'code': '{to}'},
                 'motion_gotoxy': {'code': '{indent}self.go_to_x_y({x}, {y})\n'},
                   'motion_goto': {'code': '{indent}self.go_to({to})\n'},
          'motion_glidesecstoxy': {'code': '{indent}self.glide_seconds_x_y({secs}, {x}, {y})\n'},
           'motion_glideto_menu': {'code': '{to}'},
                'motion_glideto': {'code': '{indent}self.glide_seconds_to({to}, {secs})\n'},
              'motion_changexby': {'code': '{indent}self.change_x_by({dx})\n'},
                   'motion_setx': {'code': '{indent}self.set_x_to({x})\n'},
              'motion_changeyby': {'code': '{indent}self.change_y_by({dy})\n'},
                   'motion_sety': {'code': '{indent}self.set_y_to({y})\n'},
         'motion_ifonedgebounce': {'code': '{indent}self.if_on_edge_bounce()\n'},
       'motion_setrotationstyle': {'code': '{indent}self.set_rotation_style({style})\n'},
              'motion_xposition': {'code': 'self.x()'},
              'motion_yposition': {'code': 'self.y()'},
              'motion_direction': {'code': 'self.direction()'},
           'motion_scroll_right': {'code': '{indent}# motion scroll right\n'},
              'motion_scroll_up': {'code': '{indent}# motion scroll up\n'},
            'motion_align_scene': {'code': '{indent}# motion align scene\n'},
                'motion_xscroll': {'code': ''},
                'motion_yscroll': {'code': ''},
              'looks_sayforsecs': {'code': '{indent}self.say_for_seconds({message}, {secs})\n'},
                     'looks_say': {'code': '{indent}self.say({message})\n'},
            'looks_thinkforsecs': {'code': '{indent}self.think_for_seconds({message}, {secs})\n'},
                   'looks_think': {'code': '{indent}self.think({message})\n'},
                    'looks_show': {'code': '{indent}self.show()\n'},
                    'looks_hide': {'code': '{indent}self.hide()\n'},
          'looks_hideallsprites': {'code': '{indent}\n'},
          'looks_changeeffectby': {'code': '{indent}self.change_look_effect_by({effect}, {change})\n'},
             'looks_seteffectto': {'code': '{indent}self.set_look_effect_to({effect}, {value})\n'},
     'looks_cleargraphiceffects': {'code': '{indent}self.clear_graphic_effects()\n'},
            'looks_changesizeby': {'code': '{indent}self.change_size_by({change})\n'},
               'looks_setsizeto': {'code': '{indent}self.set_size_to({size})\n'},
                    'looks_size': {'code': 'self.size()'},
         'looks_changestretchby': {'code': '{indent}\n'},
            'looks_setstretchto': {'code': '{indent}\n'},
                 'looks_costume': {'code': '{costume}'},
         'looks_switchcostumeto': {'code': '{indent}self.switch_costume_to({costume})\n'},
             'looks_nextcostume': {'code': '{indent}self.next_costume()\n'},
        'looks_switchbackdropto': {'code': '{indent}{project}.switch_backdrop_to()\n'},
               'looks_backdrops': {'code': '{backdrop}'},
           'looks_gotofrontback': {'code': '{indent}self.go_to_{front_back}_layer()\n'},
 'looks_goforwardbackwardlayers': {'code': '{indent}self.go_{forward_backward}_layers({num})\n'},
      'looks_backdropnumbername': {'code': ''},
       'looks_costumenumbername': {'code': 'self.costume_{number_name}()'},
 'looks_switchbackdroptoandwait': {'code': '{indent}\n'},
            'looks_nextbackdrop': {'code': '{indent}{project}.next_backdrop()\n'},
             'sound_sounds_menu': {'code': '{sound_menu}'},
                    'sound_play': {'code': '{indent}self.play_sound({sound_menu})\n'},
           'sound_playuntildone': {'code': '{indent}self.play_sound_until_done({sound_menu})\n'},
           'sound_stopallsounds': {'code': '{indent}{project}.stop_all_sounds()\n'},
             'sound_seteffectto': {'code': '{indent}self.set_sound_effect_to({effect}, {value})\n'},
          'sound_changeeffectby': {'code': '{indent}self.change_sound_effect_by({effect}, {value})\n'},
            'sound_cleareffects': {'code': '{indent}self.clear_sound_effects()\n'},
          'sound_changevolumeby': {'code': '{indent}self.change_volume_by({volume})\n'},
             'sound_setvolumeto': {'code': '{indent}self.set_volume_to({volume})\n'},
                  'sound_volume': {'code': 'self.volume()'},
      'event_whentouchingobject': {'code': 'self.touching()'},
      'event_touchingobjectmenu': {'code': ''},
         'event_whenflagclicked': {'code': '{indent}def {green_flag_method_prefix}{current_method_count}(self):\n',                      'event': '{indent}{project}.events.add_green_flag_event(self.{green_flag_method_prefix}{current_method_count})\n'},
   'event_whenthisspriteclicked': {'code': '{indent}def {sprite_clicked_method_prefix}{current_method_count}(self):\n',                  'event': '{indent}{project}.events.add_sprite_clicked_event({sprite_variable_name}, self.{sprite_clicked_method_prefix}{current_method_count})\n'},
        'event_whenstageclicked': {'code': '{indent}'},
   'event_whenbroadcastreceived': {'code': '{indent}def {receive_broadcast_method_prefix}{current_method_count}\n',                      'event': '{indent}{project}.events.add_receive_broadcast_event({broadcast_option}, self.{receive_broadcast_method_prefix}{current_method_count})\n'},
  'event_whenbackdropswitchesto': {'code': '{indent}def {backdrop_switches_to_method_prefix}{current_method_count}(self):\n',            'event': '{indent}{project}.events.add_backdrop_switches_to_event({backdrop}, self.{backdrop_switches_to_method_prefix}{current_method_count})\n'},
         'event_whengreaterthan': {'code': '{indent}def {whengreaterthanmenu}{more_than_method_prefix}{current_method_count}(self):\n',  'event': '{indent}{project}.events.add_{whengreaterthanmenu}_more_than_event({value}, self.{whengreaterthanmenu}{more_than_method_prefix}{current_method_count})\n'},
          'event_broadcast_menu': {'code': ''},
               'event_broadcast': {'code': '{indent}{project}.events.send_receive_broadcast_event({broadcast_input})\n'},
        'event_broadcastandwait': {'code': '{indent}{project}.events.send_receive_broadcast_event_and_wait({broadcast_input})\n'},
          'event_whenkeypressed': {'code': '{indent}def {key_pressed_method_prefix}{current_method_count}(self):\n'},                     'event': '{indent}{project}.events.add_key_pressed_event({key_option}, self.{key_pressed_method_prefix}{current_method_count})\n',
               'control_forever': {'code': '{indent}while True:\n{substack}'},
                'control_repeat': {'code': '{indent}for i in range({times}):\n{substack}{extra_indent}{project}.wait()\n'},
                    'control_if': {'code': '{indent}if {condition}:\n{substack}'},
               'control_if_else': {'code': '{indent}if {condition}:\n{substack}{indent}else:\n{substack2}'},
                  'control_stop': {'code': '{indent}'},
                  'control_wait': {'code': '{indent}{project}.wait({duration})\n'},
            'control_wait_until': {'code': '{indent}while not {condition}:\n{extra_indent}{project}.wait()\n'},
          'control_repeat_until': {'code': '{indent}while not {condition}:\n{substack}{extra_indent}{project}.wait()\n'},
                 'control_while': {'code': '{indent}\n'},
              'control_for_each': {'code': '{indent}\n'},
        'control_start_as_clone': {'code': '{indent}{clone_method_name}(self):\n'}, # event
  'control_create_clone_of_menu': {'code': '{clone_option}'},
       'control_create_clone_of': {'code': '{indent}{sprite_variable_prefix}{clone_option}.clone()\n'},
     'control_delete_this_clone': {'code': '{indent}self.delete()\n'},
           'control_get_counter': {'code': ''},
          'control_incr_counter': {'code': '{indent}# increase counter\n'},
         'control_clear_counter': {'code': '{indent}# clear counter\n'},
           'control_all_at_once': {'code': ''},
        'sensing_touchingobject': {'code': 'self.touching({touchingobjectmenu})'},
    'sensing_touchingobjectmenu': {'code': '{touchingobjectmenu}'},
         'sensing_touchingcolor': {'code': 'self.touching_{col_option}({color})'},
  'sensing_coloristouchingcolor': {'code': 'self.{col_option}_is_touching_{col_option}({color}, {color2})'},
            'sensing_distanceto': {'code': 'self.distance_to({distancetomenu})'},
        'sensing_distancetomenu': {'code': '{distancetomenu}'},
            'sensing_askandwait': {'code': '{indent}self.ask_and_wait({question})\n'},
                'sensing_answer': {'code': 'self.answer()'},
            'sensing_keypressed': {'code': '{project}.sensing.key_pressed({key_option})'},
            'sensing_keyoptions': {'code': '{key_option}'},
             'sensing_mousedown': {'code': '{project}.sensing.mouse_down()'},
                'sensing_mousex': {'code': '{project}.sensing.mouse_x()'},
                'sensing_mousey': {'code': '{project}.sensing.mouse_y()'},
           'sensing_setdragmode': {'code': '{indent}self.set_drag_mode({drag_mode})\n'},
              'sensing_loudness': {'code': 'self.loudness()'},
                  'sensing_loud': {'code': ''},
                 'sensing_timer': {'code': '{project}.time.timer()'},
            'sensing_resettimer': {'code': '{indent}{project}.time.reset_timer()\n'},
        'sensing_of_object_menu': {'code': '{object}'},
                    'sensing_of': {'code': '{object}.{property}()'}, # convert property to method
               'sensing_current': {'code': '{project}.time.{current}()'},
         'sensing_dayssince2000': {'code': '{project}.time.days_since_2000()'},
              'sensing_username': {'code': '{project}.username()'},
                'sensing_userid': {'code': ''},
                  'operator_add': {'code': '{project}.math.add({num1}, {num2})'},
             'operator_subtract': {'code': '{project}.math.sub({num1}, {num2})'},
             'operator_multiply': {'code': '{project}.math.mul({num1}, {num2})'},
               'operator_divide': {'code': '{project}.math.div({num1}, {num2})'},
               'operator_random': {'code': '{project}.math.pick_random_to({from}, {to})'},
                   'operator_lt': {'code': '{project}.math.lt({operand1}, {operand2})'},
               'operator_equals': {'code': '{project}.math.eq({operand1}, {operand2})'},
                   'operator_gt': {'code': '{project}.math.gt({operand1}, {operand2})'},
                  'operator_and': {'code': '{operand1} and {operand2}'},
                   'operator_or': {'code': '{operand1} or {operand2}'},
                  'operator_not': {'code': 'not {operand}'},
                 'operator_join': {'code': '{project}.math.join({string1}, {string2})'},
            'operator_letter_of': {'code': '{project}.math.letter({letter}, {string})'},
               'operator_length': {'code': '{project}.math.len({string})'},
             'operator_contains': {'code': '{project}.math.contains({string1}, {string2})'},
                  'operator_mod': {'code': '{project}.math.mod({num1}, {num2})'},
                'operator_round': {'code': '{project}.math.round({num})'},
               'operator_mathop': {'code': '{project}.math.{operator}({num})'},
                 'data_variable': {'code' :'{}.{attribute_variable_prefix}{variable}'}, # add object reference
            'data_setvariableto': {'code' :'{indent}{}.{attribute_variable_prefix}{variable} = {value}\n'}, # add object reference
         'data_changevariableby': {'code' :'{indent}{}.{attribute_variable_prefix}{variable} += {value}\n'}, # add object reference
             'data_showvariable': {'code': '{indent}# show variable\n'},
             'data_hidevariable': {'code': '{indent}# hide variable\n'},
             'data_listcontents': {'code' :'*{}.{attribute_variable_prefix}{list}'}, # add object reference
             'data_listindexall': {'code': ''}, # not sure what does
          'data_listindexrandom': {'code': ''},
                'data_addtolist': {'code': '{indent}{}.{attribute_variable_prefix}{list}.append(item)\n'}, # add object reference
             'data_deleteoflist': {'code' :'{indent}del {}.{attribute_variable_prefix}{list}[{index}-1]\n'},
          'data_deletealloflist': {'code' :'{indent}{}.{attribute_variable_prefix}{list} = []\n'}, # add object reference
             'data_insertatlist': {'code' :'{indent}{}.{attribute_variable_prefix}{list}.insert({index}-1, {item})\n'}, # add object reference
        'data_replaceitemoflist': {'code' :'{indent}{}.{attribute_variable_prefix}{list}[{index}-1] = {item}\n'}, # add object reference
               'data_itemoflist': {'code' :'{}.{attribute_variable_prefix}{list}[{index}-1]'}, # add object reference
            'data_itemnumoflist': {'code' :'{indent}{}.{attribute_variable_prefix}{list}.index({item})\n'}, # add object reference
             'data_lengthoflist': {'code' :'len({}.{attribute_variable_prefix}{list})'}, # add object reference
         'data_listcontainsitem': {'code' :'{item} in {}.{attribute_variable_prefix}{list}'}, # add object reference
                 'data_showlist': {'code': '{indent}# show list\n'},
                 'data_hidelist': {'code': '{indent}# hide list\n'}
}