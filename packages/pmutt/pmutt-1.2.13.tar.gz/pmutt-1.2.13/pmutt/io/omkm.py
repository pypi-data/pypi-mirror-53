import datetime
from pmutt import _force_pass_arguments
from pmutt.io.cantera import obj_to_CTI
from pmutt.omkm.units import Units

def write_cti(phases=None, species=None, reactions=None,
              lateral_interactions=None, units=None, filename='input.cti',
              T=300., P=1., newline='\n', use_motz_wise=False):
    """Writes the units, phases, species, lateral interactions, reactions and 
    additional options in the CTI format for OpenMKM
    
    Parameters
    ----------
        phases : list of :class:`~pmutt.omkm.phase.Phase` objects
            Phases to write in CTI file. The species should already be assigned.
        species : list of :class:`~pmutt.empirical.nasa.Nasa`, :class:`~pmutt.empirical.nasa.Nasa9` or :class:`~pmutt.empirical.shomate.Shomate`
            Species to write in CTI file.
        reactions : list of :class:`~pmutt.omkm.reaction.SurfaceReaction`
            Reactions to write in CTI file.
        lateral_interactions : list of :class:`~pmutt.mixture.cov.PiecewiseCovEffect` objects, optional
            Lateral interactions to include in CTI file. Default is None.
        units : dict or :class:`~pmutt.omkm.units.Unit` object, optional
            Units to write file. If a dict is inputted, the key is the quantity and
            the value is the unit. If not specified, uses the default units of
            :class:`~pmutt.omkm.units.Unit`
        filename: str, optional
            Filename for the input.cti file. Default is 'input.cti'
        T : float, optional
            Temperature in K. Default is 300 K.
        P : float, optional
            Pressure in atm. Default is 1 atm.
    """
    lines = ['# File generated by pmutt on {}'.format(datetime.datetime.now())]

    '''Write units'''
    lines.extend(['', '#' + '-'*80, '# UNITS', '#' + '-'*80])
    if units is None:
        units = Units()
    elif isinstance(units, dict):
        units = Units(**units)
    # units_dict = units.to_CTI_dict()
    lines.append(units.to_CTI())

    '''Write phases'''
    if phases is not None:
        lines.extend(['', '#' + '-'*80, '# PHASES', '#' + '-'*80])
        for phase in phases:
            phase_CTI = _force_pass_arguments(phase.to_CTI, units=units)
            lines.append(phase_CTI)

    '''Write species'''
    if species is not None:
        lines.extend(['', '#' + '-'*80, '# SPECIES', '#' + '-'*80])
        for ind_species in species:
            lines.append(ind_species.to_CTI())

    '''Write lateral interactions'''
    if lateral_interactions is not None:
        lines.extend(['', '#' + '-'*80, '# LATERAL INTERACTIONS', '#' + '-'*80])
        if lateral_interactions is not None:
            for lat_interaction in lateral_interactions:
                lat_inter_CTI = _force_pass_arguments(lat_interaction.to_CTI,
                                                      units=units)
                lines.append(lat_inter_CTI)

    if reactions is not None:
        '''Write reaction options'''
        lines.extend(['', '#' + '-'*80, '# REACTION OPTIONS', '#' + '-'*80])
        if use_motz_wise:
            lines.extend(['enable_motz_wise()\n'])
        else:
            lines.extend(['disable_motz_wise()\n'])

        '''Write reactions'''
        lines.extend(['', '#' + '-'*80, '# REACTIONS', '#' + '-'*80])
        for reaction in reactions:
            reaction_CTI = _force_pass_arguments(reaction.to_CTI, units=units)
            lines.append(reaction_CTI)
    
    '''Write to file'''
    with open(filename, 'w', newline=newline) as f_ptr:
        f_ptr.write('\n'.join(lines))