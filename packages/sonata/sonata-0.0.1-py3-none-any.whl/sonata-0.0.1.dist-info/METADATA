Metadata-Version: 2.1
Name: sonata
Version: 0.0.1
Summary: SONATA Data Format API
Home-page: https://github.com/AllenInstitute/sonata
License: UNKNOWN
Keywords: neuroscience,scientific,modeling,networks,simulation
Platform: any
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: BSD License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3.6
Classifier: Topic :: Scientific/Engineering :: Medical Science Apps.
Classifier: Topic :: Scientific/Engineering :: Bio-Informatics
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Description-Content-Type: text/markdown
Requires-Dist: jsonschema
Requires-Dist: pandas
Requires-Dist: numpy
Requires-Dist: six
Requires-Dist: h5py

# pySONATA

A python library for the SONATA data format

## Installation

```bash
$ python setup.py install

```
*More to come*


## Reading Configuration files
You can parse and validate a config json file using the from_json function in config.py. It will take care of manifest variables, combine links to other parts of the config (simulation.json, circuit.json) and return a completed json in python dictionary.
```python
from config import from_json
cfg = from_json('path/to/config.json')
print(cfg['run']['tstart'])

```
Note:
* You can also pass in a [jsonschema IValidator object](http://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.IValidator) which will check if the json file follows the schema. The AIBS BMTK uses our own custom validators, and if desired I can add the code to this repo.


## Reading in Data Files (Nodes and Edges)

* [pySONATA Tutorial](docs/Tutorial%20-%20pySONATA.ipynb)


