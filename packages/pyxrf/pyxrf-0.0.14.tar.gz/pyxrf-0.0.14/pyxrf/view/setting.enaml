from __future__ import absolute_import

from enaml.widgets.api import (Container, PushButton, Label,
                               Form, Field, FileDialogEx, DockItem,
                               DockArea, CheckBox, ComboBox, SpinBox,
                               ScrollArea, Window, PopupView, GroupBox)
from enaml.layout.api import hbox, vbox, HSplitLayout, VSplitLayout, spacer, grid
from enaml.core.api import Include, Looper
from enaml.layout.geometry import Box
from enaml.stdlib.fields import FloatField
from enaml.stdlib.message_box import MessageBox, warning, information

import numpy as np

enamldef SettingView(DockItem):
    attr io_model
    attr plot_model
    attr img_model_adv
    attr img_model_rgb
    attr setting_model

    Container:
        Container:
            constraints = [
                vbox(
                    hbox(setup_lbl, spacer, use_default),
                    hbox(element_fd),
                    scroller,
                    hbox(prefix_lbl, prefix_fd, spacer, calculate_btn),
                ),
                #folder_btn.width == files_btn.width,
            ]
            Label: setup_lbl:
                text = 'ROI Setup: enter elements below, e.g., Fe_K, Gd_L'
            PushButton: use_default:
                text = 'Use default elements'
                clicked ::
                    setting_model.use_default_elements()
            Field: element_fd:
                text := setting_model.element_for_roi
            Label: prefix_lbl:
                text = 'Prefix'
            Field: prefix_fd:
                text := setting_model.prefix_name_roi
                submit_triggers = ['auto_sync']
            PushButton: calculate_btn:
                text = 'Calculate ROI'
                clicked ::
                    if len(setting_model.element_for_roi) == 0:
                        warning(self, 'Warning Dialog', 'Please enter element first.')
                    elif len(setting_model.prefix_name_roi) == 0:
                        warning(self, 'Warning Dialog', 'Please enter prefix name first.')
                    else:
                        #box = MessageBox()
                        #box.title = 'Warning Message'
                        #box.text = 'please enter prefix name first.'
                        #box.exec_()
                        roi_result = setting_model.get_roi_sum()
                        img_model_adv.data_dict.update(roi_result)
                        img_model_rgb.data_dict.update(roi_result)

                        # visualization purposes
                        img_model_adv.data_dict_keys = []
                        img_model_adv.data_dict_keys = img_model_adv.data_dict.keys()
                        img_model_rgb.data_dict_keys = []
                        img_model_rgb.data_dict_keys = img_model_rgb.data_dict.keys()

                        #img_model_adv.set_initial_stat()

            ScrollArea: scroller:
                #Form:
                Container:
                    Looper: looper:
                        iterable << setting_model.element_list_roi
                        GroupBox:
                        #Container:
                            constraints = [vbox(hbox(mean_lb, roi_lb, left_v, right_v, spacer),
                                                hbox(view_btn, default_btn, spacer))]
                            title = '{}a1, in [eV]'.format(loop_item)
                            #title_align = 'center'
                            padding = Box(10, 10, 10, 10)
                            #Form:
                            #row_spacing=0
                            #Label: name_lb:
                            #    text = 'Element line: {}'.format(loop_item)
                            Label: mean_lb:
                                text = 'Energy: {},'.format(str(setting_model.roi_dict[loop_item].line_val))
                                #maximum_size = 140
                            Label: roi_lb:
                                text = 'ROI : '
                                #maximum_size = 80
                            SpinBox: left_v:
                                value := setting_model.roi_dict[loop_item].left_val
                                single_step = setting_model.roi_dict[loop_item].step
                                #maximum_size = 140
                                minimum = 0
                                maximum = 100000
                            SpinBox: right_v:
                                value := setting_model.roi_dict[loop_item].right_val
                                single_step = setting_model.roi_dict[loop_item].step
                                #maximum_size = 140
                                minimum = 0
                                maximum = 100000
                            PushButton: view_btn:
                                text = 'Add Plot'
                                #maximum_size = 100
                                checkable = True
                                checked := setting_model.roi_dict[loop_item].show_plot
                                clicked ::
                                    plot_model.roi_dict = setting_model.roi_dict
                                    if checked:
                                        plot_model.roi_dict[loop_item].show_plot = True
                                        #plot_model.roi_dict = setting_model.roi_dict
                                        plot_model.plot_roi_bound()
                                        view_btn.text = 'Remove'
                                    else:
                                        plot_model.roi_dict[loop_item].show_plot = False
                                        #plot_model.roi_dict = setting_model.roi_dict
                                        plot_model.plot_roi_bound()
                                        view_btn.text = 'Add Plot'
                            PushButton: default_btn:
                                text = 'Use Default'
                                clicked ::
                                    plot_model.roi_dict[loop_item].left_val = plot_model.roi_dict[loop_item].default_left
                                    plot_model.roi_dict[loop_item].right_val = plot_model.roi_dict[loop_item].default_right
