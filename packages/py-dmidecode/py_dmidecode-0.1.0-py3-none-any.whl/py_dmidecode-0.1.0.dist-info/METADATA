Metadata-Version: 2.1
Name: py-dmidecode
Version: 0.1.0
Summary: python lib that parse the output of dmidecode 
Home-page: https://github.com/zaibon/py-dmidecode
Author: Christophe de Carvalho
License: UNKNOWN
Project-URL: Bug Reports, https://github.com/zaibon/py-dmidecode/issues
Project-URL: Source, https://github.com/zaibon/py-dmidecode/
Keywords: system development
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Description-Content-Type: text/markdown

# py-dmidecode

Small tool that parses ouput of dmidecode command

## How to use
```python
from dmidecode import DMIDecode
import subprocess

# create parsing instance by passing dmidecode output
dmi = DMIDecode()

# some of the pre-defined queries
print('Manufacturer:\t', dmi.manufacturer())
print('Model:\t\t', dmi.model())
print('Firmware:\t', dmi.firmware())
print('Serial number:\t', dmi.serial_number())
print('Processor type:\t', dmi.cpu_type())
print('Number of CPUs:\t', dmi.cpu_num())
print('Cores count:\t', dmi.total_enabled_cores())
print('Total RAM:\t{} GB'.format(dmi.total_ram()))
```

Alternatively instead of running dmidecode locally you can use DMIParse by passing dmidecode output as an argument:
```python
from dmidecode import DMIParse
dmi = DMIParse(raw)
```

Other information can be easily retrieved by analyzing dmi.data and module code.

## Possible limitations
Tested with dmidecode versions 2.11, 2.12 and 3.2


