# coding: utf-8

"""
    Pulp 3 API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DebPublication(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'href': 'str',
        'created': 'datetime',
        'type': 'str',
        'publisher': 'str',
        'repository_version': 'str',
        'repository': 'str',
        'simple': 'bool',
        'structured': 'bool'
    }

    attribute_map = {
        'href': '_href',
        'created': '_created',
        'type': '_type',
        'publisher': 'publisher',
        'repository_version': 'repository_version',
        'repository': 'repository',
        'simple': 'simple',
        'structured': 'structured'
    }

    def __init__(self, href=None, created=None, type=None, publisher=None, repository_version=None, repository=None, simple=False, structured=False):  # noqa: E501
        """DebPublication - a model defined in OpenAPI"""  # noqa: E501

        self._href = None
        self._created = None
        self._type = None
        self._publisher = None
        self._repository_version = None
        self._repository = None
        self._simple = None
        self._structured = None
        self.discriminator = None

        if href is not None:
            self.href = href
        if created is not None:
            self.created = created
        if type is not None:
            self.type = type
        self.publisher = publisher
        if repository_version is not None:
            self.repository_version = repository_version
        if repository is not None:
            self.repository = repository
        if simple is not None:
            self.simple = simple
        if structured is not None:
            self.structured = structured

    @property
    def href(self):
        """Gets the href of this DebPublication.  # noqa: E501


        :return: The href of this DebPublication.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this DebPublication.


        :param href: The href of this DebPublication.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def created(self):
        """Gets the created of this DebPublication.  # noqa: E501

        Timestamp of creation.  # noqa: E501

        :return: The created of this DebPublication.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DebPublication.

        Timestamp of creation.  # noqa: E501

        :param created: The created of this DebPublication.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def type(self):
        """Gets the type of this DebPublication.  # noqa: E501


        :return: The type of this DebPublication.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DebPublication.


        :param type: The type of this DebPublication.  # noqa: E501
        :type: str
        """
        if type is not None and len(type) < 1:
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")  # noqa: E501

        self._type = type

    @property
    def publisher(self):
        """Gets the publisher of this DebPublication.  # noqa: E501


        :return: The publisher of this DebPublication.  # noqa: E501
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this DebPublication.


        :param publisher: The publisher of this DebPublication.  # noqa: E501
        :type: str
        """

        self._publisher = publisher

    @property
    def repository_version(self):
        """Gets the repository_version of this DebPublication.  # noqa: E501


        :return: The repository_version of this DebPublication.  # noqa: E501
        :rtype: str
        """
        return self._repository_version

    @repository_version.setter
    def repository_version(self, repository_version):
        """Sets the repository_version of this DebPublication.


        :param repository_version: The repository_version of this DebPublication.  # noqa: E501
        :type: str
        """

        self._repository_version = repository_version

    @property
    def repository(self):
        """Gets the repository of this DebPublication.  # noqa: E501

        A URI of the repository to be published.  # noqa: E501

        :return: The repository of this DebPublication.  # noqa: E501
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this DebPublication.

        A URI of the repository to be published.  # noqa: E501

        :param repository: The repository of this DebPublication.  # noqa: E501
        :type: str
        """

        self._repository = repository

    @property
    def simple(self):
        """Gets the simple of this DebPublication.  # noqa: E501

        Activate simple publishing mode (all packages in one release component).  # noqa: E501

        :return: The simple of this DebPublication.  # noqa: E501
        :rtype: bool
        """
        return self._simple

    @simple.setter
    def simple(self, simple):
        """Sets the simple of this DebPublication.

        Activate simple publishing mode (all packages in one release component).  # noqa: E501

        :param simple: The simple of this DebPublication.  # noqa: E501
        :type: bool
        """

        self._simple = simple

    @property
    def structured(self):
        """Gets the structured of this DebPublication.  # noqa: E501

        Activate structured publishing mode.  # noqa: E501

        :return: The structured of this DebPublication.  # noqa: E501
        :rtype: bool
        """
        return self._structured

    @structured.setter
    def structured(self, structured):
        """Sets the structured of this DebPublication.

        Activate structured publishing mode.  # noqa: E501

        :param structured: The structured of this DebPublication.  # noqa: E501
        :type: bool
        """

        self._structured = structured

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebPublication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
