# coding: utf-8

"""
    Pulp 3 API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ModulemdDefaults(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'module': 'str',
        'stream': 'str',
        'profiles': 'str'
    }

    attribute_map = {
        'module': 'module',
        'stream': 'stream',
        'profiles': 'profiles'
    }

    def __init__(self, module=None, stream=None, profiles=None):  # noqa: E501
        """ModulemdDefaults - a model defined in OpenAPI"""  # noqa: E501

        self._module = None
        self._stream = None
        self._profiles = None
        self.discriminator = None

        self.module = module
        self.stream = stream
        self.profiles = profiles

    @property
    def module(self):
        """Gets the module of this ModulemdDefaults.  # noqa: E501

        Modulemd name.  # noqa: E501

        :return: The module of this ModulemdDefaults.  # noqa: E501
        :rtype: str
        """
        return self._module

    @module.setter
    def module(self, module):
        """Sets the module of this ModulemdDefaults.

        Modulemd name.  # noqa: E501

        :param module: The module of this ModulemdDefaults.  # noqa: E501
        :type: str
        """
        if module is None:
            raise ValueError("Invalid value for `module`, must not be `None`")  # noqa: E501
        if module is not None and len(module) < 1:
            raise ValueError("Invalid value for `module`, length must be greater than or equal to `1`")  # noqa: E501

        self._module = module

    @property
    def stream(self):
        """Gets the stream of this ModulemdDefaults.  # noqa: E501

        Modulemd default stream.  # noqa: E501

        :return: The stream of this ModulemdDefaults.  # noqa: E501
        :rtype: str
        """
        return self._stream

    @stream.setter
    def stream(self, stream):
        """Sets the stream of this ModulemdDefaults.

        Modulemd default stream.  # noqa: E501

        :param stream: The stream of this ModulemdDefaults.  # noqa: E501
        :type: str
        """
        if stream is None:
            raise ValueError("Invalid value for `stream`, must not be `None`")  # noqa: E501
        if stream is not None and len(stream) < 1:
            raise ValueError("Invalid value for `stream`, length must be greater than or equal to `1`")  # noqa: E501

        self._stream = stream

    @property
    def profiles(self):
        """Gets the profiles of this ModulemdDefaults.  # noqa: E501

        Default profiles for modulemd streams.  # noqa: E501

        :return: The profiles of this ModulemdDefaults.  # noqa: E501
        :rtype: str
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this ModulemdDefaults.

        Default profiles for modulemd streams.  # noqa: E501

        :param profiles: The profiles of this ModulemdDefaults.  # noqa: E501
        :type: str
        """
        if profiles is None:
            raise ValueError("Invalid value for `profiles`, must not be `None`")  # noqa: E501
        if profiles is not None and len(profiles) < 1:
            raise ValueError("Invalid value for `profiles`, length must be greater than or equal to `1`")  # noqa: E501

        self._profiles = profiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModulemdDefaults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
