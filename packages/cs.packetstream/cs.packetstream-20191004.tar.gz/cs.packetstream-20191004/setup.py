#!/usr/bin/env python
from setuptools import setup
setup(
  name = 'cs.packetstream',
  description = 'general purpose bidirectional packet stream connection',
  author = 'Cameron Simpson',
  author_email = 'cs@cskk.id.au',
  version = '20191004',
  url = 'https://bitbucket.org/cameron_simpson/css/commits/all',
  classifiers = ['Programming Language :: Python', 'Programming Language :: Python :: 2', 'Programming Language :: Python :: 3', 'Topic :: System :: Networking', 'Development Status :: 4 - Beta', 'Intended Audience :: Developers', 'Operating System :: OS Independent', 'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)'],
  include_package_data = True,
  install_requires = ['cs.binary', 'cs.buffer', 'cs.excutils', 'cs.later', 'cs.logutils', 'cs.pfx', 'cs.predicate', 'cs.queues', 'cs.resources', 'cs.result', 'cs.seq', 'cs.threads'],
  keywords = ['python2', 'python3'],
  license = 'GNU General Public License v3 or later (GPLv3+)',
  long_description = '*Latest release 20191004*:\nPacketConnection: new optional parameter `packet_grace` to tune the send delay for additional packets before a flush, default DEFAULT_PACKET_GRACE (0.01s), 0 for no delay.\nAdd a crude packet level activity ticker.\n\nA general purpose bidirectional packet stream connection.\n\n## Class `Packet`\n\nMRO: `cs.binary.PacketField`, `abc.ABC`  \nA protocol packet.\n\n## Class `PacketConnection`\n\nA bidirectional binary connection for exchanging requests and responses.\n\n### Method `PacketConnection.__init__(self, recv, send, request_handler=None, name=None, packet_grace=None, tick=None)`\n\nInitialise the PacketConnection.\n\nParameters:\n* `recv`: inbound binary stream.\n  If this is an `int` it is taken to be an OS file descriptor,\n  otherwise it should be a `cs.buffer.CornuCopyBuffer`\n  or a file like object with a `read1` or `read` method.\n* `send`: outbound binary stream.\n  If this is an `int` it is taken to be an OS file descriptor,\n  otherwise it should be a file like object with `.write(bytes)`\n  and `.flush()` methods.\n  For a file descriptor sending is done via an os.dup() of\n  the supplied descriptor, so the caller remains responsible\n  for closing the original descriptor.\n* `packet_grace`:\n  default pause in the packet sending worker\n  to allow another packet to be queued\n  before flushing the output stream.\n  Default: `DEFAULT_PACKET_GRACE`s.\n  A value of `0` will flush immediately if the queue is empty.\n* `request_handler`: an optional callable accepting\n  (`rq_type`, `flags`, `payload`).\n  The request_handler may return one of 5 values on success:\n  * `None`: response will be 0 flags and an empty payload.\n  * `int`: flags only. Response will be the flags and an empty payload.\n  * `bytes`: payload only. Response will be 0 flags and the payload.\n  * `str`: payload only. Response will be 0 flags and the str\n          encoded as bytes using UTF-8.\n  * `(int, bytes)`: Specify flags and payload for response.\n  An unsuccessful request should raise an exception, which\n  will cause a failure response packet.\n* `tick`: optional tick parameter, default `None`.\n  If `None`, do nothing.\n  If a Boolean, call `tick_fd_2` if true, otherwise do nothing.\n  Otherwise `tick` should be a callable accepting a byteslike value.\n\n## Class `Request_State`\n\nMRO: `builtins.tuple`  \nRequestState(decode_response, result)\n\n## Function `tick_fd_2(bs)`\n\nA low level tick function to write a short binary tick\nto the standard error file descriptor.\n\nThis may be called by the send and receive workers to give\nan indication of activity type.\n\n\n\n# Release Log\n\n*Release 20191004*:\nPacketConnection: new optional parameter `packet_grace` to tune the send delay for additional packets before a flush, default DEFAULT_PACKET_GRACE (0.01s), 0 for no delay.\nAdd a crude packet level activity ticker.\n\n*Release 20190221*:\nDISTINFO requirement updates.\n\n*Release 20181228*:\nInitial PyPI release.',
  long_description_content_type = 'text/markdown',
  package_dir = {'': 'lib/python'},
  py_modules = ['cs.packetstream'],
)
