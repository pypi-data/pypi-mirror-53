{"version":3,"sources":["webpack:///./src/components/dialog/ha-iron-focusables-helper.js","webpack:///./src/components/dialog/ha-paper-dialog.ts","webpack:///./src/components/ha-switch.ts","webpack:///./src/dialogs/config-entry-system-options/dialog-config-entry-system-options.ts"],"names":["HaIronFocusablesHelper","getTabbableNodes","node","result","this","_collectTabbableNodes","iron_focusables_helper","_sortByTabIndex","nodeType","Node","ELEMENT_NODE","_isVisible","children","element","tabIndex","_normalizedTabIndex","needsSort","push","localName","Object","polymer_dom","getDistributedNodes","shadowRoot","root","i","length","paperDialogClass","customElements","get","haTabFixBehaviorImpl","_focusableNodes","define","legacy_class","MwcSwitch","HaSwitch","[object Object]","super","firstUpdated","style","setProperty","classList","toggle","Boolean","_slot","assignedNodes","styles","_material_mwc_switch_mwc_switch_css__WEBPACK_IMPORTED_MODULE_3__","lit_element__WEBPACK_IMPORTED_MODULE_1__","tslib__WEBPACK_IMPORTED_MODULE_0__","DialogConfigEntrySystemOptions","params","_params","_error","undefined","_loading","systemOptions","_data_config_entries__WEBPACK_IMPORTED_MODULE_6__","hass","entry","entry_id","_disableNewEntities","disable_new_entities","updateComplete","_openedChanged","localize","_disableNewEntitiesChanged","_submitting","_updateEntry","ev","target","checked","err","message","detail","value","_resources_styles__WEBPACK_IMPORTED_MODULE_7__"],"mappings":"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","file":"chunk.3e56d29df4b6a15c587c.js","sourcesContent":["/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n/*\n  Fixes issue with not using shadow dom properly in iron-overlay-behavior/icon-focusables-helper.js\n*/\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\n\nimport { IronFocusablesHelper } from \"@polymer/iron-overlay-behavior/iron-focusables-helper.js\";\n\nexport const HaIronFocusablesHelper = {\n  /**\n   * Returns a sorted array of tabbable nodes, including the root node.\n   * It searches the tabbable nodes in the light and shadow dom of the chidren,\n   * sorting the result by tabindex.\n   * @param {!Node} node\n   * @return {!Array<!HTMLElement>}\n   */\n  getTabbableNodes: function(node) {\n    var result = [];\n    // If there is at least one element with tabindex > 0, we need to sort\n    // the final array by tabindex.\n    var needsSortByTabIndex = this._collectTabbableNodes(node, result);\n    if (needsSortByTabIndex) {\n      return IronFocusablesHelper._sortByTabIndex(result);\n    }\n    return result;\n  },\n\n  /**\n   * Searches for nodes that are tabbable and adds them to the `result` array.\n   * Returns if the `result` array needs to be sorted by tabindex.\n   * @param {!Node} node The starting point for the search; added to `result`\n   * if tabbable.\n   * @param {!Array<!HTMLElement>} result\n   * @return {boolean}\n   * @private\n   */\n  _collectTabbableNodes: function(node, result) {\n    // If not an element or not visible, no need to explore children.\n    if (\n      node.nodeType !== Node.ELEMENT_NODE ||\n      !IronFocusablesHelper._isVisible(node)\n    ) {\n      return false;\n    }\n    var element = /** @type {!HTMLElement} */ (node);\n    var tabIndex = IronFocusablesHelper._normalizedTabIndex(element);\n    var needsSort = tabIndex > 0;\n    if (tabIndex >= 0) {\n      result.push(element);\n    }\n\n    // In ShadowDOM v1, tab order is affected by the order of distrubution.\n    // E.g. getTabbableNodes(#root) in ShadowDOM v1 should return [#A, #B];\n    // in ShadowDOM v0 tab order is not affected by the distrubution order,\n    // in fact getTabbableNodes(#root) returns [#B, #A].\n    //  <div id=\"root\">\n    //   <!-- shadow -->\n    //     <slot name=\"a\">\n    //     <slot name=\"b\">\n    //   <!-- /shadow -->\n    //   <input id=\"A\" slot=\"a\">\n    //   <input id=\"B\" slot=\"b\" tabindex=\"1\">\n    //  </div>\n    // TODO(valdrin) support ShadowDOM v1 when upgrading to Polymer v2.0.\n    var children;\n    if (element.localName === \"content\" || element.localName === \"slot\") {\n      children = dom(element).getDistributedNodes();\n    } else {\n      // /////////////////////////\n      // Use shadow root if possible, will check for distributed nodes.\n      // THIS IS THE CHANGED LINE\n      children = dom(element.shadowRoot || element.root || element).children;\n      // /////////////////////////\n    }\n    for (var i = 0; i < children.length; i++) {\n      // Ensure method is always invoked to collect tabbable children.\n      needsSort = this._collectTabbableNodes(children[i], result) || needsSort;\n    }\n    return needsSort;\n  },\n};\n","import \"@polymer/paper-dialog/paper-dialog\";\nimport { mixinBehaviors } from \"@polymer/polymer/lib/legacy/class\";\nimport { HaIronFocusablesHelper } from \"./ha-iron-focusables-helper.js\";\n// tslint:disable-next-line\nimport { PaperDialogElement } from \"@polymer/paper-dialog/paper-dialog\";\n\nconst paperDialogClass = customElements.get(\"paper-dialog\");\n\n// behavior that will override existing iron-overlay-behavior and call the fixed implementation\nconst haTabFixBehaviorImpl = {\n  get _focusableNodes() {\n    return HaIronFocusablesHelper.getTabbableNodes(this);\n  },\n};\n\n// paper-dialog that uses the haTabFixBehaviorImpl behvaior\n// export class HaPaperDialog extends paperDialogClass {}\n// @ts-ignore\nexport class HaPaperDialog\n  extends mixinBehaviors([haTabFixBehaviorImpl], paperDialogClass)\n  implements PaperDialogElement {}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-paper-dialog\": HaPaperDialog;\n  }\n}\ncustomElements.define(\"ha-paper-dialog\", HaPaperDialog);\n","import { Constructor, customElement, CSSResult, css, query } from \"lit-element\";\nimport \"@material/mwc-switch\";\nimport { style } from \"@material/mwc-switch/mwc-switch-css\";\n// tslint:disable-next-line\nimport { Switch } from \"@material/mwc-switch\";\n// tslint:disable-next-line\nconst MwcSwitch = customElements.get(\"mwc-switch\") as Constructor<Switch>;\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends MwcSwitch {\n  @query(\"slot\") private _slot!: HTMLSlotElement;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\"--mdc-theme-secondary\", \"var(--primary-color)\");\n    this.classList.toggle(\n      \"slotted\",\n      Boolean(this._slot.assignedNodes().length)\n    );\n  }\n\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        :host {\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n          background-color: var(--paper-toggle-button-unchecked-button-color);\n          border-color: var(--paper-toggle-button-unchecked-button-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n          background-color: var(--paper-toggle-button-unchecked-bar-color);\n          border-color: var(--paper-toggle-button-unchecked-bar-color);\n        }\n        :host(.slotted) .mdc-switch {\n          margin-right: 24px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import {\n  LitElement,\n  html,\n  css,\n  CSSResult,\n  TemplateResult,\n  customElement,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-dialog-scrollable/paper-dialog-scrollable\";\nimport \"@polymer/paper-input/paper-input\";\n\nimport \"../../components/dialog/ha-paper-dialog\";\nimport \"../../components/ha-switch\";\n\nimport { HomeAssistant } from \"../../types\";\nimport { ConfigEntrySystemOptionsDialogParams } from \"./show-dialog-config-entry-system-options\";\nimport {\n  getConfigEntrySystemOptions,\n  updateConfigEntrySystemOptions,\n} from \"../../data/config_entries\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { haStyleDialog } from \"../../resources/styles\";\n// tslint:disable-next-line: no-duplicate-imports\nimport { HaSwitch } from \"../../components/ha-switch\";\n\n@customElement(\"dialog-config-entry-system-options\")\nclass DialogConfigEntrySystemOptions extends LitElement {\n  @property() public hass!: HomeAssistant;\n  @property() private _disableNewEntities!: boolean;\n  @property() private _error?: string;\n  @property() private _params?: ConfigEntrySystemOptionsDialogParams;\n  @property() private _loading?: boolean;\n  @property() private _submitting?: boolean;\n\n  public async showDialog(\n    params: ConfigEntrySystemOptionsDialogParams\n  ): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    this._loading = true;\n    const systemOptions = await getConfigEntrySystemOptions(\n      this.hass,\n      params.entry.entry_id\n    );\n    this._loading = false;\n    this._disableNewEntities = systemOptions.disable_new_entities;\n    await this.updateComplete;\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this._params) {\n      return html``;\n    }\n\n    return html`\n      <ha-paper-dialog\n        with-backdrop\n        opened\n        @opened-changed=\"${this._openedChanged}\"\n      >\n        <h2>\n          ${this.hass.localize(\"ui.dialogs.config_entry_system_options.title\")}\n        </h2>\n        <paper-dialog-scrollable>\n          ${this._loading\n            ? html`\n                <div class=\"init-spinner\">\n                  <paper-spinner-lite active></paper-spinner-lite>\n                </div>\n              `\n            : html`\n                ${this._error\n                  ? html`\n                      <div class=\"error\">${this._error}</div>\n                    `\n                  : \"\"}\n                <div class=\"form\">\n                  <ha-switch\n                    .checked=${!this._disableNewEntities}\n                    @change=${this._disableNewEntitiesChanged}\n                    .disabled=${this._submitting}\n                  >\n                    <div>\n                      ${this.hass.localize(\n                        \"ui.dialogs.config_entry_system_options.enable_new_entities_label\"\n                      )}\n                    </div>\n                    <div class=\"secondary\">\n                      ${this.hass.localize(\n                        \"ui.dialogs.config_entry_system_options.enable_new_entities_description\"\n                      )}\n                    </div>\n                  </ha-switch>\n                </div>\n              `}\n        </paper-dialog-scrollable>\n        ${!this._loading\n          ? html`\n              <div class=\"paper-dialog-buttons\">\n                <mwc-button\n                  @click=\"${this._updateEntry}\"\n                  .disabled=${this._submitting}\n                >\n                  ${this.hass.localize(\n                    \"ui.panel.config.entity_registry.editor.update\"\n                  )}\n                </mwc-button>\n              </div>\n            `\n          : \"\"}\n      </ha-paper-dialog>\n    `;\n  }\n\n  private _disableNewEntitiesChanged(ev: Event): void {\n    this._error = undefined;\n    this._disableNewEntities = !(ev.target as HaSwitch).checked;\n  }\n\n  private async _updateEntry(): Promise<void> {\n    this._submitting = true;\n    try {\n      await updateConfigEntrySystemOptions(\n        this.hass,\n        this._params!.entry.entry_id,\n        {\n          disable_new_entities: this._disableNewEntities,\n        }\n      );\n      this._params = undefined;\n    } catch (err) {\n      this._error = err.message || \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>): void {\n    if (!(ev.detail as any).value) {\n      this._params = undefined;\n    }\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyleDialog,\n      css`\n        ha-paper-dialog {\n          min-width: 400px;\n          max-width: 500px;\n        }\n        .init-spinner {\n          padding: 50px 100px;\n          text-align: center;\n        }\n\n        .form {\n          padding-top: 6px;\n          padding-bottom: 24px;\n          color: var(--primary-text-color);\n        }\n\n        .secondary {\n          color: var(--secondary-text-color);\n        }\n\n        .error {\n          color: var(--google-red-500);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-config-entry-system-options\": DialogConfigEntrySystemOptions;\n  }\n}\n"],"sourceRoot":""}