{"version":3,"sources":["webpack:///./src/panels/config/cloud/google-assistant/cloud-google-assistant.ts","webpack:///./src/data/google_assistant.ts"],"names":["configIsExposed","config","undefined","should_expose","_super","CloudGoogleAssistant","_this","apply","this","arguments","_entityConfigs","_popstateSyncAttached","_popstateReloadStatusAttached","_getEntityFilterFunc","Object","memoize_one_esm","filter","entity_filter","include_domains","include_entities","exclude_domains","exclude_entities","tslib_es6","prototype","render","_entities","lit_element","templateObject_1","emptyFilter","cloudStatus","google_entities","filterFunc","showInExposed","_isInitialExposed","Set","trackExposed","selected","exposedCards","notExposedCards","forEach","entity","stateObj","hass","states","entity_id","isExposed","add","has","push","templateObject_3","_showMoreInfo","traits","map","trait","substr","lastIndexOf","join","_exposeChanged","localize","might_2fa","templateObject_2","Boolean","disable_2fa","_disable2FAChanged","templateObject_9","narrow","templateObject_4","templateObject_5","_openDomainToggler","templateObject_6","length","templateObject_7","templateObject_8","firstUpdated","changedProps","call","_fetchData","updated","prefs","google_entity_configs","callWS","type","entities","_a","sent","sort","a","b","stateA","stateB","compare","compute_state_name","ev","entityId","currentTarget","fire_event","newExposed","target","checked","_updateExposed","curExposed","_updateConfig","_ensureEntitySync","newDisable2FA","curDisable2FA","values","cloud","updatedConfig","_b","_ensureStatusReload","show_dialog_domain_toggler","domains","compute_domain","value","idx","self","indexOf","toggleDomain","domain","turnOn","parent","parentElement","window","addEventListener","once","toast","message","defineProperty","templateObject_10"],"mappings":"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","file":"chunk.754358d2bf552a7911d7.js","sourcesContent":["import {\n  LitElement,\n  TemplateResult,\n  html,\n  CSSResult,\n  css,\n  customElement,\n  property,\n} from \"lit-element\";\nimport memoizeOne from \"memoize-one\";\nimport \"@polymer/paper-icon-button\";\n\nimport \"../../../../layouts/hass-subpage\";\nimport \"../../../../layouts/hass-loading-screen\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/entity/state-info\";\nimport \"../../../../components/ha-switch\";\n\nimport { HomeAssistant } from \"../../../../types\";\nimport {\n  CloudStatusLoggedIn,\n  CloudPreferences,\n  updateCloudGoogleEntityConfig,\n  cloudSyncGoogleAssistant,\n  GoogleEntityConfig,\n} from \"../../../../data/cloud\";\nimport {\n  generateFilter,\n  isEmptyFilter,\n  EntityFilter,\n} from \"../../../../common/entity/entity_filter\";\nimport { compare } from \"../../../../common/string/compare\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { showToast } from \"../../../../util/toast\";\nimport { showDomainTogglerDialog } from \"../../../../dialogs/domain-toggler/show-dialog-domain-toggler\";\nimport {\n  GoogleEntity,\n  fetchCloudGoogleEntities,\n} from \"../../../../data/google_assistant\";\n// tslint:disable-next-line: no-duplicate-imports\nimport { HaSwitch } from \"../../../../components/ha-switch\";\n\nimport { computeStateName } from \"../../../../common/entity/compute_state_name\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\n\nconst DEFAULT_CONFIG_EXPOSE = true;\n\nconst configIsExposed = (config: GoogleEntityConfig) =>\n  config.should_expose === undefined\n    ? DEFAULT_CONFIG_EXPOSE\n    : config.should_expose;\n\n@customElement(\"cloud-google-assistant\")\nclass CloudGoogleAssistant extends LitElement {\n  @property() public hass!: HomeAssistant;\n  @property() public cloudStatus!: CloudStatusLoggedIn;\n  @property() public narrow!: boolean;\n  @property() private _entities?: GoogleEntity[];\n  @property()\n  private _entityConfigs: CloudPreferences[\"google_entity_configs\"] = {};\n  private _popstateSyncAttached = false;\n  private _popstateReloadStatusAttached = false;\n  private _isInitialExposed?: Set<string>;\n\n  private _getEntityFilterFunc = memoizeOne((filter: EntityFilter) =>\n    generateFilter(\n      filter.include_domains,\n      filter.include_entities,\n      filter.exclude_domains,\n      filter.exclude_entities\n    )\n  );\n\n  protected render(): TemplateResult | void {\n    if (this._entities === undefined) {\n      return html`\n        <hass-loading-screen></hass-loading-screen>\n      `;\n    }\n    const emptyFilter = isEmptyFilter(this.cloudStatus.google_entities);\n    const filterFunc = this._getEntityFilterFunc(\n      this.cloudStatus.google_entities\n    );\n\n    // We will only generate `isInitialExposed` during first render.\n    // On each subsequent render we will use the same set so that cards\n    // will not jump around when we change the exposed setting.\n    const showInExposed = this._isInitialExposed || new Set();\n    const trackExposed = this._isInitialExposed === undefined;\n\n    let selected = 0;\n\n    // On first render we decide which cards show in which category.\n    // That way cards won't jump around when changing values.\n    const exposedCards: TemplateResult[] = [];\n    const notExposedCards: TemplateResult[] = [];\n\n    this._entities.forEach((entity) => {\n      const stateObj = this.hass.states[entity.entity_id];\n      const config = this._entityConfigs[entity.entity_id] || {};\n      const isExposed = emptyFilter\n        ? configIsExposed(config)\n        : filterFunc(entity.entity_id);\n      if (isExposed) {\n        selected++;\n\n        if (trackExposed) {\n          showInExposed.add(entity.entity_id);\n        }\n      }\n\n      const target = showInExposed.has(entity.entity_id)\n        ? exposedCards\n        : notExposedCards;\n\n      target.push(html`\n        <ha-card>\n          <div class=\"card-content\">\n            <state-info\n              .hass=${this.hass}\n              .stateObj=${stateObj}\n              secondary-line\n              @click=${this._showMoreInfo}\n            >\n              ${entity.traits\n                .map((trait) => trait.substr(trait.lastIndexOf(\".\") + 1))\n                .join(\", \")}\n            </state-info>\n            <ha-switch\n              .entityId=${entity.entity_id}\n              .disabled=${!emptyFilter}\n              .checked=${isExposed}\n              @change=${this._exposeChanged}\n            >\n              ${this.hass!.localize(\"ui.panel.config.cloud.google.expose\")}\n            </ha-switch>\n            ${entity.might_2fa\n              ? html`\n                  <ha-switch\n                    .entityId=${entity.entity_id}\n                    .checked=${Boolean(config.disable_2fa)}\n                    @change=${this._disable2FAChanged}\n                  >\n                    ${this.hass!.localize(\n                      \"ui.panel.config.cloud.google.disable_2FA\"\n                    )}\n                  </ha-switch>\n                `\n              : \"\"}\n          </div>\n        </ha-card>\n      `);\n    });\n\n    if (trackExposed) {\n      this._isInitialExposed = showInExposed;\n    }\n\n    return html`\n      <hass-subpage header=\"${this.hass!.localize(\n        \"ui.panel.config.cloud.google.title\"\n      )}\">\n        <span slot=\"toolbar-icon\">\n          ${selected}${\n      !this.narrow\n        ? html`\n            selected\n          `\n        : \"\"\n    }\n        </span>\n        ${\n          emptyFilter\n            ? html`\n                <paper-icon-button\n                  slot=\"toolbar-icon\"\n                  icon=\"hass:tune\"\n                  @click=${this._openDomainToggler}\n                ></paper-icon-button>\n              `\n            : \"\"\n        }\n        ${\n          !emptyFilter\n            ? html`\n                <div class=\"banner\">\n                  ${this.hass!.localize(\"ui.panel.config.cloud.google.banner\")}\n                </div>\n              `\n            : \"\"\n        }\n          ${\n            exposedCards.length > 0\n              ? html`\n                  <h1>\n                    ${this.hass!.localize(\n                      \"ui.panel.config.cloud.google.exposed_entities\"\n                    )}\n                  </h1>\n                  <div class=\"content\">${exposedCards}</div>\n                `\n              : \"\"\n          }\n          ${\n            notExposedCards.length > 0\n              ? html`\n                  <h1>\n                    ${this.hass!.localize(\n                      \"ui.panel.config.cloud.google.not_exposed_entities\"\n                    )}\n                  </h1>\n                  <div class=\"content\">${notExposedCards}</div>\n                `\n              : \"\"\n          }\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this._fetchData();\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (changedProps.has(\"cloudStatus\")) {\n      this._entityConfigs = this.cloudStatus.prefs.google_entity_configs;\n    }\n  }\n\n  private async _fetchData() {\n    const entities = await fetchCloudGoogleEntities(this.hass);\n    entities.sort((a, b) => {\n      const stateA = this.hass.states[a.entity_id];\n      const stateB = this.hass.states[b.entity_id];\n      return compare(\n        stateA ? computeStateName(stateA) : a.entity_id,\n        stateB ? computeStateName(stateB) : b.entity_id\n      );\n    });\n    this._entities = entities;\n  }\n\n  private _showMoreInfo(ev) {\n    const entityId = ev.currentTarget.stateObj.entity_id;\n    fireEvent(this, \"hass-more-info\", { entityId });\n  }\n\n  private async _exposeChanged(ev: Event) {\n    const entityId = (ev.currentTarget as any).entityId;\n    const newExposed = (ev.target as HaSwitch).checked;\n    await this._updateExposed(entityId, newExposed);\n  }\n\n  private async _updateExposed(entityId: string, newExposed: boolean) {\n    const curExposed = configIsExposed(this._entityConfigs[entityId] || {});\n    if (newExposed === curExposed) {\n      return;\n    }\n    await this._updateConfig(entityId, {\n      should_expose: newExposed,\n    });\n    this._ensureEntitySync();\n  }\n\n  private async _disable2FAChanged(ev: Event) {\n    const entityId = (ev.currentTarget as any).entityId;\n    const newDisable2FA = (ev.target as HaSwitch).checked;\n    const curDisable2FA = Boolean(\n      (this._entityConfigs[entityId] || {}).disable_2fa\n    );\n    if (newDisable2FA === curDisable2FA) {\n      return;\n    }\n    await this._updateConfig(entityId, {\n      disable_2fa: newDisable2FA,\n    });\n  }\n\n  private async _updateConfig(entityId: string, values: GoogleEntityConfig) {\n    const updatedConfig = await updateCloudGoogleEntityConfig(\n      this.hass,\n      entityId,\n      values\n    );\n    this._entityConfigs = {\n      ...this._entityConfigs,\n      [entityId]: updatedConfig,\n    };\n    this._ensureStatusReload();\n  }\n\n  private _openDomainToggler() {\n    showDomainTogglerDialog(this, {\n      domains: this._entities!.map((entity) =>\n        computeDomain(entity.entity_id)\n      ).filter((value, idx, self) => self.indexOf(value) === idx),\n      toggleDomain: (domain, turnOn) => {\n        this._entities!.forEach((entity) => {\n          if (computeDomain(entity.entity_id) === domain) {\n            this._updateExposed(entity.entity_id, turnOn);\n          }\n        });\n      },\n    });\n  }\n\n  private _ensureStatusReload() {\n    if (this._popstateReloadStatusAttached) {\n      return;\n    }\n    this._popstateReloadStatusAttached = true;\n    // Cache parent because by the time popstate happens,\n    // this element is detached\n    const parent = this.parentElement!;\n    window.addEventListener(\n      \"popstate\",\n      () => fireEvent(parent, \"ha-refresh-cloud-status\"),\n      { once: true }\n    );\n  }\n\n  private _ensureEntitySync() {\n    if (this._popstateSyncAttached) {\n      return;\n    }\n    this._popstateSyncAttached = true;\n    // Cache parent because by the time popstate happens,\n    // this element is detached\n    const parent = this.parentElement!;\n    window.addEventListener(\n      \"popstate\",\n      () => {\n        showToast(parent, {\n          message: this.hass!.localize(\n            \"ui.panel.config.cloud.googe.sync_to_google\"\n          ),\n        });\n        cloudSyncGoogleAssistant(this.hass);\n      },\n      { once: true }\n    );\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .banner {\n        color: var(--primary-text-color);\n        background-color: var(\n          --ha-card-background,\n          var(--paper-card-background-color, white)\n        );\n        padding: 16px 8px;\n        text-align: center;\n      }\n      h1 {\n        color: var(--primary-text-color);\n        font-size: 24px;\n        letter-spacing: -0.012em;\n        margin-bottom: 0;\n        padding: 0 8px;\n      }\n      .content {\n        display: flex;\n        flex-wrap: wrap;\n        padding: 4px;\n      }\n      ha-card {\n        margin: 4px;\n        width: 100%;\n        max-width: 300px;\n      }\n      .card-content {\n        padding-bottom: 12px;\n      }\n      state-info {\n        cursor: pointer;\n      }\n      ha-switch {\n        padding: 8px 0;\n      }\n\n      @media all and (max-width: 450px) {\n        ha-card {\n          max-width: 100%;\n        }\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"cloud-google-assistant\": CloudGoogleAssistant;\n  }\n}\n","import { HomeAssistant } from \"../types\";\n\nexport interface GoogleEntity {\n  entity_id: string;\n  traits: string[];\n  might_2fa: boolean;\n}\n\nexport const fetchCloudGoogleEntities = (hass: HomeAssistant) =>\n  hass.callWS<GoogleEntity[]>({ type: \"cloud/google_assistant/entities\" });\n"],"sourceRoot":""}