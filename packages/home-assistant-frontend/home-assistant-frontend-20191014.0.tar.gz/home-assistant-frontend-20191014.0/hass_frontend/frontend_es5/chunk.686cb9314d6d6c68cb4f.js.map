{"version":3,"sources":["webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/resources/codemirror.ondemand.ts","webpack:///./src/components/ha-code-editor.ts","webpack:///./src/panels/lovelace/hui-editor.ts"],"names":["__webpack_require__","d","__webpack_exports__","struct","Object","index_es","types","entity-id","value","includes","icon","codemirror_ondemand_loaded","_super","HaCodeEditor","_this","apply","this","arguments","autofocus","rtl","error","_value","tslib_es6","defineProperty","prototype","codemirror","getValue","shadowRoot","querySelector","connectedCallback","call","refresh","focus","update","changedProps","has","setOption","mode","setValue","_calcGutters","_setScrollBarDirection","classList","toggle","firstUpdated","_load","Promise","all","e","then","bind","loaded","_a","sent","codeMirror","attachShadow","innerHTML","codeMirrorCss","lineNumbers","tabSize","viewportMargin","Infinity","extraKeys","Tab","Shift-Tab","gutters","on","_onChange","newValue","fire_event","getWrapperElement","lit_element","lovelaceStruct","_common_structs_struct__WEBPACK_IMPORTED_MODULE_10__","interface","title","views","resources","optional","LovelaceFullConfigEditor","_generation","tslib__WEBPACK_IMPORTED_MODULE_0__","hass","lovelace","closeEditor","_saving","_changed","render","lit_element__WEBPACK_IMPORTED_MODULE_1__","templateObject_1","_closeEditor","localize","lit_html_directives_class_map__WEBPACK_IMPORTED_MODULE_2__","saved","_handleSave","_common_util_compute_rtl__WEBPACK_IMPORTED_MODULE_14__","_yamlChanged","yamlEditor","js_yaml__WEBPACK_IMPORTED_MODULE_3___default","a","safeDump","config","_resources_styles__WEBPACK_IMPORTED_MODULE_12__","templateObject_2","getDoc","isClean","window","onbeforeunload","confirm","hasComments","safeLoad","err","alert","saveConfig","err_1","changeGeneration","customElements","define"],"mappings":"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","file":"chunk.686cb9314d6d6c68cb4f.js","sourcesContent":["import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","interface LoadedCodeMirror {\n  codeMirror: any;\n  codeMirrorCss: any;\n}\n\nlet loaded: Promise<LoadedCodeMirror>;\n\nexport const loadCodeMirror = async (): Promise<LoadedCodeMirror> => {\n  if (!loaded) {\n    loaded = import(/* webpackChunkName: \"codemirror\" */ \"./codemirror\");\n  }\n  return loaded;\n};\n","import { loadCodeMirror } from \"../resources/codemirror.ondemand\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport {\n  UpdatingElement,\n  property,\n  customElement,\n  PropertyValues,\n} from \"lit-element\";\nimport { Editor } from \"codemirror\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"editor-save\": undefined;\n  }\n}\n\n@customElement(\"ha-code-editor\")\nexport class HaCodeEditor extends UpdatingElement {\n  public codemirror?: Editor;\n  @property() public mode?: string;\n  @property() public autofocus = false;\n  @property() public rtl = false;\n  @property() public error = false;\n  @property() private _value = \"\";\n\n  public set value(value: string) {\n    this._value = value;\n  }\n\n  public get value(): string {\n    return this.codemirror ? this.codemirror.getValue() : this._value;\n  }\n\n  public get hasComments(): boolean {\n    return this.shadowRoot!.querySelector(\"span.cm-comment\") ? true : false;\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (!this.codemirror) {\n      return;\n    }\n    this.codemirror.refresh();\n    if (this.autofocus !== false) {\n      this.codemirror.focus();\n    }\n  }\n\n  protected update(changedProps: PropertyValues): void {\n    super.update(changedProps);\n\n    if (!this.codemirror) {\n      return;\n    }\n\n    if (changedProps.has(\"mode\")) {\n      this.codemirror.setOption(\"mode\", this.mode);\n    }\n    if (changedProps.has(\"autofocus\")) {\n      this.codemirror.setOption(\"autofocus\", this.autofocus !== false);\n    }\n    if (changedProps.has(\"_value\") && this._value !== this.value) {\n      this.codemirror.setValue(this._value);\n    }\n    if (changedProps.has(\"rtl\")) {\n      this.codemirror.setOption(\"gutters\", this._calcGutters());\n      this._setScrollBarDirection();\n    }\n    if (changedProps.has(\"error\")) {\n      this.classList.toggle(\"error-state\", this.error);\n    }\n  }\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n    this._load();\n  }\n\n  private async _load(): Promise<void> {\n    const loaded = await loadCodeMirror();\n\n    const codeMirror = loaded.codeMirror;\n\n    const shadowRoot = this.attachShadow({ mode: \"open\" });\n\n    shadowRoot!.innerHTML = `\n    <style>\n      ${loaded.codeMirrorCss}\n      .CodeMirror {\n        height: var(--code-mirror-height, auto);\n        direction: var(--code-mirror-direction, ltr);\n      }\n      .CodeMirror-scroll {\n        max-height: var(--code-mirror-max-height, --code-mirror-height);\n      }\n      .CodeMirror-gutters {\n        border-right: 1px solid var(--paper-input-container-color, var(--secondary-text-color));\n        background-color: var(--paper-dialog-background-color, var(--primary-background-color));\n        transition: 0.2s ease border-right;\n      }\n      :host(.error-state) .CodeMirror-gutters {\n        border-color: var(--error-state-color, red);\n      }\n      .CodeMirror-focused .CodeMirror-gutters {\n        border-right: 2px solid var(--paper-input-container-focus-color, var(--primary-color));\n      }\n      .CodeMirror-linenumber {\n        color: var(--paper-dialog-color, var(--primary-text-color));\n      }\n      .rtl .CodeMirror-vscrollbar {\n        right: auto;\n        left: 0px;\n      }\n      .rtl-gutter {\n        width: 20px;\n      }\n    </style>`;\n\n    this.codemirror = codeMirror(shadowRoot, {\n      value: this._value,\n      lineNumbers: true,\n      tabSize: 2,\n      mode: this.mode,\n      autofocus: this.autofocus !== false,\n      viewportMargin: Infinity,\n      extraKeys: {\n        Tab: \"indentMore\",\n        \"Shift-Tab\": \"indentLess\",\n      },\n      gutters: this._calcGutters(),\n    });\n    this._setScrollBarDirection();\n    this.codemirror!.on(\"changes\", () => this._onChange());\n  }\n\n  private _onChange(): void {\n    const newValue = this.value;\n    if (newValue === this._value) {\n      return;\n    }\n    this._value = newValue;\n    fireEvent(this, \"value-changed\", { value: this._value });\n  }\n\n  private _calcGutters(): string[] {\n    return this.rtl ? [\"rtl-gutter\", \"CodeMirror-linenumbers\"] : [];\n  }\n\n  private _setScrollBarDirection(): void {\n    if (this.codemirror) {\n      this.codemirror.getWrapperElement().classList.toggle(\"rtl\", this.rtl);\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-code-editor\": HaCodeEditor;\n  }\n}\n","import { LitElement, html, TemplateResult, CSSResult, css } from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport yaml from \"js-yaml\";\n\nimport \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport \"@material/mwc-button\";\nimport \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@polymer/paper-spinner/paper-spinner\";\n\nimport { struct } from \"./common/structs/struct\";\nimport { Lovelace } from \"./types\";\n\nimport \"../../components/ha-icon\";\nimport { haStyle } from \"../../resources/styles\";\nimport \"../../components/ha-code-editor\";\n// This is not a duplicate import, one is for types, one is for element.\n// tslint:disable-next-line\nimport { HaCodeEditor } from \"../../components/ha-code-editor\";\nimport { HomeAssistant } from \"../../types\";\nimport { computeRTL } from \"../../common/util/compute_rtl\";\n\nconst lovelaceStruct = struct.interface({\n  title: \"string?\",\n  views: [\"object\"],\n  resources: struct.optional([\"object\"]),\n});\n\nclass LovelaceFullConfigEditor extends LitElement {\n  public hass!: HomeAssistant;\n  public lovelace?: Lovelace;\n  public closeEditor?: () => void;\n  private _saving?: boolean;\n  private _changed?: boolean;\n  private _generation = 1;\n\n  static get properties() {\n    return {\n      hass: {},\n      lovelace: {},\n      closeEditor: {},\n      _saving: {},\n      _changed: {},\n    };\n  }\n\n  public render(): TemplateResult | void {\n    return html`\n      <app-header-layout>\n        <app-header>\n          <app-toolbar>\n            <paper-icon-button\n              icon=\"hass:close\"\n              @click=\"${this._closeEditor}\"\n            ></paper-icon-button>\n            <div main-title>\n              ${this.hass!.localize(\n                \"ui.panel.lovelace.editor.raw_editor.header\"\n              )}\n            </div>\n            <div\n              class=\"save-button\n              ${classMap({\n                saved: this._saving! === false || this._changed === true,\n              })}\"\n            >\n              ${this._changed\n                ? this.hass!.localize(\n                    \"ui.panel.lovelace.editor.raw_editor.unsaved_changes\"\n                  )\n                : this.hass!.localize(\n                    \"ui.panel.lovelace.editor.raw_editor.saved\"\n                  )}\n            </div>\n            <mwc-button raised @click=\"${this._handleSave}\"\n              >${this.hass!.localize(\n                \"ui.panel.lovelace.editor.raw_editor.save\"\n              )}</mwc-button\n            >\n          </app-toolbar>\n        </app-header>\n        <div class=\"content\">\n          <ha-code-editor\n            mode=\"yaml\"\n            autofocus\n            .rtl=${computeRTL(this.hass)}\n            .hass=\"${this.hass}\"\n            @value-changed=\"${this._yamlChanged}\"\n            @editor-save=\"${this._handleSave}\"\n          >\n          </ha-code-editor>\n        </div>\n      </app-header-layout>\n    `;\n  }\n\n  protected firstUpdated() {\n    this.yamlEditor.value = yaml.safeDump(this.lovelace!.config);\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyle,\n      css`\n        :host {\n          --code-mirror-height: 100%;\n        }\n\n        app-header-layout {\n          height: 100vh;\n        }\n\n        app-toolbar {\n          background-color: var(--dark-background-color, #455a64);\n          color: var(--dark-text-color);\n        }\n\n        .comments {\n          font-size: 16px;\n        }\n\n        .content {\n          height: calc(100vh - 68px);\n        }\n\n        hui-code-editor {\n          height: 100%;\n        }\n\n        .save-button {\n          opacity: 0;\n          font-size: 14px;\n          padding: 0px 10px;\n        }\n\n        .saved {\n          opacity: 1;\n        }\n      `,\n    ];\n  }\n\n  private _yamlChanged() {\n    this._changed = !this.yamlEditor\n      .codemirror!.getDoc()\n      .isClean(this._generation);\n    if (this._changed && !window.onbeforeunload) {\n      window.onbeforeunload = () => {\n        return true;\n      };\n    } else if (!this._changed && window.onbeforeunload) {\n      window.onbeforeunload = null;\n    }\n  }\n\n  private _closeEditor() {\n    if (this._changed) {\n      if (\n        !confirm(\"You have unsaved changes, are you sure you want to exit?\")\n      ) {\n        return;\n      }\n    }\n    window.onbeforeunload = null;\n    if (this.closeEditor) {\n      this.closeEditor();\n    }\n  }\n\n  private async _handleSave() {\n    this._saving = true;\n\n    if (this.yamlEditor.hasComments) {\n      if (\n        !confirm(\n          \"Your config contains comment(s), these will not be saved. Do you want to continue?\"\n        )\n      ) {\n        return;\n      }\n    }\n\n    let value;\n    try {\n      value = yaml.safeLoad(this.yamlEditor.value);\n    } catch (err) {\n      alert(`Unable to parse YAML: ${err}`);\n      this._saving = false;\n      return;\n    }\n    try {\n      value = lovelaceStruct(value);\n    } catch (err) {\n      alert(`Your config is not valid: ${err}`);\n      return;\n    }\n    try {\n      await this.lovelace!.saveConfig(value);\n    } catch (err) {\n      alert(`Unable to save YAML: ${err}`);\n    }\n    this._generation = this.yamlEditor\n      .codemirror!.getDoc()\n      .changeGeneration(true);\n    window.onbeforeunload = null;\n    this._saving = false;\n    this._changed = false;\n  }\n\n  private get yamlEditor(): HaCodeEditor {\n    return this.shadowRoot!.querySelector(\"ha-code-editor\")! as HaCodeEditor;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-editor\": LovelaceFullConfigEditor;\n  }\n}\n\ncustomElements.define(\"hui-editor\", LovelaceFullConfigEditor);\n"],"sourceRoot":""}