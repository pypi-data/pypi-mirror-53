#restore_files:
#  iptables: /var/lib/fwgen/rules/iptables.restore
#  ip6tables: /var/lib/fwgen/rules/ip6tables.restore
#  ipsets: /var/lib/fwgen/rules/ipsets.restore

# fwgen by default archives the rulesets
#archive:
#  path: /var/lib/fwgen/archive
#  keep: 10

# Add check commands here to verify connectivity after the firewall ruleset has
# been applied. The check commands must return exit code 0 or the firewall will
# rollback the configuration. Shell features are not supported.
#check_commands:
#  # Check if autossh server is reachable for remote access via ssh port forwarding
#  - nc -v -z -w 2 <autossh_server> 22
#  # Run port test from remote server towards this host
#  - ssh -o ConnectTimeout=2 <user>@<testhost> nc -v -z -w 2 <management-ip> 22
#  # Check if some host is reachable
#  - ping -c 2 -W 2 <host>

# You can override the paths to the commands used in fwgen
#cmds:
#  iptables_save: iptables-save
#  iptables_restore: iptables-restore
#  ip6tables_save: ip6tables-save
#  ip6tables_restore: ip6tables-restore
#  ipset: ipset

# Example ipsets for use in the iptables rules via the set module
#ipsets:
#  servers_v4:
#    type: hash:net
#    entries:
#      - 192.168.0.0/24
#      - 192.168.1.0/24
#  servers_v6:
#    type: hash:net
#    options: family inet6
#    entries:
#      - fd12:3456:789a:1::/64
#      - fd12:3456:789a:2::/64
#  # If you add your inet and inet6 family sets to a list:set type of set
#  # you can use this set for both IPv4 and IPv6 rules, simplifying the ruleset.
#  servers:
#    type: list:set
#    entries:
#      - servers_v4
#      - servers_v6
#  dns_servers:
#    type: hash:ip
#    entries:
#      - 4.4.4.4
#      - 8.8.4.4

# Rules are applied both to iptables and ip6tables. Use '-4' or '-6' in the rule
# entry to indicate family if rule are family specific. This is documented in
# the ip(6)tables manual. Only family specific rules are finally stored
# to the restore files. However, using objects are normally preferred to doing this
# manually, as they handle this automatically.

# Objects are very useful if utilized correctly. You can use them in your ruleset
# using '${object}'.
# If the object value is recognized as either an IPv4 or IPv6 address the
# iptable rules will be automatically tagged with '-4' or '-6' unless you have manually
# tagged it already. If you list a mix of IPv4 and IPv6 addresses fwgen will
# put the valid address combinations into either IPv4 or IPv6 automatically.
# Another use case is to create multiprotocol objects, e.g. to be able to write a
# single rule for both udp and tcp.
# List values will always result in the rule being expanded into multiple rules
# (or ipset entries) until the list is exhausted.
#objects:
#  # This one is available by default, so you do not need to define it.
#  tcp+udp:
#    - tcp
#    - udp
#
#  dns_server:
#    - 10.0.10.10
#    - fd33::10
#  syslog:
#    - 10.0.10.2
#    - fd33::11
#  log_accept:
#    - LOG
#    - ACCEPT
#
#  # If you only have one value you can set it withouth using the list notation
#  test: 10.0.1.2
#
#  Example rule:
#    - -s ${dns_server} -d ${syslog} -p ${tcp+udp} --dport 514 -j ${log_accept}
#
#  Which equals these manually defined rules if you do not use objects:
#    - -4 -s 10.0.10.10 -d 10.0.10.2 -p tcp --dport 514 -j LOG
#    - -4 -s 10.0.10.10 -d 10.0.10.2 -p tcp --dport 514 -j ACCEPT
#    - -4 -s 10.0.10.10 -d 10.0.10.2 -p udp --dport 514 -j LOG
#    - -4 -s 10.0.10.10 -d 10.0.10.2 -p udp --dport 514 -j ACCEPT
#    - -6 -s fd33::10 -d fd33::11 -p tcp --dport 514 -j LOG
#    - -6 -s fd33::10 -d fd33::11 -p tcp --dport 514 -j ACCEPT
#    - -6 -s fd33::10 -d fd33::11 -p udp --dport 514 -j LOG
#    - -6 -s fd33::10 -d fd33::11 -p udp --dport 514 -j ACCEPT

# You may override the default filter policies of "DROP". However, this is not really
# recommended. It is a better practice to add an explicit ACCEPT target where needed in
# the ruleset to prevent accidental holes in your firewall.
#policy:
#  filter:
#    INPUT: ACCEPT
#    FORWARD: ACCEPT
#    OUTPUT: ACCEPT

# Create additonal chains here
#helper_chains:
#  filter:
#    LOG_REJECT:
#      - '-j LOG --log-level warning --log-prefix "IPTABLES_REJECT: "'
#      - -j REJECT

# In some very rare cases you may want to put some rules even before the default
# rules. This is useful if you want to do some processing on packets that are
# part of an established session.
#pre_default:
#  filter:
#    FORWARD:
#      - ...

# You can add rules that are processed before zone dispatching here.
# These will be hit for all interfaces, although they are still processed after
# the default rules.
#pre_zone:
#  raw:
#    PREROUTING:
#      # Add TFTP conntrack helper (new behaviour as of kernel 4.7)
#      - -4 -p udp -d 10.0.0.200 --dport 69 -j CT --helper tftp

#
# Complete minimal example for a classic two interface gateway with NAT
#
# The default policy is DROP for filter table for both IPv4 and IPv6 and
# ACCEPT for everything else, so an explicit ACCEPT is needed to pass traffic.
# There is no need to add rules for return traffic as these are added at the
# top of the ruleset via defaults.yml for maximum efficiency.
#zones:
#  local:
#    rules:
#      filter:
#        to:
#          lan:
#            - -j ACCEPT
#          wan:
#            - -j ACCEPT
#  lan:
#    interfaces:
#      - eth0
#    rules:
#      filter:
#        to:
#          local:
#            - -j ACCEPT
#          wan:
#            - -j ACCEPT
#  wan:
#    interfaces:
#      - eth1
#    rules:
#      nat:
#        POSTROUTING:
#          - -4 -j MASQUERADE

# local" is a reserved zone as it is for INPUT and OUTPUT traffic to the the gateway
# itself. You do not assign interfaces to "local". If you do not define a from/to
# zone for a flow the default policy is hit. Intra-zone flows are allowed by default,
# but this can be controlled per zone.
#
# You also have a special 'default' to-zone available. This zone do not have a zone
# definition and it is only processed if there are no matches in the other zones.
#
# Here's a little bit more complex example
#
#objects:
#  web_server: 10.0.0.100
#
#zones:
#  local:
#    rules:
#      filter:
#        to:
#          default:
#            - -j ACCEPT
#  lan:
#    interfaces:
#      - eth0
#      - eth3
#    allow_intra_zone: false
#    rules:
#      filter:
#        to:
#          local:
#            - -j ACCEPT
#          wan:
#            - -j ACCEPT
#          dmz:
#            - -j ACCEPT
#  wan:
#    interfaces:
#      - eth1
#    rules:
#      filter:
#        to:
#          dmz:
#            - -d ${web_server} -p tcp --dport 80 -j ACCEPT
#      nat:
#        PREROUTING:
#          - -4 -p tcp --dport 80 -j DNAT --to-destination ${web_server}
#        POSTROUTING:
#          - -4 -j MASQUERADE
#  dmz:
#    interfaces:
#      - eth2
#    rules:
#      filter:
#        to:
#          local:
#            - -4 -p icmp --imcp-type echo-request -j ACCEPT
#            - -6 -p icmpv6 --icmpv6-type echo-request -j ACCEPT
#            - -6 -p icmpv6 --icmpv6-type neighbor-solicitation -j ACCEPT
#            - -6 -p icmpv6 --icmpv6-type neighbor-advertisement -j ACCEPT
#            - -6 -p icmpv6 --icmpv6-type router-solicitation -j ACCEPT
#            - -j CUSTOM_REJECT
#          wan:
#            - -j ACCEPT

# ---- initial config start ----
#
# Please remove this after having configured your firewall. This is just a safety
# net to prevent you from full connectivity loss if fwgen is executed without being
# configured after '--create-config-dir' has been run
pre_zone:
  filter:
    INPUT:
      - -j ACCEPT
    OUTPUT:
      - -j ACCEPT

# ---- initial config end ----

# vim: ft=yaml
