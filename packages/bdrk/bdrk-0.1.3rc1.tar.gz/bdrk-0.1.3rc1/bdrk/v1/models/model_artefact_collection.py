# coding: utf-8

"""
    Bedrock

    API documentation for Bedrock platform  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ModelArtefactCollection(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict):       The key is attribute name
                                  and the value is attribute type.
      attribute_map (dict):       The key is attribute name
                                  and the value is json key in definition.
      readonly_attributes (dict): Set of readonly attributes (will not be
                                  serialised in request body).
    """
    openapi_types = {
        'entity_id': 'str',
        'created_at': 'datetime',
        'created_by': 'str',
        'last_updated': 'datetime',
        'model_name': 'str',
        'pipeline': 'TrainingPipeline',
        'public_id': 'str',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'entity_id': 'entity_id',
        'created_at': 'created_at',
        'created_by': 'created_by',
        'last_updated': 'last_updated',
        'model_name': 'model_name',
        'pipeline': 'pipeline',
        'public_id': 'public_id',
        'updated_at': 'updated_at'
    }

    readonly_attributes = {
    }

    def __init__(self, entity_id=None, created_at=None, created_by=None, last_updated=None, model_name=None, pipeline=None, public_id=None, updated_at=None):  # noqa: E501
        """ModelArtefactCollection - a model defined in OpenAPI"""  # noqa: E501

        self._entity_id = None
        self._created_at = None
        self._created_by = None
        self._last_updated = None
        self._model_name = None
        self._pipeline = None
        self._public_id = None
        self._updated_at = None
        self.discriminator = None

        self.entity_id = entity_id
        self.created_at = created_at
        self.created_by = created_by
        if last_updated is not None:
            self.last_updated = last_updated
        self.model_name = model_name
        if pipeline is not None:
            self.pipeline = pipeline
        self.public_id = public_id
        self.updated_at = updated_at

    @classmethod
    def from_response(cls, entity_id=None, created_at=None, created_by=None, last_updated=None, model_name=None, pipeline=None, public_id=None, updated_at=None):  # noqa: E501
        """Instantiate ModelArtefactCollection from response"""  # noqa: E501
        self = cls.__new__(cls)

        self._entity_id = None
        self._created_at = None
        self._created_by = None
        self._last_updated = None
        self._model_name = None
        self._pipeline = None
        self._public_id = None
        self._updated_at = None
        self.discriminator = None

        self.entity_id = entity_id
        self.created_at = created_at
        self.created_by = created_by
        if last_updated is not None:
            self.last_updated = last_updated
        self.model_name = model_name
        if pipeline is not None:
            self.pipeline = pipeline
        self.public_id = public_id
        self.updated_at = updated_at
        return self

    @property
    def entity_id(self):
        """Gets the entity_id of this ModelArtefactCollection.  # noqa: E501


        :return: The entity_id of this ModelArtefactCollection.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this ModelArtefactCollection.


        :param entity_id: The entity_id of this ModelArtefactCollection.  # noqa: E501
        :type: str
        """
        if entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")  # noqa: E501
        if entity_id is not None and not re.search(r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', entity_id):  # noqa: E501
            raise ValueError(r"Invalid value for `entity_id`, must be a follow pattern or equal to `/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/`")  # noqa: E501

        self._entity_id = entity_id

    @property
    def created_at(self):
        """Gets the created_at of this ModelArtefactCollection.  # noqa: E501


        :return: The created_at of this ModelArtefactCollection.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ModelArtefactCollection.


        :param created_at: The created_at of this ModelArtefactCollection.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this ModelArtefactCollection.  # noqa: E501


        :return: The created_by of this ModelArtefactCollection.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ModelArtefactCollection.


        :param created_by: The created_by of this ModelArtefactCollection.  # noqa: E501
        :type: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def last_updated(self):
        """Gets the last_updated of this ModelArtefactCollection.  # noqa: E501


        :return: The last_updated of this ModelArtefactCollection.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ModelArtefactCollection.


        :param last_updated: The last_updated of this ModelArtefactCollection.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def model_name(self):
        """Gets the model_name of this ModelArtefactCollection.  # noqa: E501


        :return: The model_name of this ModelArtefactCollection.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this ModelArtefactCollection.


        :param model_name: The model_name of this ModelArtefactCollection.  # noqa: E501
        :type: str
        """
        if model_name is None:
            raise ValueError("Invalid value for `model_name`, must not be `None`")  # noqa: E501

        self._model_name = model_name

    @property
    def pipeline(self):
        """Gets the pipeline of this ModelArtefactCollection.  # noqa: E501


        :return: The pipeline of this ModelArtefactCollection.  # noqa: E501
        :rtype: TrainingPipeline
        """
        return self._pipeline

    @pipeline.setter
    def pipeline(self, pipeline):
        """Sets the pipeline of this ModelArtefactCollection.


        :param pipeline: The pipeline of this ModelArtefactCollection.  # noqa: E501
        :type: TrainingPipeline
        """

        self._pipeline = pipeline

    @property
    def public_id(self):
        """Gets the public_id of this ModelArtefactCollection.  # noqa: E501


        :return: The public_id of this ModelArtefactCollection.  # noqa: E501
        :rtype: str
        """
        return self._public_id

    @public_id.setter
    def public_id(self, public_id):
        """Sets the public_id of this ModelArtefactCollection.


        :param public_id: The public_id of this ModelArtefactCollection.  # noqa: E501
        :type: str
        """
        if public_id is None:
            raise ValueError("Invalid value for `public_id`, must not be `None`")  # noqa: E501

        self._public_id = public_id

    @property
    def updated_at(self):
        """Gets the updated_at of this ModelArtefactCollection.  # noqa: E501


        :return: The updated_at of this ModelArtefactCollection.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ModelArtefactCollection.


        :param updated_at: The updated_at of this ModelArtefactCollection.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelArtefactCollection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
