# -*- coding: utf-8 -*-
from distutils.core import setup

packages = \
['smtplibaio']

package_data = \
{'': ['*']}

setup_kwargs = {
    'name': 'smtplibaio',
    'version': '2.1.2.post1',
    'description': 'An async version of smtplib',
    'long_description': 'smtplibaio\n==========\n\nThe smtplibaio package provides an SMTP client session object that can\nbe used to send e-mail in an asynchronous way (i.e. using `asyncio`).\n\nExamples\n--------\n\nLet\\\'s start with a very basic example, using `SMTP_SSL`:\n\n``` {.python}\nimport asyncio\nfrom email.headerregistry import Address\nfrom email.message import EmailMessage\n\nfrom smtplibaio import SMTP, SMTP_SSL\n\n\nasync def send_email():\n    from_addr = "bob@example.net"\n    to_addr = "alice@example.org"\n\n    message = "Hi Alice !"\n\n    async with SMTP_SSL() as client:\n        await client.sendmail(from_addr, to_addr, message)\n\n\nif __name__ == \'__main__\':\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(send_email())\n    loop.close()\n```\n\nAs you can see, the Asynchronous Context Manager makes it really easy to\nuse.\n\nSTARTTLS is supported only if you have the `aioopenssl` module\ninstalled. You must tell `SMTP` to use it upon instantiation:\n\n``` {.python}\n\n\n\nasync def send_email():\n    """\n    """\n    from_addr = "bob@example.net"\n    to_addr = "alice@example.org"\n\n    message = "Hi Alice !"\n\n    async with SMTP(use_aioopenssl=True) as client:\n    await client.starttls()\n        await client.sendmail(from_addr, to_addr, message)\n\n\nif __name__ == \'__main__\':\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(send_email())\n    loop.close()\n```\n\nIn the next example, we are specifying the server hostname and port, we\nare using authentication and we are using the objects provided by the\n`email` package available in the Python Standard Library (i.e.\n`email.message.EmailMessage`) to build a proper email message.\n\n``` {.python}\n\n\n\n\nasync def send_email():\n    # SMTP server:\n    smtp_server = "smtp.example.org"\n    port = 587\n\n    # Credentials used to authenticate:\n    username = "alice"\n    passwd = "5ecreT!"\n\n    # Use of Address object is not mandatory:\n    from_addr = Address("Alice", "alice", "example.org")\n    to_addr = Address("Bob", "bob", "example.net")\n    bcc_addr = Address("John", "john", "example.net")\n\n    # E-mail subject and content:\n    subject = "Testing smtplibaio"\n    content = "Look, all emails sent from this method are BCCed to John !"\n\n    # Build the list of recipients (To + Bcc):\n    recipients = [to_addr.addr_spec, bcc_addr.addr_spec]\n\n    # Build the EmailMessage object:\n    message = EmailMessage()\n    message.add_header("From", str(from_addr))\n    message.add_header("To", str(to_addr))\n    message.add_header("Bcc", str(bcc_addr))\n    message.add_header("Subject", subject)\n    message.add_header("Content-type", "text/plain", charset="utf-8")\n    message.set_content(content)\n\n    # Send the e-mail:\n    async with SMTP_SSL(hostname=smtp_server, port=port) as client:\n        await client.auth(username, passwd)\n        await client.sendmail(from_addr.addr_spec, recipients, message.as_string())\n\n\nif __name__ == "__main__":\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(send_email())\n    loop.close()\n```\n\nYou can also have a more fine-grained control using the lower-level\nmethods.\n\nSupported SMTP commands\n-----------------------\n\n-   EHLO - `SMTP.ehlo()` ;\n-   HELO - `SMTP.helo()` ;\n-   STARTTLS - `SMTP.starttls()` (depending on aioopenssl availability)\n    ;\n-   AUTH - `SMTP.auth()` (*LOGIN*, *PLAIN* and *CRAM-MD5* mechanisms are\n    suported) ;\n-   MAIL FROM - `SMTP.mail()` ;\n-   RCPT TO - `SMTP.rcpt()` ;\n-   VRFY - `SMTP.vrfy()` ;\n-   DATA - `SMTP.data()` ;\n-   EXPN - `SMTP.expn()` ;\n-   NOOP - `SMTP.noop()` ;\n-   QUIT - `SMTP.quit()` ;\n-   HELP - `SMTP.help()`.\n\nCurrent limitations\n-------------------\n\n-   There is no direct support for Python\\\'s\n    `email.message.EmailMessage`. You can still use\n    `email.message.EmailMessage.as_string()` or\n    `str(email.message.EmailMessage)` instead. See the example above for\n    further details.\n\nHow to contribute\n-----------------\n\nWe use [black][black], [isort][isort] in combination with [pre-commit][pre] to ensure one coding style and reduce the risk of merge conflicts.\nPlease [install pre-commit] to ensure your commits also meet these standards. When you see something to improve, have ideas for better tests or documentation, please create issues or create a pull request.\n\n\n[black]: https://github.com/psf/black\n[isort]: https://github.com/timothycrosley/isort\n[pre]: https://github.com/pre-commit/pre-commit-hooks\n[pre-install]: https://pre-commit.com/#install\n',
    'author': 'Olaf Gladis',
    'author_email': 'github@gladis.org',
    'url': 'https://github.com/hwmrocker/smtplibaio',
    'packages': packages,
    'package_data': package_data,
    'python_requires': '>=3.5,<4.0',
}


setup(**setup_kwargs)
