# coding: utf-8

"""
    Cloudera Edge Flow Manager REST API

    This REST API provides remote access to the EFM Server.                                             Endpoints that are marked as [BETA] are subject to change in future releases of the application without backwards compatibility and without a major version change.

    OpenAPI spec version: 1.0.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class C2Heartbeat(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_info': 'DeviceInfo',
        'agent_info': 'AgentInfo',
        'flow_info': 'FlowInfo'
    }

    attribute_map = {
        'device_info': 'deviceInfo',
        'agent_info': 'agentInfo',
        'flow_info': 'flowInfo'
    }

    def __init__(self, device_info=None, agent_info=None, flow_info=None):
        """
        C2Heartbeat - a model defined in Swagger
        """

        self._device_info = None
        self._agent_info = None
        self._flow_info = None

        if device_info is not None:
          self.device_info = device_info
        if agent_info is not None:
          self.agent_info = agent_info
        if flow_info is not None:
          self.flow_info = flow_info

    @property
    def device_info(self):
        """
        Gets the device_info of this C2Heartbeat.
        Metadata for the device

        :return: The device_info of this C2Heartbeat.
        :rtype: DeviceInfo
        """
        return self._device_info

    @device_info.setter
    def device_info(self, device_info):
        """
        Sets the device_info of this C2Heartbeat.
        Metadata for the device

        :param device_info: The device_info of this C2Heartbeat.
        :type: DeviceInfo
        """

        self._device_info = device_info

    @property
    def agent_info(self):
        """
        Gets the agent_info of this C2Heartbeat.
        Metadata for the agent installed on the device

        :return: The agent_info of this C2Heartbeat.
        :rtype: AgentInfo
        """
        return self._agent_info

    @agent_info.setter
    def agent_info(self, agent_info):
        """
        Sets the agent_info of this C2Heartbeat.
        Metadata for the agent installed on the device

        :param agent_info: The agent_info of this C2Heartbeat.
        :type: AgentInfo
        """

        self._agent_info = agent_info

    @property
    def flow_info(self):
        """
        Gets the flow_info of this C2Heartbeat.
        Metadata for the flow currently deployed to the agent

        :return: The flow_info of this C2Heartbeat.
        :rtype: FlowInfo
        """
        return self._flow_info

    @flow_info.setter
    def flow_info(self, flow_info):
        """
        Sets the flow_info of this C2Heartbeat.
        Metadata for the flow currently deployed to the agent

        :param flow_info: The flow_info of this C2Heartbeat.
        :type: FlowInfo
        """

        self._flow_info = flow_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, C2Heartbeat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
