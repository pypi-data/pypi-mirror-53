# coding: utf-8

"""
    Cloudera Edge Flow Manager REST API

    This REST API provides remote access to the EFM Server.                                             Endpoints that are marked as [BETA] are subject to change in future releases of the application without backwards compatibility and without a major version change.

    OpenAPI spec version: 1.0.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ELOperation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'args': 'dict(str, str)',
        'subject': 'str',
        'return_type': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'args': 'args',
        'subject': 'subject',
        'return_type': 'returnType'
    }

    def __init__(self, name=None, description=None, args=None, subject=None, return_type=None):
        """
        ELOperation - a model defined in Swagger
        """

        self._name = None
        self._description = None
        self._args = None
        self._subject = None
        self._return_type = None

        if name is not None:
          self.name = name
        if description is not None:
          self.description = description
        if args is not None:
          self.args = args
        if subject is not None:
          self.subject = subject
        if return_type is not None:
          self.return_type = return_type

    @property
    def name(self):
        """
        Gets the name of this ELOperation.
        The name of the operation

        :return: The name of this ELOperation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ELOperation.
        The name of the operation

        :param name: The name of this ELOperation.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this ELOperation.
        The description of the operation

        :return: The description of this ELOperation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ELOperation.
        The description of the operation

        :param description: The description of this ELOperation.
        :type: str
        """

        self._description = description

    @property
    def args(self):
        """
        Gets the args of this ELOperation.
        The arguments for the operation where the key is the argument name and the value is the description

        :return: The args of this ELOperation.
        :rtype: dict(str, str)
        """
        return self._args

    @args.setter
    def args(self, args):
        """
        Sets the args of this ELOperation.
        The arguments for the operation where the key is the argument name and the value is the description

        :param args: The args of this ELOperation.
        :type: dict(str, str)
        """

        self._args = args

    @property
    def subject(self):
        """
        Gets the subject of this ELOperation.
        The type of the subject

        :return: The subject of this ELOperation.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this ELOperation.
        The type of the subject

        :param subject: The subject of this ELOperation.
        :type: str
        """

        self._subject = subject

    @property
    def return_type(self):
        """
        Gets the return_type of this ELOperation.
        The type of the return value

        :return: The return_type of this ELOperation.
        :rtype: str
        """
        return self._return_type

    @return_type.setter
    def return_type(self, return_type):
        """
        Sets the return_type of this ELOperation.
        The type of the return value

        :param return_type: The return_type of this ELOperation.
        :type: str
        """

        self._return_type = return_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ELOperation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
