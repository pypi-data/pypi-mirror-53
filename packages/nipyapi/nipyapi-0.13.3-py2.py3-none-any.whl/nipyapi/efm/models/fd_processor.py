# coding: utf-8

"""
    Cloudera Edge Flow Manager REST API

    This REST API provides remote access to the EFM Server.                                             Endpoints that are marked as [BETA] are subject to change in future releases of the application without backwards compatibility and without a major version change.

    OpenAPI spec version: 1.0.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FDProcessor(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uri': 'str',
        'revision': 'FDRevision',
        'component_configuration': 'VersionedProcessor',
        'validation_errors': 'list[str]',
        'component_definition': 'ProcessorDefinition'
    }

    attribute_map = {
        'uri': 'uri',
        'revision': 'revision',
        'component_configuration': 'componentConfiguration',
        'validation_errors': 'validationErrors',
        'component_definition': 'componentDefinition'
    }

    def __init__(self, uri=None, revision=None, component_configuration=None, validation_errors=None, component_definition=None):
        """
        FDProcessor - a model defined in Swagger
        """

        self._uri = None
        self._revision = None
        self._component_configuration = None
        self._validation_errors = None
        self._component_definition = None

        if uri is not None:
          self.uri = uri
        if revision is not None:
          self.revision = revision
        if component_configuration is not None:
          self.component_configuration = component_configuration
        if validation_errors is not None:
          self.validation_errors = validation_errors
        if component_definition is not None:
          self.component_definition = component_definition

    @property
    def uri(self):
        """
        Gets the uri of this FDProcessor.
        The URI for future requests to the component.

        :return: The uri of this FDProcessor.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this FDProcessor.
        The URI for future requests to the component.

        :param uri: The uri of this FDProcessor.
        :type: str
        """

        self._uri = uri

    @property
    def revision(self):
        """
        Gets the revision of this FDProcessor.
        The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.

        :return: The revision of this FDProcessor.
        :rtype: FDRevision
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """
        Sets the revision of this FDProcessor.
        The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.

        :param revision: The revision of this FDProcessor.
        :type: FDRevision
        """

        self._revision = revision

    @property
    def component_configuration(self):
        """
        Gets the component_configuration of this FDProcessor.
        The configuration of the component.

        :return: The component_configuration of this FDProcessor.
        :rtype: VersionedProcessor
        """
        return self._component_configuration

    @component_configuration.setter
    def component_configuration(self, component_configuration):
        """
        Sets the component_configuration of this FDProcessor.
        The configuration of the component.

        :param component_configuration: The component_configuration of this FDProcessor.
        :type: VersionedProcessor
        """

        self._component_configuration = component_configuration

    @property
    def validation_errors(self):
        """
        Gets the validation_errors of this FDProcessor.
        Zero or more reasons that the component is currently invalid as-configured. The component is said to be valid if the returned Collection is empty.

        :return: The validation_errors of this FDProcessor.
        :rtype: list[str]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """
        Sets the validation_errors of this FDProcessor.
        Zero or more reasons that the component is currently invalid as-configured. The component is said to be valid if the returned Collection is empty.

        :param validation_errors: The validation_errors of this FDProcessor.
        :type: list[str]
        """

        self._validation_errors = validation_errors

    @property
    def component_definition(self):
        """
        Gets the component_definition of this FDProcessor.
        The definition of the component including available properties, allowable values, allowed scheduling strategies, input requirements, etc.

        :return: The component_definition of this FDProcessor.
        :rtype: ProcessorDefinition
        """
        return self._component_definition

    @component_definition.setter
    def component_definition(self, component_definition):
        """
        Sets the component_definition of this FDProcessor.
        The definition of the component including available properties, allowable values, allowed scheduling strategies, input requirements, etc.

        :param component_definition: The component_definition of this FDProcessor.
        :type: ProcessorDefinition
        """

        self._component_definition = component_definition

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FDProcessor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
