# coding: utf-8

"""
    Cloudera Edge Flow Manager REST API

    This REST API provides remote access to the EFM Server.                                             Endpoints that are marked as [BETA] are subject to change in future releases of the application without backwards compatibility and without a major version change.

    OpenAPI spec version: 1.0.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AgentStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uptime': 'int',
        'repositories': 'AgentRepositories',
        'components': 'dict(str, ComponentStatus)'
    }

    attribute_map = {
        'uptime': 'uptime',
        'repositories': 'repositories',
        'components': 'components'
    }

    def __init__(self, uptime=None, repositories=None, components=None):
        """
        AgentStatus - a model defined in Swagger
        """

        self._uptime = None
        self._repositories = None
        self._components = None

        if uptime is not None:
          self.uptime = uptime
        if repositories is not None:
          self.repositories = repositories
        if components is not None:
          self.components = components

    @property
    def uptime(self):
        """
        Gets the uptime of this AgentStatus.
        The number of milliseconds since the agent started.

        :return: The uptime of this AgentStatus.
        :rtype: int
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """
        Sets the uptime of this AgentStatus.
        The number of milliseconds since the agent started.

        :param uptime: The uptime of this AgentStatus.
        :type: int
        """

        self._uptime = uptime

    @property
    def repositories(self):
        """
        Gets the repositories of this AgentStatus.
        Status and metrics for the agent repositories

        :return: The repositories of this AgentStatus.
        :rtype: AgentRepositories
        """
        return self._repositories

    @repositories.setter
    def repositories(self, repositories):
        """
        Sets the repositories of this AgentStatus.
        Status and metrics for the agent repositories

        :param repositories: The repositories of this AgentStatus.
        :type: AgentRepositories
        """

        self._repositories = repositories

    @property
    def components(self):
        """
        Gets the components of this AgentStatus.
        Status and for shared agent components (that is, components that exist outside the context of a specific flow).

        :return: The components of this AgentStatus.
        :rtype: dict(str, ComponentStatus)
        """
        return self._components

    @components.setter
    def components(self, components):
        """
        Sets the components of this AgentStatus.
        Status and for shared agent components (that is, components that exist outside the context of a specific flow).

        :param components: The components of this AgentStatus.
        :type: dict(str, ComponentStatus)
        """

        self._components = components

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AgentStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
