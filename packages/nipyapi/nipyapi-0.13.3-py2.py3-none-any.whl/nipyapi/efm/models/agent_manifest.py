# coding: utf-8

"""
    Cloudera Edge Flow Manager REST API

    This REST API provides remote access to the EFM Server.                                             Endpoints that are marked as [BETA] are subject to change in future releases of the application without backwards compatibility and without a major version change.

    OpenAPI spec version: 1.0.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AgentManifest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'str',
        'agent_type': 'str',
        'version': 'str',
        'build_info': 'BuildInfo',
        'bundles': 'list[Bundle]',
        'component_manifest': 'ComponentManifest',
        'scheduling_defaults': 'SchedulingDefaults'
    }

    attribute_map = {
        'identifier': 'identifier',
        'agent_type': 'agentType',
        'version': 'version',
        'build_info': 'buildInfo',
        'bundles': 'bundles',
        'component_manifest': 'componentManifest',
        'scheduling_defaults': 'schedulingDefaults'
    }

    def __init__(self, identifier=None, agent_type=None, version=None, build_info=None, bundles=None, component_manifest=None, scheduling_defaults=None):
        """
        AgentManifest - a model defined in Swagger
        """

        self._identifier = None
        self._agent_type = None
        self._version = None
        self._build_info = None
        self._bundles = None
        self._component_manifest = None
        self._scheduling_defaults = None

        if identifier is not None:
          self.identifier = identifier
        if agent_type is not None:
          self.agent_type = agent_type
        if version is not None:
          self.version = version
        if build_info is not None:
          self.build_info = build_info
        if bundles is not None:
          self.bundles = bundles
        if component_manifest is not None:
          self.component_manifest = component_manifest
        if scheduling_defaults is not None:
          self.scheduling_defaults = scheduling_defaults

    @property
    def identifier(self):
        """
        Gets the identifier of this AgentManifest.
        A unique identifier for the manifest

        :return: The identifier of this AgentManifest.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this AgentManifest.
        A unique identifier for the manifest

        :param identifier: The identifier of this AgentManifest.
        :type: str
        """

        self._identifier = identifier

    @property
    def agent_type(self):
        """
        Gets the agent_type of this AgentManifest.
        The type of the agent binary, e.g., 'minifi-java' or 'minifi-cpp'

        :return: The agent_type of this AgentManifest.
        :rtype: str
        """
        return self._agent_type

    @agent_type.setter
    def agent_type(self, agent_type):
        """
        Sets the agent_type of this AgentManifest.
        The type of the agent binary, e.g., 'minifi-java' or 'minifi-cpp'

        :param agent_type: The agent_type of this AgentManifest.
        :type: str
        """

        self._agent_type = agent_type

    @property
    def version(self):
        """
        Gets the version of this AgentManifest.
        The version of the agent binary, e.g., '1.0.1'

        :return: The version of this AgentManifest.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this AgentManifest.
        The version of the agent binary, e.g., '1.0.1'

        :param version: The version of this AgentManifest.
        :type: str
        """

        self._version = version

    @property
    def build_info(self):
        """
        Gets the build_info of this AgentManifest.
        Build summary for this agent binary

        :return: The build_info of this AgentManifest.
        :rtype: BuildInfo
        """
        return self._build_info

    @build_info.setter
    def build_info(self, build_info):
        """
        Sets the build_info of this AgentManifest.
        Build summary for this agent binary

        :param build_info: The build_info of this AgentManifest.
        :type: BuildInfo
        """

        self._build_info = build_info

    @property
    def bundles(self):
        """
        Gets the bundles of this AgentManifest.
        All extension bundles included with this agent

        :return: The bundles of this AgentManifest.
        :rtype: list[Bundle]
        """
        return self._bundles

    @bundles.setter
    def bundles(self, bundles):
        """
        Sets the bundles of this AgentManifest.
        All extension bundles included with this agent

        :param bundles: The bundles of this AgentManifest.
        :type: list[Bundle]
        """

        self._bundles = bundles

    @property
    def component_manifest(self):
        """
        Gets the component_manifest of this AgentManifest.
        All components of this agent that are not part of a bundle.

        :return: The component_manifest of this AgentManifest.
        :rtype: ComponentManifest
        """
        return self._component_manifest

    @component_manifest.setter
    def component_manifest(self, component_manifest):
        """
        Sets the component_manifest of this AgentManifest.
        All components of this agent that are not part of a bundle.

        :param component_manifest: The component_manifest of this AgentManifest.
        :type: ComponentManifest
        """

        self._component_manifest = component_manifest

    @property
    def scheduling_defaults(self):
        """
        Gets the scheduling_defaults of this AgentManifest.
        Scheduling defaults for components defined in this manifest

        :return: The scheduling_defaults of this AgentManifest.
        :rtype: SchedulingDefaults
        """
        return self._scheduling_defaults

    @scheduling_defaults.setter
    def scheduling_defaults(self, scheduling_defaults):
        """
        Sets the scheduling_defaults of this AgentManifest.
        Scheduling defaults for components defined in this manifest

        :param scheduling_defaults: The scheduling_defaults of this AgentManifest.
        :type: SchedulingDefaults
        """

        self._scheduling_defaults = scheduling_defaults

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AgentManifest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
