# coding: utf-8

"""
    Cloudera Edge Flow Manager REST API

    This REST API provides remote access to the EFM Server.                                             Endpoints that are marked as [BETA] are subject to change in future releases of the application without backwards compatibility and without a major version change.

    OpenAPI spec version: 1.0.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FlowSnapshot(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'flow_uri': 'FlowUri',
        'versioned_flow_snapshot': 'VersionedFlowSnapshot'
    }

    attribute_map = {
        'flow_uri': 'flowUri',
        'versioned_flow_snapshot': 'versionedFlowSnapshot'
    }

    def __init__(self, flow_uri=None, versioned_flow_snapshot=None):
        """
        FlowSnapshot - a model defined in Swagger
        """

        self._flow_uri = None
        self._versioned_flow_snapshot = None

        if flow_uri is not None:
          self.flow_uri = flow_uri
        if versioned_flow_snapshot is not None:
          self.versioned_flow_snapshot = versioned_flow_snapshot

    @property
    def flow_uri(self):
        """
        Gets the flow_uri of this FlowSnapshot.
        The flow URI containing the location of the flow in a NiFi Registry instance

        :return: The flow_uri of this FlowSnapshot.
        :rtype: FlowUri
        """
        return self._flow_uri

    @flow_uri.setter
    def flow_uri(self, flow_uri):
        """
        Sets the flow_uri of this FlowSnapshot.
        The flow URI containing the location of the flow in a NiFi Registry instance

        :param flow_uri: The flow_uri of this FlowSnapshot.
        :type: FlowUri
        """

        self._flow_uri = flow_uri

    @property
    def versioned_flow_snapshot(self):
        """
        Gets the versioned_flow_snapshot of this FlowSnapshot.
        The snapshot containing the contents of the flow

        :return: The versioned_flow_snapshot of this FlowSnapshot.
        :rtype: VersionedFlowSnapshot
        """
        return self._versioned_flow_snapshot

    @versioned_flow_snapshot.setter
    def versioned_flow_snapshot(self, versioned_flow_snapshot):
        """
        Sets the versioned_flow_snapshot of this FlowSnapshot.
        The snapshot containing the contents of the flow

        :param versioned_flow_snapshot: The versioned_flow_snapshot of this FlowSnapshot.
        :type: VersionedFlowSnapshot
        """

        self._versioned_flow_snapshot = versioned_flow_snapshot

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FlowSnapshot):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
