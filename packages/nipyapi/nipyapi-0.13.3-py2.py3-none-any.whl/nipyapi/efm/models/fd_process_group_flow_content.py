# coding: utf-8

"""
    Cloudera Edge Flow Manager REST API

    This REST API provides remote access to the EFM Server.                                             Endpoints that are marked as [BETA] are subject to change in future releases of the application without backwards compatibility and without a major version change.

    OpenAPI spec version: 1.0.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FDProcessGroupFlowContent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'str',
        'name': 'str',
        'comments': 'str',
        'position': 'Position',
        'uri': 'str',
        'revision': 'FDRevision',
        'process_groups': 'list[FDProcessGroupFlowContent]',
        'remote_process_groups': 'list[FDRemoteProcessGroup]',
        'processors': 'list[FDProcessor]',
        'connections': 'list[FDConnection]',
        'funnels': 'list[FDFunnel]',
        'controller_services': 'list[FDControllerService]',
        'group_identifier': 'str'
    }

    attribute_map = {
        'identifier': 'identifier',
        'name': 'name',
        'comments': 'comments',
        'position': 'position',
        'uri': 'uri',
        'revision': 'revision',
        'process_groups': 'processGroups',
        'remote_process_groups': 'remoteProcessGroups',
        'processors': 'processors',
        'connections': 'connections',
        'funnels': 'funnels',
        'controller_services': 'controllerServices',
        'group_identifier': 'groupIdentifier'
    }

    def __init__(self, identifier=None, name=None, comments=None, position=None, uri=None, revision=None, process_groups=None, remote_process_groups=None, processors=None, connections=None, funnels=None, controller_services=None, group_identifier=None):
        """
        FDProcessGroupFlowContent - a model defined in Swagger
        """

        self._identifier = None
        self._name = None
        self._comments = None
        self._position = None
        self._uri = None
        self._revision = None
        self._process_groups = None
        self._remote_process_groups = None
        self._processors = None
        self._connections = None
        self._funnels = None
        self._controller_services = None
        self._group_identifier = None

        if identifier is not None:
          self.identifier = identifier
        if name is not None:
          self.name = name
        if comments is not None:
          self.comments = comments
        if position is not None:
          self.position = position
        if uri is not None:
          self.uri = uri
        if revision is not None:
          self.revision = revision
        if process_groups is not None:
          self.process_groups = process_groups
        if remote_process_groups is not None:
          self.remote_process_groups = remote_process_groups
        if processors is not None:
          self.processors = processors
        if connections is not None:
          self.connections = connections
        if funnels is not None:
          self.funnels = funnels
        if controller_services is not None:
          self.controller_services = controller_services
        if group_identifier is not None:
          self.group_identifier = group_identifier

    @property
    def identifier(self):
        """
        Gets the identifier of this FDProcessGroupFlowContent.
        The component's unique identifier

        :return: The identifier of this FDProcessGroupFlowContent.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this FDProcessGroupFlowContent.
        The component's unique identifier

        :param identifier: The identifier of this FDProcessGroupFlowContent.
        :type: str
        """

        self._identifier = identifier

    @property
    def name(self):
        """
        Gets the name of this FDProcessGroupFlowContent.
        The component's name

        :return: The name of this FDProcessGroupFlowContent.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this FDProcessGroupFlowContent.
        The component's name

        :param name: The name of this FDProcessGroupFlowContent.
        :type: str
        """

        self._name = name

    @property
    def comments(self):
        """
        Gets the comments of this FDProcessGroupFlowContent.
        The user-supplied comments for the component

        :return: The comments of this FDProcessGroupFlowContent.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """
        Sets the comments of this FDProcessGroupFlowContent.
        The user-supplied comments for the component

        :param comments: The comments of this FDProcessGroupFlowContent.
        :type: str
        """

        self._comments = comments

    @property
    def position(self):
        """
        Gets the position of this FDProcessGroupFlowContent.
        The component's position on the graph

        :return: The position of this FDProcessGroupFlowContent.
        :rtype: Position
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this FDProcessGroupFlowContent.
        The component's position on the graph

        :param position: The position of this FDProcessGroupFlowContent.
        :type: Position
        """

        self._position = position

    @property
    def uri(self):
        """
        Gets the uri of this FDProcessGroupFlowContent.
        The URI for future requests to the component.

        :return: The uri of this FDProcessGroupFlowContent.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this FDProcessGroupFlowContent.
        The URI for future requests to the component.

        :param uri: The uri of this FDProcessGroupFlowContent.
        :type: str
        """

        self._uri = uri

    @property
    def revision(self):
        """
        Gets the revision of this FDProcessGroupFlowContent.
        The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.

        :return: The revision of this FDProcessGroupFlowContent.
        :rtype: FDRevision
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """
        Sets the revision of this FDProcessGroupFlowContent.
        The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.

        :param revision: The revision of this FDProcessGroupFlowContent.
        :type: FDRevision
        """

        self._revision = revision

    @property
    def process_groups(self):
        """
        Gets the process_groups of this FDProcessGroupFlowContent.
        The child Process Groups

        :return: The process_groups of this FDProcessGroupFlowContent.
        :rtype: list[FDProcessGroupFlowContent]
        """
        return self._process_groups

    @process_groups.setter
    def process_groups(self, process_groups):
        """
        Sets the process_groups of this FDProcessGroupFlowContent.
        The child Process Groups

        :param process_groups: The process_groups of this FDProcessGroupFlowContent.
        :type: list[FDProcessGroupFlowContent]
        """

        self._process_groups = process_groups

    @property
    def remote_process_groups(self):
        """
        Gets the remote_process_groups of this FDProcessGroupFlowContent.
        The Remote Process Groups

        :return: The remote_process_groups of this FDProcessGroupFlowContent.
        :rtype: list[FDRemoteProcessGroup]
        """
        return self._remote_process_groups

    @remote_process_groups.setter
    def remote_process_groups(self, remote_process_groups):
        """
        Sets the remote_process_groups of this FDProcessGroupFlowContent.
        The Remote Process Groups

        :param remote_process_groups: The remote_process_groups of this FDProcessGroupFlowContent.
        :type: list[FDRemoteProcessGroup]
        """

        self._remote_process_groups = remote_process_groups

    @property
    def processors(self):
        """
        Gets the processors of this FDProcessGroupFlowContent.
        The Processors

        :return: The processors of this FDProcessGroupFlowContent.
        :rtype: list[FDProcessor]
        """
        return self._processors

    @processors.setter
    def processors(self, processors):
        """
        Sets the processors of this FDProcessGroupFlowContent.
        The Processors

        :param processors: The processors of this FDProcessGroupFlowContent.
        :type: list[FDProcessor]
        """

        self._processors = processors

    @property
    def connections(self):
        """
        Gets the connections of this FDProcessGroupFlowContent.
        The Connections

        :return: The connections of this FDProcessGroupFlowContent.
        :rtype: list[FDConnection]
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """
        Sets the connections of this FDProcessGroupFlowContent.
        The Connections

        :param connections: The connections of this FDProcessGroupFlowContent.
        :type: list[FDConnection]
        """

        self._connections = connections

    @property
    def funnels(self):
        """
        Gets the funnels of this FDProcessGroupFlowContent.
        The Funnels

        :return: The funnels of this FDProcessGroupFlowContent.
        :rtype: list[FDFunnel]
        """
        return self._funnels

    @funnels.setter
    def funnels(self, funnels):
        """
        Sets the funnels of this FDProcessGroupFlowContent.
        The Funnels

        :param funnels: The funnels of this FDProcessGroupFlowContent.
        :type: list[FDFunnel]
        """

        self._funnels = funnels

    @property
    def controller_services(self):
        """
        Gets the controller_services of this FDProcessGroupFlowContent.
        The Controller Services

        :return: The controller_services of this FDProcessGroupFlowContent.
        :rtype: list[FDControllerService]
        """
        return self._controller_services

    @controller_services.setter
    def controller_services(self, controller_services):
        """
        Sets the controller_services of this FDProcessGroupFlowContent.
        The Controller Services

        :param controller_services: The controller_services of this FDProcessGroupFlowContent.
        :type: list[FDControllerService]
        """

        self._controller_services = controller_services

    @property
    def group_identifier(self):
        """
        Gets the group_identifier of this FDProcessGroupFlowContent.
        The ID of the Process Group that this component belongs to

        :return: The group_identifier of this FDProcessGroupFlowContent.
        :rtype: str
        """
        return self._group_identifier

    @group_identifier.setter
    def group_identifier(self, group_identifier):
        """
        Sets the group_identifier of this FDProcessGroupFlowContent.
        The ID of the Process Group that this component belongs to

        :param group_identifier: The group_identifier of this FDProcessGroupFlowContent.
        :type: str
        """

        self._group_identifier = group_identifier

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FDProcessGroupFlowContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
