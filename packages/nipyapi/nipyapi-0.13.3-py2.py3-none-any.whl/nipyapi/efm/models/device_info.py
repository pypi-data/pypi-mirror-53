# coding: utf-8

"""
    Cloudera Edge Flow Manager REST API

    This REST API provides remote access to the EFM Server.                                             Endpoints that are marked as [BETA] are subject to change in future releases of the application without backwards compatibility and without a major version change.

    OpenAPI spec version: 1.0.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeviceInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'str',
        'system_info': 'SystemInfo',
        'network_info': 'NetworkInfo'
    }

    attribute_map = {
        'identifier': 'identifier',
        'system_info': 'systemInfo',
        'network_info': 'networkInfo'
    }

    def __init__(self, identifier=None, system_info=None, network_info=None):
        """
        DeviceInfo - a model defined in Swagger
        """

        self._identifier = None
        self._system_info = None
        self._network_info = None

        self.identifier = identifier
        if system_info is not None:
          self.system_info = system_info
        if network_info is not None:
          self.network_info = network_info

    @property
    def identifier(self):
        """
        Gets the identifier of this DeviceInfo.
        A unique, long-lived identifier for the MiNiFi-enabled device

        :return: The identifier of this DeviceInfo.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this DeviceInfo.
        A unique, long-lived identifier for the MiNiFi-enabled device

        :param identifier: The identifier of this DeviceInfo.
        :type: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier

    @property
    def system_info(self):
        """
        Gets the system_info of this DeviceInfo.
        Metadata for the device hardware and operating system

        :return: The system_info of this DeviceInfo.
        :rtype: SystemInfo
        """
        return self._system_info

    @system_info.setter
    def system_info(self, system_info):
        """
        Sets the system_info of this DeviceInfo.
        Metadata for the device hardware and operating system

        :param system_info: The system_info of this DeviceInfo.
        :type: SystemInfo
        """

        self._system_info = system_info

    @property
    def network_info(self):
        """
        Gets the network_info of this DeviceInfo.
        Metadata for the network interface of this device

        :return: The network_info of this DeviceInfo.
        :rtype: NetworkInfo
        """
        return self._network_info

    @network_info.setter
    def network_info(self, network_info):
        """
        Sets the network_info of this DeviceInfo.
        Metadata for the network interface of this device

        :param network_info: The network_info of this DeviceInfo.
        :type: NetworkInfo
        """

        self._network_info = network_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeviceInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
