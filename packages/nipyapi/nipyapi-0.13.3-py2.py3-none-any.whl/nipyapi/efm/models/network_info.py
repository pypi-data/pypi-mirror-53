# coding: utf-8

"""
    Cloudera Edge Flow Manager REST API

    This REST API provides remote access to the EFM Server.                                             Endpoints that are marked as [BETA] are subject to change in future releases of the application without backwards compatibility and without a major version change.

    OpenAPI spec version: 1.0.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NetworkInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'str',
        'hostname': 'str',
        'ip_address': 'str'
    }

    attribute_map = {
        'device_id': 'deviceId',
        'hostname': 'hostname',
        'ip_address': 'ipAddress'
    }

    def __init__(self, device_id=None, hostname=None, ip_address=None):
        """
        NetworkInfo - a model defined in Swagger
        """

        self._device_id = None
        self._hostname = None
        self._ip_address = None

        if device_id is not None:
          self.device_id = device_id
        if hostname is not None:
          self.hostname = hostname
        if ip_address is not None:
          self.ip_address = ip_address

    @property
    def device_id(self):
        """
        Gets the device_id of this NetworkInfo.
        The device network interface ID

        :return: The device_id of this NetworkInfo.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """
        Sets the device_id of this NetworkInfo.
        The device network interface ID

        :param device_id: The device_id of this NetworkInfo.
        :type: str
        """
        if device_id is not None and len(device_id) > 200:
            raise ValueError("Invalid value for `device_id`, length must be less than or equal to `200`")
        if device_id is not None and len(device_id) < 0:
            raise ValueError("Invalid value for `device_id`, length must be greater than or equal to `0`")

        self._device_id = device_id

    @property
    def hostname(self):
        """
        Gets the hostname of this NetworkInfo.
        The device network hostname

        :return: The hostname of this NetworkInfo.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """
        Sets the hostname of this NetworkInfo.
        The device network hostname

        :param hostname: The hostname of this NetworkInfo.
        :type: str
        """

        self._hostname = hostname

    @property
    def ip_address(self):
        """
        Gets the ip_address of this NetworkInfo.
        The device network interface IP Address (v4 or v6)

        :return: The ip_address of this NetworkInfo.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """
        Sets the ip_address of this NetworkInfo.
        The device network interface IP Address (v4 or v6)

        :param ip_address: The ip_address of this NetworkInfo.
        :type: str
        """
        if ip_address is not None and len(ip_address) > 45:
            raise ValueError("Invalid value for `ip_address`, length must be less than or equal to `45`")
        if ip_address is not None and len(ip_address) < 0:
            raise ValueError("Invalid value for `ip_address`, length must be greater than or equal to `0`")

        self._ip_address = ip_address

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NetworkInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
