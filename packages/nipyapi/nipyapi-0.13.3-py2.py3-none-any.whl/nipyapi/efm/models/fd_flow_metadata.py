# coding: utf-8

"""
    Cloudera Edge Flow Manager REST API

    This REST API provides remote access to the EFM Server.                                             Endpoints that are marked as [BETA] are subject to change in future releases of the application without backwards compatibility and without a major version change.

    OpenAPI spec version: 1.0.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FDFlowMetadata(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'str',
        'agent_class': 'str',
        'root_process_group_identifier': 'str',
        'created': 'int',
        'updated': 'int'
    }

    attribute_map = {
        'identifier': 'identifier',
        'agent_class': 'agentClass',
        'root_process_group_identifier': 'rootProcessGroupIdentifier',
        'created': 'created',
        'updated': 'updated'
    }

    def __init__(self, identifier=None, agent_class=None, root_process_group_identifier=None, created=None, updated=None):
        """
        FDFlowMetadata - a model defined in Swagger
        """

        self._identifier = None
        self._agent_class = None
        self._root_process_group_identifier = None
        self._created = None
        self._updated = None

        if identifier is not None:
          self.identifier = identifier
        if agent_class is not None:
          self.agent_class = agent_class
        if root_process_group_identifier is not None:
          self.root_process_group_identifier = root_process_group_identifier
        self.created = created
        self.updated = updated

    @property
    def identifier(self):
        """
        Gets the identifier of this FDFlowMetadata.
        The identifier of the flow

        :return: The identifier of this FDFlowMetadata.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this FDFlowMetadata.
        The identifier of the flow

        :param identifier: The identifier of this FDFlowMetadata.
        :type: str
        """

        self._identifier = identifier

    @property
    def agent_class(self):
        """
        Gets the agent_class of this FDFlowMetadata.
        The name of the agent class this flow is for

        :return: The agent_class of this FDFlowMetadata.
        :rtype: str
        """
        return self._agent_class

    @agent_class.setter
    def agent_class(self, agent_class):
        """
        Sets the agent_class of this FDFlowMetadata.
        The name of the agent class this flow is for

        :param agent_class: The agent_class of this FDFlowMetadata.
        :type: str
        """

        self._agent_class = agent_class

    @property
    def root_process_group_identifier(self):
        """
        Gets the root_process_group_identifier of this FDFlowMetadata.
        The identifier of the root process group for this flow

        :return: The root_process_group_identifier of this FDFlowMetadata.
        :rtype: str
        """
        return self._root_process_group_identifier

    @root_process_group_identifier.setter
    def root_process_group_identifier(self, root_process_group_identifier):
        """
        Sets the root_process_group_identifier of this FDFlowMetadata.
        The identifier of the root process group for this flow

        :param root_process_group_identifier: The root_process_group_identifier of this FDFlowMetadata.
        :type: str
        """

        self._root_process_group_identifier = root_process_group_identifier

    @property
    def created(self):
        """
        Gets the created of this FDFlowMetadata.
        The timestamp the flow was created

        :return: The created of this FDFlowMetadata.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this FDFlowMetadata.
        The timestamp the flow was created

        :param created: The created of this FDFlowMetadata.
        :type: int
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def updated(self):
        """
        Gets the updated of this FDFlowMetadata.
        The timestamp the flow was updated

        :return: The updated of this FDFlowMetadata.
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this FDFlowMetadata.
        The timestamp the flow was updated

        :param updated: The updated of this FDFlowMetadata.
        :type: int
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")

        self._updated = updated

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FDFlowMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
