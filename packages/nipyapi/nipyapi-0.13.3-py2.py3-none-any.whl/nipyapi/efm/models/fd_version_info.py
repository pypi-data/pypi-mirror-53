# coding: utf-8

"""
    Cloudera Edge Flow Manager REST API

    This REST API provides remote access to the EFM Server.                                             Endpoints that are marked as [BETA] are subject to change in future releases of the application without backwards compatibility and without a major version change.

    OpenAPI spec version: 1.0.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FDVersionInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'registry_url': 'str',
        'registry_bucket_id': 'str',
        'registry_flow_id': 'str',
        'registry_version': 'int',
        'last_published': 'int',
        'last_published_by': 'str',
        'dirty': 'bool'
    }

    attribute_map = {
        'registry_url': 'registryUrl',
        'registry_bucket_id': 'registryBucketId',
        'registry_flow_id': 'registryFlowId',
        'registry_version': 'registryVersion',
        'last_published': 'lastPublished',
        'last_published_by': 'lastPublishedBy',
        'dirty': 'dirty'
    }

    def __init__(self, registry_url=None, registry_bucket_id=None, registry_flow_id=None, registry_version=None, last_published=None, last_published_by=None, dirty=None):
        """
        FDVersionInfo - a model defined in Swagger
        """

        self._registry_url = None
        self._registry_bucket_id = None
        self._registry_flow_id = None
        self._registry_version = None
        self._last_published = None
        self._last_published_by = None
        self._dirty = None

        if registry_url is not None:
          self.registry_url = registry_url
        if registry_bucket_id is not None:
          self.registry_bucket_id = registry_bucket_id
        if registry_flow_id is not None:
          self.registry_flow_id = registry_flow_id
        self.registry_version = registry_version
        self.last_published = last_published
        if last_published_by is not None:
          self.last_published_by = last_published_by
        if dirty is not None:
          self.dirty = dirty

    @property
    def registry_url(self):
        """
        Gets the registry_url of this FDVersionInfo.
        The URL of the NiFi Registry instance that this flow was last published to

        :return: The registry_url of this FDVersionInfo.
        :rtype: str
        """
        return self._registry_url

    @registry_url.setter
    def registry_url(self, registry_url):
        """
        Sets the registry_url of this FDVersionInfo.
        The URL of the NiFi Registry instance that this flow was last published to

        :param registry_url: The registry_url of this FDVersionInfo.
        :type: str
        """

        self._registry_url = registry_url

    @property
    def registry_bucket_id(self):
        """
        Gets the registry_bucket_id of this FDVersionInfo.
        The bucket id in the NiFi Registry instance that this flow was last published to

        :return: The registry_bucket_id of this FDVersionInfo.
        :rtype: str
        """
        return self._registry_bucket_id

    @registry_bucket_id.setter
    def registry_bucket_id(self, registry_bucket_id):
        """
        Sets the registry_bucket_id of this FDVersionInfo.
        The bucket id in the NiFi Registry instance that this flow was last published to

        :param registry_bucket_id: The registry_bucket_id of this FDVersionInfo.
        :type: str
        """

        self._registry_bucket_id = registry_bucket_id

    @property
    def registry_flow_id(self):
        """
        Gets the registry_flow_id of this FDVersionInfo.
        The flow id in the NiFi Registry instance that this flow was last published to

        :return: The registry_flow_id of this FDVersionInfo.
        :rtype: str
        """
        return self._registry_flow_id

    @registry_flow_id.setter
    def registry_flow_id(self, registry_flow_id):
        """
        Sets the registry_flow_id of this FDVersionInfo.
        The flow id in the NiFi Registry instance that this flow was last published to

        :param registry_flow_id: The registry_flow_id of this FDVersionInfo.
        :type: str
        """

        self._registry_flow_id = registry_flow_id

    @property
    def registry_version(self):
        """
        Gets the registry_version of this FDVersionInfo.
        The version in the NiFi Registry instance that this flow was last published to

        :return: The registry_version of this FDVersionInfo.
        :rtype: int
        """
        return self._registry_version

    @registry_version.setter
    def registry_version(self, registry_version):
        """
        Sets the registry_version of this FDVersionInfo.
        The version in the NiFi Registry instance that this flow was last published to

        :param registry_version: The registry_version of this FDVersionInfo.
        :type: int
        """
        if registry_version is None:
            raise ValueError("Invalid value for `registry_version`, must not be `None`")

        self._registry_version = registry_version

    @property
    def last_published(self):
        """
        Gets the last_published of this FDVersionInfo.
        The timestamp this flow was last published

        :return: The last_published of this FDVersionInfo.
        :rtype: int
        """
        return self._last_published

    @last_published.setter
    def last_published(self, last_published):
        """
        Sets the last_published of this FDVersionInfo.
        The timestamp this flow was last published

        :param last_published: The last_published of this FDVersionInfo.
        :type: int
        """
        if last_published is None:
            raise ValueError("Invalid value for `last_published`, must not be `None`")

        self._last_published = last_published

    @property
    def last_published_by(self):
        """
        Gets the last_published_by of this FDVersionInfo.
        The identity of the user that performed the last publish

        :return: The last_published_by of this FDVersionInfo.
        :rtype: str
        """
        return self._last_published_by

    @last_published_by.setter
    def last_published_by(self, last_published_by):
        """
        Sets the last_published_by of this FDVersionInfo.
        The identity of the user that performed the last publish

        :param last_published_by: The last_published_by of this FDVersionInfo.
        :type: str
        """

        self._last_published_by = last_published_by

    @property
    def dirty(self):
        """
        Gets the dirty of this FDVersionInfo.
        Whether or not there have been local changes since the last publish event

        :return: The dirty of this FDVersionInfo.
        :rtype: bool
        """
        return self._dirty

    @dirty.setter
    def dirty(self, dirty):
        """
        Sets the dirty of this FDVersionInfo.
        Whether or not there have been local changes since the last publish event

        :param dirty: The dirty of this FDVersionInfo.
        :type: bool
        """

        self._dirty = dirty

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FDVersionInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
