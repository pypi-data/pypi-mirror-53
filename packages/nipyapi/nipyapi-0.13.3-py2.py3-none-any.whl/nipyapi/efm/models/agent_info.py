# coding: utf-8

"""
    Cloudera Edge Flow Manager REST API

    This REST API provides remote access to the EFM Server.                                             Endpoints that are marked as [BETA] are subject to change in future releases of the application without backwards compatibility and without a major version change.

    OpenAPI spec version: 1.0.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AgentInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'str',
        'agent_class': 'str',
        'agent_manifest': 'AgentManifest',
        'status': 'AgentStatus'
    }

    attribute_map = {
        'identifier': 'identifier',
        'agent_class': 'agentClass',
        'agent_manifest': 'agentManifest',
        'status': 'status'
    }

    def __init__(self, identifier=None, agent_class=None, agent_manifest=None, status=None):
        """
        AgentInfo - a model defined in Swagger
        """

        self._identifier = None
        self._agent_class = None
        self._agent_manifest = None
        self._status = None

        self.identifier = identifier
        if agent_class is not None:
          self.agent_class = agent_class
        if agent_manifest is not None:
          self.agent_manifest = agent_manifest
        if status is not None:
          self.status = status

    @property
    def identifier(self):
        """
        Gets the identifier of this AgentInfo.
        A unique identifier for the Agent

        :return: The identifier of this AgentInfo.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this AgentInfo.
        A unique identifier for the Agent

        :param identifier: The identifier of this AgentInfo.
        :type: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier

    @property
    def agent_class(self):
        """
        Gets the agent_class of this AgentInfo.
        The class or category label of the agent, e.g., 'sensor-collector'

        :return: The agent_class of this AgentInfo.
        :rtype: str
        """
        return self._agent_class

    @agent_class.setter
    def agent_class(self, agent_class):
        """
        Sets the agent_class of this AgentInfo.
        The class or category label of the agent, e.g., 'sensor-collector'

        :param agent_class: The agent_class of this AgentInfo.
        :type: str
        """

        self._agent_class = agent_class

    @property
    def agent_manifest(self):
        """
        Gets the agent_manifest of this AgentInfo.
        The specification of the agent's capabilities

        :return: The agent_manifest of this AgentInfo.
        :rtype: AgentManifest
        """
        return self._agent_manifest

    @agent_manifest.setter
    def agent_manifest(self, agent_manifest):
        """
        Sets the agent_manifest of this AgentInfo.
        The specification of the agent's capabilities

        :param agent_manifest: The agent_manifest of this AgentInfo.
        :type: AgentManifest
        """

        self._agent_manifest = agent_manifest

    @property
    def status(self):
        """
        Gets the status of this AgentInfo.
        A summary of the runtime status of the agent

        :return: The status of this AgentInfo.
        :rtype: AgentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this AgentInfo.
        A summary of the runtime status of the agent

        :param status: The status of this AgentInfo.
        :type: AgentStatus
        """

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AgentInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
