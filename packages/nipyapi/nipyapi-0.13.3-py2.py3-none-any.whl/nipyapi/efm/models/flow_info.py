# coding: utf-8

"""
    Cloudera Edge Flow Manager REST API

    This REST API provides remote access to the EFM Server.                                             Endpoints that are marked as [BETA] are subject to change in future releases of the application without backwards compatibility and without a major version change.

    OpenAPI spec version: 1.0.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FlowInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'flow_id': 'str',
        'versioned_flow_snapshot_uri': 'FlowUri',
        'components': 'dict(str, ComponentStatus)',
        'queues': 'dict(str, FlowQueueStatus)'
    }

    attribute_map = {
        'flow_id': 'flowId',
        'versioned_flow_snapshot_uri': 'versionedFlowSnapshotURI',
        'components': 'components',
        'queues': 'queues'
    }

    def __init__(self, flow_id=None, versioned_flow_snapshot_uri=None, components=None, queues=None):
        """
        FlowInfo - a model defined in Swagger
        """

        self._flow_id = None
        self._versioned_flow_snapshot_uri = None
        self._components = None
        self._queues = None

        self.flow_id = flow_id
        if versioned_flow_snapshot_uri is not None:
          self.versioned_flow_snapshot_uri = versioned_flow_snapshot_uri
        if components is not None:
          self.components = components
        if queues is not None:
          self.queues = queues

    @property
    def flow_id(self):
        """
        Gets the flow_id of this FlowInfo.
        A unique identifier of the flow currently deployed on the agent

        :return: The flow_id of this FlowInfo.
        :rtype: str
        """
        return self._flow_id

    @flow_id.setter
    def flow_id(self, flow_id):
        """
        Sets the flow_id of this FlowInfo.
        A unique identifier of the flow currently deployed on the agent

        :param flow_id: The flow_id of this FlowInfo.
        :type: str
        """
        if flow_id is None:
            raise ValueError("Invalid value for `flow_id`, must not be `None`")

        self._flow_id = flow_id

    @property
    def versioned_flow_snapshot_uri(self):
        """
        Gets the versioned_flow_snapshot_uri of this FlowInfo.
        The URI to the Versioned Flow Snapshot, when the flow corresponds to a Versioned Flow in a NiFi Registry.

        :return: The versioned_flow_snapshot_uri of this FlowInfo.
        :rtype: FlowUri
        """
        return self._versioned_flow_snapshot_uri

    @versioned_flow_snapshot_uri.setter
    def versioned_flow_snapshot_uri(self, versioned_flow_snapshot_uri):
        """
        Sets the versioned_flow_snapshot_uri of this FlowInfo.
        The URI to the Versioned Flow Snapshot, when the flow corresponds to a Versioned Flow in a NiFi Registry.

        :param versioned_flow_snapshot_uri: The versioned_flow_snapshot_uri of this FlowInfo.
        :type: FlowUri
        """

        self._versioned_flow_snapshot_uri = versioned_flow_snapshot_uri

    @property
    def components(self):
        """
        Gets the components of this FlowInfo.
        Status and for each component that is part of the flow (e.g., processors)

        :return: The components of this FlowInfo.
        :rtype: dict(str, ComponentStatus)
        """
        return self._components

    @components.setter
    def components(self, components):
        """
        Sets the components of this FlowInfo.
        Status and for each component that is part of the flow (e.g., processors)

        :param components: The components of this FlowInfo.
        :type: dict(str, ComponentStatus)
        """

        self._components = components

    @property
    def queues(self):
        """
        Gets the queues of this FlowInfo.
        Status and metrics for each flow connection queue

        :return: The queues of this FlowInfo.
        :rtype: dict(str, FlowQueueStatus)
        """
        return self._queues

    @queues.setter
    def queues(self, queues):
        """
        Sets the queues of this FlowInfo.
        Status and metrics for each flow connection queue

        :param queues: The queues of this FlowInfo.
        :type: dict(str, FlowQueueStatus)
        """

        self._queues = queues

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FlowInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
