# coding: utf-8

"""
    Cloudera Edge Flow Manager REST API

    This REST API provides remote access to the EFM Server.                                             Endpoints that are marked as [BETA] are subject to change in future releases of the application without backwards compatibility and without a major version change.

    OpenAPI spec version: 1.0.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Operation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'str',
        'operation': 'str',
        'operand': 'str',
        'args': 'dict(str, str)',
        'dependencies': 'list[str]',
        'target_agent_id': 'str',
        'state': 'str',
        'created_by': 'str',
        'created': 'int',
        'updated': 'int'
    }

    attribute_map = {
        'identifier': 'identifier',
        'operation': 'operation',
        'operand': 'operand',
        'args': 'args',
        'dependencies': 'dependencies',
        'target_agent_id': 'targetAgentId',
        'state': 'state',
        'created_by': 'createdBy',
        'created': 'created',
        'updated': 'updated'
    }

    def __init__(self, identifier=None, operation=None, operand=None, args=None, dependencies=None, target_agent_id=None, state=None, created_by=None, created=None, updated=None):
        """
        Operation - a model defined in Swagger
        """

        self._identifier = None
        self._operation = None
        self._operand = None
        self._args = None
        self._dependencies = None
        self._target_agent_id = None
        self._state = None
        self._created_by = None
        self._created = None
        self._updated = None

        if identifier is not None:
          self.identifier = identifier
        self.operation = operation
        if operand is not None:
          self.operand = operand
        if args is not None:
          self.args = args
        if dependencies is not None:
          self.dependencies = dependencies
        if target_agent_id is not None:
          self.target_agent_id = target_agent_id
        self.state = state
        if created_by is not None:
          self.created_by = created_by
        if created is not None:
          self.created = created
        if updated is not None:
          self.updated = updated

    @property
    def identifier(self):
        """
        Gets the identifier of this Operation.
        A unique identifier for the operation

        :return: The identifier of this Operation.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this Operation.
        A unique identifier for the operation

        :param identifier: The identifier of this Operation.
        :type: str
        """

        self._identifier = identifier

    @property
    def operation(self):
        """
        Gets the operation of this Operation.
        The type of operation

        :return: The operation of this Operation.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """
        Sets the operation of this Operation.
        The type of operation

        :param operation: The operation of this Operation.
        :type: str
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")
        allowed_values = ["ACKNOWLEDGE", "HEARTBEAT", "CLEAR", "DESCRIBE", "UPDATE", "RESTART", "START", "STOP"]
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def operand(self):
        """
        Gets the operand of this Operation.
        The primary operand of the operation

        :return: The operand of this Operation.
        :rtype: str
        """
        return self._operand

    @operand.setter
    def operand(self, operand):
        """
        Sets the operand of this Operation.
        The primary operand of the operation

        :param operand: The operand of this Operation.
        :type: str
        """

        self._operand = operand

    @property
    def args(self):
        """
        Gets the args of this Operation.
        If the operation requires arguments 

        :return: The args of this Operation.
        :rtype: dict(str, str)
        """
        return self._args

    @args.setter
    def args(self, args):
        """
        Sets the args of this Operation.
        If the operation requires arguments 

        :param args: The args of this Operation.
        :type: dict(str, str)
        """

        self._args = args

    @property
    def dependencies(self):
        """
        Gets the dependencies of this Operation.
        Optional set of operation ids that this operation depends on. Executing this operation is conditional on the success of all dependency operations.

        :return: The dependencies of this Operation.
        :rtype: list[str]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """
        Sets the dependencies of this Operation.
        Optional set of operation ids that this operation depends on. Executing this operation is conditional on the success of all dependency operations.

        :param dependencies: The dependencies of this Operation.
        :type: list[str]
        """

        self._dependencies = dependencies

    @property
    def target_agent_id(self):
        """
        Gets the target_agent_id of this Operation.
        The identifier of the agent to which the operation applies

        :return: The target_agent_id of this Operation.
        :rtype: str
        """
        return self._target_agent_id

    @target_agent_id.setter
    def target_agent_id(self, target_agent_id):
        """
        Sets the target_agent_id of this Operation.
        The identifier of the agent to which the operation applies

        :param target_agent_id: The target_agent_id of this Operation.
        :type: str
        """

        self._target_agent_id = target_agent_id

    @property
    def state(self):
        """
        Gets the state of this Operation.
        The current state of the operation

        :return: The state of this Operation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Operation.
        The current state of the operation

        :param state: The state of this Operation.
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")
        allowed_values = ["NEW", "READY", "QUEUED", "DEPLOYED", "DONE", "FAILED", "CANCELLED"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def created_by(self):
        """
        Gets the created_by of this Operation.
        The verified identity of the C2 server client that created the operation

        :return: The created_by of this Operation.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """
        Sets the created_by of this Operation.
        The verified identity of the C2 server client that created the operation

        :param created_by: The created_by of this Operation.
        :type: str
        """

        self._created_by = created_by

    @property
    def created(self):
        """
        Gets the created of this Operation.
        The time (in milliseconds since Epoch) that this operation was created

        :return: The created of this Operation.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Operation.
        The time (in milliseconds since Epoch) that this operation was created

        :param created: The created of this Operation.
        :type: int
        """

        self._created = created

    @property
    def updated(self):
        """
        Gets the updated of this Operation.
        The time (in milliseconds since Epoch) that this operation was last updated

        :return: The updated of this Operation.
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this Operation.
        The time (in milliseconds since Epoch) that this operation was last updated

        :param updated: The updated of this Operation.
        :type: int
        """

        self._updated = updated

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Operation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
