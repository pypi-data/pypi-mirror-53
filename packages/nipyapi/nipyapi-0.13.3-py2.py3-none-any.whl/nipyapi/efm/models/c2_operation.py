# coding: utf-8

"""
    Cloudera Edge Flow Manager REST API

    This REST API provides remote access to the EFM Server.                                             Endpoints that are marked as [BETA] are subject to change in future releases of the application without backwards compatibility and without a major version change.

    OpenAPI spec version: 1.0.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class C2Operation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'str',
        'operation': 'str',
        'operand': 'str',
        'args': 'dict(str, str)',
        'dependencies': 'list[str]'
    }

    attribute_map = {
        'identifier': 'identifier',
        'operation': 'operation',
        'operand': 'operand',
        'args': 'args',
        'dependencies': 'dependencies'
    }

    def __init__(self, identifier=None, operation=None, operand=None, args=None, dependencies=None):
        """
        C2Operation - a model defined in Swagger
        """

        self._identifier = None
        self._operation = None
        self._operand = None
        self._args = None
        self._dependencies = None

        if identifier is not None:
          self.identifier = identifier
        self.operation = operation
        if operand is not None:
          self.operand = operand
        if args is not None:
          self.args = args
        if dependencies is not None:
          self.dependencies = dependencies

    @property
    def identifier(self):
        """
        Gets the identifier of this C2Operation.
        A unique identifier for the operation

        :return: The identifier of this C2Operation.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this C2Operation.
        A unique identifier for the operation

        :param identifier: The identifier of this C2Operation.
        :type: str
        """

        self._identifier = identifier

    @property
    def operation(self):
        """
        Gets the operation of this C2Operation.
        The type of operation

        :return: The operation of this C2Operation.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """
        Sets the operation of this C2Operation.
        The type of operation

        :param operation: The operation of this C2Operation.
        :type: str
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")
        allowed_values = ["ACKNOWLEDGE", "HEARTBEAT", "CLEAR", "DESCRIBE", "UPDATE", "RESTART", "START", "STOP"]
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def operand(self):
        """
        Gets the operand of this C2Operation.
        The primary operand of the operation

        :return: The operand of this C2Operation.
        :rtype: str
        """
        return self._operand

    @operand.setter
    def operand(self, operand):
        """
        Sets the operand of this C2Operation.
        The primary operand of the operation

        :param operand: The operand of this C2Operation.
        :type: str
        """

        self._operand = operand

    @property
    def args(self):
        """
        Gets the args of this C2Operation.
        If the operation requires arguments 

        :return: The args of this C2Operation.
        :rtype: dict(str, str)
        """
        return self._args

    @args.setter
    def args(self, args):
        """
        Sets the args of this C2Operation.
        If the operation requires arguments 

        :param args: The args of this C2Operation.
        :type: dict(str, str)
        """

        self._args = args

    @property
    def dependencies(self):
        """
        Gets the dependencies of this C2Operation.
        Optional set of operation ids that this operation depends on. Executing this operation is conditional on the success of all dependency operations.

        :return: The dependencies of this C2Operation.
        :rtype: list[str]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """
        Sets the dependencies of this C2Operation.
        Optional set of operation ids that this operation depends on. Executing this operation is conditional on the success of all dependency operations.

        :param dependencies: The dependencies of this C2Operation.
        :type: list[str]
        """

        self._dependencies = dependencies

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, C2Operation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
