# coding: utf-8

"""
    Cloudera Edge Flow Manager REST API

    This REST API provides remote access to the EFM Server.                                             Endpoints that are marked as [BETA] are subject to change in future releases of the application without backwards compatibility and without a major version change.

    OpenAPI spec version: 1.0.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FlowQueueStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'size': 'int',
        'size_max': 'int',
        'data_size': 'int',
        'data_size_max': 'int'
    }

    attribute_map = {
        'size': 'size',
        'size_max': 'sizeMax',
        'data_size': 'dataSize',
        'data_size_max': 'dataSizeMax'
    }

    def __init__(self, size=None, size_max=None, data_size=None, data_size_max=None):
        """
        FlowQueueStatus - a model defined in Swagger
        """

        self._size = None
        self._size_max = None
        self._data_size = None
        self._data_size_max = None

        if size is not None:
          self.size = size
        if size_max is not None:
          self.size_max = size_max
        if data_size is not None:
          self.data_size = data_size
        if data_size_max is not None:
          self.data_size_max = data_size_max

    @property
    def size(self):
        """
        Gets the size of this FlowQueueStatus.
        The number of flow files in the queue

        :return: The size of this FlowQueueStatus.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this FlowQueueStatus.
        The number of flow files in the queue

        :param size: The size of this FlowQueueStatus.
        :type: int
        """
        if size is not None and size > 9223372036854775807:
            raise ValueError("Invalid value for `size`, must be a value less than or equal to `9223372036854775807`")
        if size is not None and size < 0:
            raise ValueError("Invalid value for `size`, must be a value greater than or equal to `0`")

        self._size = size

    @property
    def size_max(self):
        """
        Gets the size_max of this FlowQueueStatus.
        The maximum number of flow files that the queue is configured to hold

        :return: The size_max of this FlowQueueStatus.
        :rtype: int
        """
        return self._size_max

    @size_max.setter
    def size_max(self, size_max):
        """
        Sets the size_max of this FlowQueueStatus.
        The maximum number of flow files that the queue is configured to hold

        :param size_max: The size_max of this FlowQueueStatus.
        :type: int
        """
        if size_max is not None and size_max > 9223372036854775807:
            raise ValueError("Invalid value for `size_max`, must be a value less than or equal to `9223372036854775807`")
        if size_max is not None and size_max < 0:
            raise ValueError("Invalid value for `size_max`, must be a value greater than or equal to `0`")

        self._size_max = size_max

    @property
    def data_size(self):
        """
        Gets the data_size of this FlowQueueStatus.
        The size (in Bytes) of all flow files in the queue

        :return: The data_size of this FlowQueueStatus.
        :rtype: int
        """
        return self._data_size

    @data_size.setter
    def data_size(self, data_size):
        """
        Sets the data_size of this FlowQueueStatus.
        The size (in Bytes) of all flow files in the queue

        :param data_size: The data_size of this FlowQueueStatus.
        :type: int
        """
        if data_size is not None and data_size > 9223372036854775807:
            raise ValueError("Invalid value for `data_size`, must be a value less than or equal to `9223372036854775807`")
        if data_size is not None and data_size < 0:
            raise ValueError("Invalid value for `data_size`, must be a value greater than or equal to `0`")

        self._data_size = data_size

    @property
    def data_size_max(self):
        """
        Gets the data_size_max of this FlowQueueStatus.
        The maximum size (in Bytes) that the queue is configured to hold

        :return: The data_size_max of this FlowQueueStatus.
        :rtype: int
        """
        return self._data_size_max

    @data_size_max.setter
    def data_size_max(self, data_size_max):
        """
        Sets the data_size_max of this FlowQueueStatus.
        The maximum size (in Bytes) that the queue is configured to hold

        :param data_size_max: The data_size_max of this FlowQueueStatus.
        :type: int
        """
        if data_size_max is not None and data_size_max > 9223372036854775807:
            raise ValueError("Invalid value for `data_size_max`, must be a value less than or equal to `9223372036854775807`")
        if data_size_max is not None and data_size_max < 0:
            raise ValueError("Invalid value for `data_size_max`, must be a value greater than or equal to `0`")

        self._data_size_max = data_size_max

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FlowQueueStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
