# coding: utf-8

"""
    Cloudera Edge Flow Manager REST API

    This REST API provides remote access to the EFM Server.                                             Endpoints that are marked as [BETA] are subject to change in future releases of the application without backwards compatibility and without a major version change.

    OpenAPI spec version: 1.0.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FlowMapping(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_class': 'str',
        'flow_id': 'str',
        'flow_uri': 'str'
    }

    attribute_map = {
        'agent_class': 'agentClass',
        'flow_id': 'flowId',
        'flow_uri': 'flowUri'
    }

    def __init__(self, agent_class=None, flow_id=None, flow_uri=None):
        """
        FlowMapping - a model defined in Swagger
        """

        self._agent_class = None
        self._flow_id = None
        self._flow_uri = None

        if agent_class is not None:
          self.agent_class = agent_class
        if flow_id is not None:
          self.flow_id = flow_id
        if flow_uri is not None:
          self.flow_uri = flow_uri

    @property
    def agent_class(self):
        """
        Gets the agent_class of this FlowMapping.
        The name of the agent class for this mapping

        :return: The agent_class of this FlowMapping.
        :rtype: str
        """
        return self._agent_class

    @agent_class.setter
    def agent_class(self, agent_class):
        """
        Sets the agent_class of this FlowMapping.
        The name of the agent class for this mapping

        :param agent_class: The agent_class of this FlowMapping.
        :type: str
        """

        self._agent_class = agent_class

    @property
    def flow_id(self):
        """
        Gets the flow_id of this FlowMapping.
        The id of the flow for this mapping

        :return: The flow_id of this FlowMapping.
        :rtype: str
        """
        return self._flow_id

    @flow_id.setter
    def flow_id(self, flow_id):
        """
        Sets the flow_id of this FlowMapping.
        The id of the flow for this mapping

        :param flow_id: The flow_id of this FlowMapping.
        :type: str
        """

        self._flow_id = flow_id

    @property
    def flow_uri(self):
        """
        Gets the flow_uri of this FlowMapping.
        The URI of the flow that this agent class is currently mapped to

        :return: The flow_uri of this FlowMapping.
        :rtype: str
        """
        return self._flow_uri

    @flow_uri.setter
    def flow_uri(self, flow_uri):
        """
        Sets the flow_uri of this FlowMapping.
        The URI of the flow that this agent class is currently mapped to

        :param flow_uri: The flow_uri of this FlowMapping.
        :type: str
        """

        self._flow_uri = flow_uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FlowMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
