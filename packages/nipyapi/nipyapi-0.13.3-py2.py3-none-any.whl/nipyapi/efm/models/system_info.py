# coding: utf-8

"""
    Cloudera Edge Flow Manager REST API

    This REST API provides remote access to the EFM Server.                                             Endpoints that are marked as [BETA] are subject to change in future releases of the application without backwards compatibility and without a major version change.

    OpenAPI spec version: 1.0.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SystemInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'machine_arch': 'str',
        'physical_mem': 'int',
        'v_cores': 'int'
    }

    attribute_map = {
        'machine_arch': 'machineArch',
        'physical_mem': 'physicalMem',
        'v_cores': 'vCores'
    }

    def __init__(self, machine_arch=None, physical_mem=None, v_cores=None):
        """
        SystemInfo - a model defined in Swagger
        """

        self._machine_arch = None
        self._physical_mem = None
        self._v_cores = None

        if machine_arch is not None:
          self.machine_arch = machine_arch
        if physical_mem is not None:
          self.physical_mem = physical_mem
        if v_cores is not None:
          self.v_cores = v_cores

    @property
    def machine_arch(self):
        """
        Gets the machine_arch of this SystemInfo.
        Machine architecture of the device, e.g., ARM, x86

        :return: The machine_arch of this SystemInfo.
        :rtype: str
        """
        return self._machine_arch

    @machine_arch.setter
    def machine_arch(self, machine_arch):
        """
        Sets the machine_arch of this SystemInfo.
        Machine architecture of the device, e.g., ARM, x86

        :param machine_arch: The machine_arch of this SystemInfo.
        :type: str
        """
        if machine_arch is not None and len(machine_arch) > 100:
            raise ValueError("Invalid value for `machine_arch`, length must be less than or equal to `100`")
        if machine_arch is not None and len(machine_arch) < 0:
            raise ValueError("Invalid value for `machine_arch`, length must be greater than or equal to `0`")

        self._machine_arch = machine_arch

    @property
    def physical_mem(self):
        """
        Gets the physical_mem of this SystemInfo.
        Size of physical memory of the device in bytes

        :return: The physical_mem of this SystemInfo.
        :rtype: int
        """
        return self._physical_mem

    @physical_mem.setter
    def physical_mem(self, physical_mem):
        """
        Sets the physical_mem of this SystemInfo.
        Size of physical memory of the device in bytes

        :param physical_mem: The physical_mem of this SystemInfo.
        :type: int
        """
        if physical_mem is not None and physical_mem > 9223372036854775807:
            raise ValueError("Invalid value for `physical_mem`, must be a value less than or equal to `9223372036854775807`")
        if physical_mem is not None and physical_mem < 0:
            raise ValueError("Invalid value for `physical_mem`, must be a value greater than or equal to `0`")

        self._physical_mem = physical_mem

    @property
    def v_cores(self):
        """
        Gets the v_cores of this SystemInfo.
        Number of virtual cores on the device

        :return: The v_cores of this SystemInfo.
        :rtype: int
        """
        return self._v_cores

    @v_cores.setter
    def v_cores(self, v_cores):
        """
        Sets the v_cores of this SystemInfo.
        Number of virtual cores on the device

        :param v_cores: The v_cores of this SystemInfo.
        :type: int
        """
        if v_cores is not None and v_cores > 2147483647:
            raise ValueError("Invalid value for `v_cores`, must be a value less than or equal to `2147483647`")
        if v_cores is not None and v_cores < 0:
            raise ValueError("Invalid value for `v_cores`, must be a value greater than or equal to `0`")

        self._v_cores = v_cores

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SystemInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
