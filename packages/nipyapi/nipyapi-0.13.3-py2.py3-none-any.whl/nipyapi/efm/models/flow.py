# coding: utf-8

"""
    Cloudera Edge Flow Manager REST API

    This REST API provides remote access to the EFM Server.                                             Endpoints that are marked as [BETA] are subject to change in future releases of the application without backwards compatibility and without a major version change.

    OpenAPI spec version: 1.0.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Flow(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'registry_url': 'str',
        'registry_bucket_id': 'str',
        'registry_flow_id': 'str',
        'registry_flow_version': 'int',
        'flow_format': 'str',
        'created': 'datetime',
        'updated': 'datetime',
        'uri': 'str',
        'flow_content': 'str'
    }

    attribute_map = {
        'id': 'id',
        'registry_url': 'registryUrl',
        'registry_bucket_id': 'registryBucketId',
        'registry_flow_id': 'registryFlowId',
        'registry_flow_version': 'registryFlowVersion',
        'flow_format': 'flowFormat',
        'created': 'created',
        'updated': 'updated',
        'uri': 'uri',
        'flow_content': 'flowContent'
    }

    def __init__(self, id=None, registry_url=None, registry_bucket_id=None, registry_flow_id=None, registry_flow_version=None, flow_format=None, created=None, updated=None, uri=None, flow_content=None):
        """
        Flow - a model defined in Swagger
        """

        self._id = None
        self._registry_url = None
        self._registry_bucket_id = None
        self._registry_flow_id = None
        self._registry_flow_version = None
        self._flow_format = None
        self._created = None
        self._updated = None
        self._uri = None
        self._flow_content = None

        self.id = id
        if registry_url is not None:
          self.registry_url = registry_url
        if registry_bucket_id is not None:
          self.registry_bucket_id = registry_bucket_id
        if registry_flow_id is not None:
          self.registry_flow_id = registry_flow_id
        if registry_flow_version is not None:
          self.registry_flow_version = registry_flow_version
        if flow_format is not None:
          self.flow_format = flow_format
        if created is not None:
          self.created = created
        if updated is not None:
          self.updated = updated
        if uri is not None:
          self.uri = uri
        if flow_content is not None:
          self.flow_content = flow_content

    @property
    def id(self):
        """
        Gets the id of this Flow.
        A unique identifier of the flow

        :return: The id of this Flow.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Flow.
        A unique identifier of the flow

        :param id: The id of this Flow.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def registry_url(self):
        """
        Gets the registry_url of this Flow.
        The URL of the NiFi Registry this flow was retrieved from, or null if the flow came from direct upload

        :return: The registry_url of this Flow.
        :rtype: str
        """
        return self._registry_url

    @registry_url.setter
    def registry_url(self, registry_url):
        """
        Sets the registry_url of this Flow.
        The URL of the NiFi Registry this flow was retrieved from, or null if the flow came from direct upload

        :param registry_url: The registry_url of this Flow.
        :type: str
        """

        self._registry_url = registry_url

    @property
    def registry_bucket_id(self):
        """
        Gets the registry_bucket_id of this Flow.
        The id of the NiFi Registry bucket this flow was retrieved from, or null if the flow came from direct upload

        :return: The registry_bucket_id of this Flow.
        :rtype: str
        """
        return self._registry_bucket_id

    @registry_bucket_id.setter
    def registry_bucket_id(self, registry_bucket_id):
        """
        Sets the registry_bucket_id of this Flow.
        The id of the NiFi Registry bucket this flow was retrieved from, or null if the flow came from direct upload

        :param registry_bucket_id: The registry_bucket_id of this Flow.
        :type: str
        """

        self._registry_bucket_id = registry_bucket_id

    @property
    def registry_flow_id(self):
        """
        Gets the registry_flow_id of this Flow.
        The id of the NiFi Registry flow this flow was retrieved from, or null if the flow came from direct upload

        :return: The registry_flow_id of this Flow.
        :rtype: str
        """
        return self._registry_flow_id

    @registry_flow_id.setter
    def registry_flow_id(self, registry_flow_id):
        """
        Sets the registry_flow_id of this Flow.
        The id of the NiFi Registry flow this flow was retrieved from, or null if the flow came from direct upload

        :param registry_flow_id: The registry_flow_id of this Flow.
        :type: str
        """

        self._registry_flow_id = registry_flow_id

    @property
    def registry_flow_version(self):
        """
        Gets the registry_flow_version of this Flow.
        The version of the NiFi Registry flow this flow was retrieved from, or null if the flow came from direct upload

        :return: The registry_flow_version of this Flow.
        :rtype: int
        """
        return self._registry_flow_version

    @registry_flow_version.setter
    def registry_flow_version(self, registry_flow_version):
        """
        Sets the registry_flow_version of this Flow.
        The version of the NiFi Registry flow this flow was retrieved from, or null if the flow came from direct upload

        :param registry_flow_version: The registry_flow_version of this Flow.
        :type: int
        """

        self._registry_flow_version = registry_flow_version

    @property
    def flow_format(self):
        """
        Gets the flow_format of this Flow.
        The format of the flow indicating how the content should be interpreted when retrieving the flow content

        :return: The flow_format of this Flow.
        :rtype: str
        """
        return self._flow_format

    @flow_format.setter
    def flow_format(self, flow_format):
        """
        Sets the flow_format of this Flow.
        The format of the flow indicating how the content should be interpreted when retrieving the flow content

        :param flow_format: The flow_format of this Flow.
        :type: str
        """
        allowed_values = ["YAML_V2_TYPE", "FLOW_SNAPSHOT_JSON_V1_TYPE"]
        if flow_format not in allowed_values:
            raise ValueError(
                "Invalid value for `flow_format` ({0}), must be one of {1}"
                .format(flow_format, allowed_values)
            )

        self._flow_format = flow_format

    @property
    def created(self):
        """
        Gets the created of this Flow.
        The date this flow was created in the C2 server

        :return: The created of this Flow.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Flow.
        The date this flow was created in the C2 server

        :param created: The created of this Flow.
        :type: datetime
        """

        self._created = created

    @property
    def updated(self):
        """
        Gets the updated of this Flow.
        The date this flow was updated in the C2 server

        :return: The updated of this Flow.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this Flow.
        The date this flow was updated in the C2 server

        :param updated: The updated of this Flow.
        :type: datetime
        """

        self._updated = updated

    @property
    def uri(self):
        """
        Gets the uri of this Flow.
        The URI to retrieve this flow

        :return: The uri of this Flow.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this Flow.
        The URI to retrieve this flow

        :param uri: The uri of this Flow.
        :type: str
        """

        self._uri = uri

    @property
    def flow_content(self):
        """
        Gets the flow_content of this Flow.
        The content of the flow according to the flow format

        :return: The flow_content of this Flow.
        :rtype: str
        """
        return self._flow_content

    @flow_content.setter
    def flow_content(self, flow_content):
        """
        Sets the flow_content of this Flow.
        The content of the flow according to the flow format

        :param flow_content: The flow_content of this Flow.
        :type: str
        """

        self._flow_content = flow_content

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Flow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
