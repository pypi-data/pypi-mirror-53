# coding: utf-8

"""
    Pulp 3 API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UploadDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'href': 'str',
        'created': 'datetime',
        'size': 'int',
        'completed': 'datetime',
        'chunks': 'list[UploadChunk]'
    }

    attribute_map = {
        'href': '_href',
        'created': '_created',
        'size': 'size',
        'completed': 'completed',
        'chunks': 'chunks'
    }

    def __init__(self, href=None, created=None, size=None, completed=None, chunks=None):  # noqa: E501
        """UploadDetail - a model defined in OpenAPI"""  # noqa: E501

        self._href = None
        self._created = None
        self._size = None
        self._completed = None
        self._chunks = None
        self.discriminator = None

        if href is not None:
            self.href = href
        if created is not None:
            self.created = created
        self.size = size
        if completed is not None:
            self.completed = completed
        if chunks is not None:
            self.chunks = chunks

    @property
    def href(self):
        """Gets the href of this UploadDetail.  # noqa: E501


        :return: The href of this UploadDetail.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this UploadDetail.


        :param href: The href of this UploadDetail.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def created(self):
        """Gets the created of this UploadDetail.  # noqa: E501

        Timestamp of creation.  # noqa: E501

        :return: The created of this UploadDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this UploadDetail.

        Timestamp of creation.  # noqa: E501

        :param created: The created of this UploadDetail.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def size(self):
        """Gets the size of this UploadDetail.  # noqa: E501

        The size of the upload in bytes.  # noqa: E501

        :return: The size of this UploadDetail.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this UploadDetail.

        The size of the upload in bytes.  # noqa: E501

        :param size: The size of this UploadDetail.  # noqa: E501
        :type: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def completed(self):
        """Gets the completed of this UploadDetail.  # noqa: E501

        Timestamp when upload is committed.  # noqa: E501

        :return: The completed of this UploadDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this UploadDetail.

        Timestamp when upload is committed.  # noqa: E501

        :param completed: The completed of this UploadDetail.  # noqa: E501
        :type: datetime
        """

        self._completed = completed

    @property
    def chunks(self):
        """Gets the chunks of this UploadDetail.  # noqa: E501


        :return: The chunks of this UploadDetail.  # noqa: E501
        :rtype: list[UploadChunk]
        """
        return self._chunks

    @chunks.setter
    def chunks(self, chunks):
        """Sets the chunks of this UploadDetail.


        :param chunks: The chunks of this UploadDetail.  # noqa: E501
        :type: list[UploadChunk]
        """

        self._chunks = chunks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UploadDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
