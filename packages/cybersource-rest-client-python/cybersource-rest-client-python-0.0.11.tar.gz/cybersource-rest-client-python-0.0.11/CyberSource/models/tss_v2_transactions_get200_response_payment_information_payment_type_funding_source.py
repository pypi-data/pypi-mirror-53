# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'credential': 'str',
        'affiliations': 'str',
        'underwriter': 'str'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'credential': 'credential',
        'affiliations': 'affiliations',
        'underwriter': 'underwriter'
    }

    def __init__(self, name=None, type=None, credential=None, affiliations=None, underwriter=None):
        """
        TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource - a model defined in Swagger
        """

        self._name = None
        self._type = None
        self._credential = None
        self._affiliations = None
        self._underwriter = None

        if name is not None:
          self.name = name
        if type is not None:
          self.type = type
        if credential is not None:
          self.credential = credential
        if affiliations is not None:
          self.affiliations = affiliations
        if underwriter is not None:
          self.underwriter = underwriter

    @property
    def name(self):
        """
        Gets the name of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource.
        A Payment Type Funding Source is the Financial Account which holds the financial assets used to fund a transaction initiated with a given Payment Type. Examples: Bank of America Debit, Wells Consumer Checking 

        :return: The name of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource.
        A Payment Type Funding Source is the Financial Account which holds the financial assets used to fund a transaction initiated with a given Payment Type. Examples: Bank of America Debit, Wells Consumer Checking 

        :param name: The name of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource.
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource.
        It is type of funding source. Examples: US Checking Account, Credit Account, Stored Value Account 

        :return: The type of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource.
        It is type of funding source. Examples: US Checking Account, Credit Account, Stored Value Account 

        :param type: The type of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource.
        :type: str
        """

        self._type = type

    @property
    def credential(self):
        """
        Gets the credential of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource.
        It is the credential of the funding source. Examples: Credit Card PAN, Checking Account Number 

        :return: The credential of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource.
        :rtype: str
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """
        Sets the credential of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource.
        It is the credential of the funding source. Examples: Credit Card PAN, Checking Account Number 

        :param credential: The credential of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource.
        :type: str
        """

        self._credential = credential

    @property
    def affiliations(self):
        """
        Gets the affiliations of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource.
        It is affiliation of funding source such as Visa, Master Card, ACH. 

        :return: The affiliations of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource.
        :rtype: str
        """
        return self._affiliations

    @affiliations.setter
    def affiliations(self, affiliations):
        """
        Sets the affiliations of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource.
        It is affiliation of funding source such as Visa, Master Card, ACH. 

        :param affiliations: The affiliations of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource.
        :type: str
        """

        self._affiliations = affiliations

    @property
    def underwriter(self):
        """
        Gets the underwriter of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource.
        It is underwrite for the given funding source. Examples: Bank of America, Wells Fargo, PayPal 

        :return: The underwriter of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource.
        :rtype: str
        """
        return self._underwriter

    @underwriter.setter
    def underwriter(self, underwriter):
        """
        Sets the underwriter of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource.
        It is underwrite for the given funding source. Examples: Bank of America, Wells Fargo, PayPal 

        :param underwriter: The underwriter of this TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource.
        :type: str
        """

        self._underwriter = underwriter

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TssV2TransactionsGet200ResponsePaymentInformationPaymentTypeFundingSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
