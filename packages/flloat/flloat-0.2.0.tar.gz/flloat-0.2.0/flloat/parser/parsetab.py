
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQUIVALENCEALT_EQUIVALENCEleftIMPLIESALT_IMPLIESleftUNIONleftSEQleftSTARleftTESTleftORALT_ORleftANDALT_ANDrightDIAMONDLSEPARATORBOXLSEPARATORleftDIAMONDRSEPARATORBOXRSEPARATORrightNOTALT_NOTALT_AND ALT_EQUIVALENCE ALT_IMPLIES ALT_NOT ALT_OR AND ATOM BOXLSEPARATOR BOXRSEPARATOR DIAMONDLSEPARATOR DIAMONDRSEPARATOR END EQUIVALENCE FALSE FF IMPLIES LAST LPAREN NOT OR RPAREN SEQ STAR TEST TRUE TT UNIONtemp_formula : temp_formula ALT_EQUIVALENCE temp_formula\n                        | temp_formula ALT_IMPLIES temp_formula\n                        | temp_formula ALT_OR temp_formula\n                        | temp_formula ALT_AND temp_formula\n                        | BOXLSEPARATOR path BOXRSEPARATOR temp_formula\n                        | DIAMONDLSEPARATOR path DIAMONDRSEPARATOR temp_formula\n                        | ALT_NOT temp_formula\n                        | TT\n                        | FF\n                        | END\n                        | LAST\n                        | propositional\n\n         path : path UNION path\n                | path SEQ path\n                | path STAR\n                | temp_formula TEST\n                | propositional\n        propositional : propositional EQUIVALENCE propositional\n                         | propositional IMPLIES propositional\n                         | propositional OR propositional\n                         | propositional AND propositional\n                         | NOT propositional\n                         | FALSE\n                         | TRUE\n                         | ATOM\n        temp_formula : LPAREN temp_formula RPAREN\n        path            : LPAREN path RPAREN\n        propositional   : LPAREN propositional RPAREN\n        '
    
_lr_action_items = {'BOXLSEPARATOR':([0,2,3,4,10,15,16,17,18,22,37,38,39,45,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'DIAMONDLSEPARATOR':([0,2,3,4,10,15,16,17,18,22,37,38,39,45,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'ALT_NOT':([0,2,3,4,10,15,16,17,18,22,37,38,39,45,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'TT':([0,2,3,4,10,15,16,17,18,22,37,38,39,45,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'FF':([0,2,3,4,10,15,16,17,18,22,37,38,39,45,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'END':([0,2,3,4,10,15,16,17,18,22,37,38,39,45,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'LAST':([0,2,3,4,10,15,16,17,18,22,37,38,39,45,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'LPAREN':([0,2,3,4,10,11,15,16,17,18,22,25,26,27,28,32,37,38,39,45,],[10,22,22,10,10,32,10,10,10,10,22,32,32,32,32,32,10,22,22,10,]),'NOT':([0,2,3,4,10,11,15,16,17,18,22,25,26,27,28,32,37,38,39,45,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'FALSE':([0,2,3,4,10,11,15,16,17,18,22,25,26,27,28,32,37,38,39,45,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'TRUE':([0,2,3,4,10,11,15,16,17,18,22,25,26,27,28,32,37,38,39,45,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'ATOM':([0,2,3,4,10,11,15,16,17,18,22,25,26,27,28,32,37,38,39,45,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'$end':([1,5,6,7,8,9,12,13,14,24,31,33,34,35,36,46,47,48,49,50,51,53,57,],[0,-8,-9,-10,-11,-12,-23,-24,-25,-7,-22,-1,-2,-3,-4,-18,-19,-20,-21,-26,-28,-5,-6,]),'ALT_EQUIVALENCE':([1,5,6,7,8,9,12,13,14,20,21,24,29,30,31,33,34,35,36,43,44,46,47,48,49,50,51,53,57,],[15,-8,-9,-10,-11,-12,-23,-24,-25,15,-12,-7,15,-12,-22,-1,-2,-3,-4,15,-12,-18,-19,-20,-21,-26,-28,-5,-6,]),'ALT_IMPLIES':([1,5,6,7,8,9,12,13,14,20,21,24,29,30,31,33,34,35,36,43,44,46,47,48,49,50,51,53,57,],[16,-8,-9,-10,-11,-12,-23,-24,-25,16,-12,-7,16,-12,-22,16,-2,-3,-4,16,-12,-18,-19,-20,-21,-26,-28,-5,-6,]),'ALT_OR':([1,5,6,7,8,9,12,13,14,20,21,24,29,30,31,33,34,35,36,43,44,46,47,48,49,50,51,53,57,],[17,-8,-9,-10,-11,-12,-23,-24,-25,17,-12,-7,17,-12,-22,17,17,-3,-4,17,-12,-18,-19,-20,-21,-26,-28,-5,-6,]),'ALT_AND':([1,5,6,7,8,9,12,13,14,20,21,24,29,30,31,33,34,35,36,43,44,46,47,48,49,50,51,53,57,],[18,-8,-9,-10,-11,-12,-23,-24,-25,18,-12,-7,18,-12,-22,18,18,18,-4,18,-12,-18,-19,-20,-21,-26,-28,-5,-6,]),'TEST':([5,6,7,8,9,12,13,14,20,21,24,31,33,34,35,36,43,44,46,47,48,49,50,51,53,57,],[-8,-9,-10,-11,-12,-23,-24,-25,41,-12,-7,-22,-1,-2,-3,-4,41,-12,-18,-19,-20,-21,-26,-28,-5,-6,]),'RPAREN':([5,6,7,8,9,12,13,14,21,24,29,30,31,33,34,35,36,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,],[-8,-9,-10,-11,-12,-23,-24,-25,-17,-7,50,51,-22,-1,-2,-3,-4,-15,-16,56,50,51,-18,-19,-20,-21,-26,-28,51,-5,-13,-14,-27,-6,]),'EQUIVALENCE':([9,12,13,14,21,30,31,44,46,47,48,49,51,52,],[25,-23,-24,-25,25,25,-22,25,-18,-19,-20,-21,-28,25,]),'IMPLIES':([9,12,13,14,21,30,31,44,46,47,48,49,51,52,],[26,-23,-24,-25,26,26,-22,26,26,-19,-20,-21,-28,26,]),'OR':([9,12,13,14,21,30,31,44,46,47,48,49,51,52,],[27,-23,-24,-25,27,27,-22,27,27,27,-20,-21,-28,27,]),'AND':([9,12,13,14,21,30,31,44,46,47,48,49,51,52,],[28,-23,-24,-25,28,28,-22,28,28,28,28,-21,-28,28,]),'BOXRSEPARATOR':([12,13,14,19,21,31,40,41,46,47,48,49,51,54,55,56,],[-23,-24,-25,37,-17,-22,-15,-16,-18,-19,-20,-21,-28,-13,-14,-27,]),'UNION':([12,13,14,19,21,23,31,40,41,42,44,46,47,48,49,51,54,55,56,],[-23,-24,-25,38,-17,38,-22,-15,-16,38,-17,-18,-19,-20,-21,-28,-13,-14,-27,]),'SEQ':([12,13,14,19,21,23,31,40,41,42,44,46,47,48,49,51,54,55,56,],[-23,-24,-25,39,-17,39,-22,-15,-16,39,-17,-18,-19,-20,-21,-28,39,-14,-27,]),'STAR':([12,13,14,19,21,23,31,40,41,42,44,46,47,48,49,51,54,55,56,],[-23,-24,-25,40,-17,40,-22,-15,-16,40,-17,-18,-19,-20,-21,-28,40,40,-27,]),'DIAMONDRSEPARATOR':([12,13,14,21,23,31,40,41,46,47,48,49,51,54,55,56,],[-23,-24,-25,-17,45,-22,-15,-16,-18,-19,-20,-21,-28,-13,-14,-27,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'temp_formula':([0,2,3,4,10,15,16,17,18,22,37,38,39,45,],[1,20,20,24,29,33,34,35,36,43,53,20,20,57,]),'propositional':([0,2,3,4,10,11,15,16,17,18,22,25,26,27,28,32,37,38,39,45,],[9,21,21,9,30,31,9,9,9,9,44,46,47,48,49,52,9,21,21,9,]),'path':([2,3,22,38,39,],[19,23,42,54,55,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> temp_formula","S'",1,None,None,None),
  ('temp_formula -> temp_formula ALT_EQUIVALENCE temp_formula','temp_formula',3,'p_temp_formula','ldlf.py',126),
  ('temp_formula -> temp_formula ALT_IMPLIES temp_formula','temp_formula',3,'p_temp_formula','ldlf.py',127),
  ('temp_formula -> temp_formula ALT_OR temp_formula','temp_formula',3,'p_temp_formula','ldlf.py',128),
  ('temp_formula -> temp_formula ALT_AND temp_formula','temp_formula',3,'p_temp_formula','ldlf.py',129),
  ('temp_formula -> BOXLSEPARATOR path BOXRSEPARATOR temp_formula','temp_formula',4,'p_temp_formula','ldlf.py',130),
  ('temp_formula -> DIAMONDLSEPARATOR path DIAMONDRSEPARATOR temp_formula','temp_formula',4,'p_temp_formula','ldlf.py',131),
  ('temp_formula -> ALT_NOT temp_formula','temp_formula',2,'p_temp_formula','ldlf.py',132),
  ('temp_formula -> TT','temp_formula',1,'p_temp_formula','ldlf.py',133),
  ('temp_formula -> FF','temp_formula',1,'p_temp_formula','ldlf.py',134),
  ('temp_formula -> END','temp_formula',1,'p_temp_formula','ldlf.py',135),
  ('temp_formula -> LAST','temp_formula',1,'p_temp_formula','ldlf.py',136),
  ('temp_formula -> propositional','temp_formula',1,'p_temp_formula','ldlf.py',137),
  ('path -> path UNION path','path',3,'p_path','ldlf.py',180),
  ('path -> path SEQ path','path',3,'p_path','ldlf.py',181),
  ('path -> path STAR','path',2,'p_path','ldlf.py',182),
  ('path -> temp_formula TEST','path',2,'p_path','ldlf.py',183),
  ('path -> propositional','path',1,'p_path','ldlf.py',184),
  ('propositional -> propositional EQUIVALENCE propositional','propositional',3,'p_propositional','ldlf.py',206),
  ('propositional -> propositional IMPLIES propositional','propositional',3,'p_propositional','ldlf.py',207),
  ('propositional -> propositional OR propositional','propositional',3,'p_propositional','ldlf.py',208),
  ('propositional -> propositional AND propositional','propositional',3,'p_propositional','ldlf.py',209),
  ('propositional -> NOT propositional','propositional',2,'p_propositional','ldlf.py',210),
  ('propositional -> FALSE','propositional',1,'p_propositional','ldlf.py',211),
  ('propositional -> TRUE','propositional',1,'p_propositional','ldlf.py',212),
  ('propositional -> ATOM','propositional',1,'p_propositional','ldlf.py',213),
  ('temp_formula -> LPAREN temp_formula RPAREN','temp_formula',3,'p_expr_paren','ldlf.py',241),
  ('path -> LPAREN path RPAREN','path',3,'p_expr_paren','ldlf.py',242),
  ('propositional -> LPAREN propositional RPAREN','propositional',3,'p_expr_paren','ldlf.py',243),
]
