# -*- coding: utf-8 -*-
from distutils.core import setup

packages = \
['nightcore']

package_data = \
{'': ['*']}

install_requires = \
['click>=7.0,<8.0', 'pydub>=0.23.1,<0.24.0']

entry_points = \
{'console_scripts': ['nightcore = nightcore.cli:cli']}

setup_kwargs = {
    'name': 'nightcore',
    'version': '1.0.0',
    'description': 'Intuitive CLI and API for modifying the speed/pitch of audio',
    'long_description': '# Nightcore - Easily modify speed/pitch\n\nA focused CLI and API for changing the pitch and speed of audio. **Requires FFmpeg.**\n\n> I had the idea for this a long time ago, and wanted to make it to prove a point. This program is not intended for, nor should it be used for, copyright infringement and piracy. [**Nightcore is not, and has never been, fair use**](https://www.avvo.com/legal-answers/does-making-a--nightcore--version-of-a-song--speed-2438914.html).\n\n## Installation\n\n**FFmpeg is a required dependency** - [see here](https://github.com/jiaaro/pydub#getting-ffmpeg-set-up) for instructions on how to set it up!\n\nWith FFmpeg installed, you can use `pip` to install `nightcore` (although [pipx](https://pipxproject.github.io/pipx/) is recommended when only installing the CLI)\n\n```sh\npip install nightcore\n```\n\n### Building from source\n\n`nightcore` is built using [Poetry](https://poetry.eustace.io).\n\n```sh\n$ git clone https://github.com/SeparateRecords/nightcore\n$ poetry install\n$ poetry build\n```\n\n## CLI Usage\n\n`nightcore` is predictable and ensures there is no unexpected behaviour. As nightcore relies on FFmpeg under the hood, any format supported by FFmpeg is supported by the CLI.\n\n### Speed/pitch\n\nSpeeding up a track is super easy. By default, it will increase the pitch by 1 tone.\n\n```console\n$ nightcore music.mp3 > out.mp3\n```\n\nYou can manually set the speed increase by passing a number after the file. Without specifying a type, the increase will be in semitones.\n\n```console\n$ nightcore music.mp3 +3 > out.mp3\n```\n\n### Types\n\nYou can change the type of speed increase by providing it after the number. At the moment, nightcore can take any of `semitones`, `tones`, `octaves` or `percent`.\n\n```console\n$ nightcore music.mp3 +3 tones > out.mp3\n```\n\nWhen using percentages, `100 percent` means no change, `150 percent` is 1.5x speed, `80 percent` is 0.8x speed, etc.\n\n```console\n$ nightcore music.mp3 150 percent > out.mp3\n```\n\n### Output\n\nIf the output cannot be redirected, you can specify an output file with `--output` (`-o`)\n\n```console\n$ nightcore music.mp3 --output out.mp3\n```\n\n### Format\n\nIf file\'s format cannot be inferred from its extension, you can specify it manually with `--format` (`-f`)\n\n```console\n$ nightcore badly_named_file --format ogg > out.mp3\n```\n\n### EQ\n\nTo compensate for a pitch increase, the output track will have a default +2db bass boost and -1db treble reduction applied. **To disable this**, pass in `--no-eq`. Note that if the speed is decreased, there will be no automatic EQ.\n\n```console\n$ nightcore music.mp3 --no-eq > out.mp3\n```\n\n## API Usage\n\nThe nightcore API is designed around `pydub.AudioSegment`, and can be used as either a pure function or effect. This repository contains a 5 second mp3 file at 440hz (A4), if you want to try this in a REPL (`tests/test.mp3`).\n\nThe API itself performs no equalization, unlike the CLI.\n\nAs the word `nightcore` is long, it\'s recommended to import the module as `nc`.\n\n### Classes\n\n`nightcore` contains dataclasses to represent a relative change in speed. For example, increasing the pitch by 3 tones is a 141.4213562373095% increase in speed.\n\nSee [subclassing RelativeChange and BaseInterval](#subclassing) for example subclasses.\n\n* `RelativeChange` (ABC)\n  * `BaseInterval` (ABC)\n    * `Octaves`\n    * `Tones`\n    * `Semitones`\n  * `Percent`\n\nUse any of Octaves, Tones, Semitones, or Percent when changing audio speed.\n\n```python\n>>> import nightcore as nc\n\n>>> 2 * nc.Percent(200)\n4.0\n>>> 6 + nc.Percent(50)  # 6 + (6 * .5)\n9.0\n\n>>> nc.Octaves(1) == nc.Tones(6) == nc.Semitones(12)\nTrue\n>>> # Equivalent to `nc.Semitones(3).as_percent()`\n>>> float(nc.Semitones(3))\n1.189207115002721\n\n>>> # Amounts will be normalized to the unit of the multiplier\n>>> nc.Semitones(2) * nc.Tones(3)  # 3 tones = 6 semitones\nSemitones(amount=12.0)\n\n>>> # Multiplying an int by 3 tones makes no sense\n>>> 2 * nc.Tones(3)\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nTypeError: unsupported operand type(s) for *: \'int\' and \'Tones\'\n```\n\n### Usage as a function\n\nThis function will return a `pydub.AudioSegment`. If the first argument is path-like, any additional keywords will be passed to `AudioSegment.from_file()` to create an `AudioSegment`. Otherwise, if the first argument is already an `AudioSegment`, it will be used to create a new audio segment and will not be mutated.\n\n```python\nimport nightcore as nc\n\naudio = nc.nightcore("/your/audio/file.mp3", nc.Semitones(1))\n```\n\nFor clarity, it is recommended to use [one of the above classes](#classes), however a float or int may also be used.\n\n### Usage as an effect\n\nThe easiest way is to use the `@` operator on an `AudioSegment` once `nightcore` has been imported.\n\n```python\nfrom pydub import AudioSegment\nimport nightcore as nc\n\naudio = AudioSegment.from_file("example.mp3") @ nc.Tones(2)\n```\n\nThe example above is functionally equivalent to the following example.\n\n```python\nfrom pydub import AudioSegment\nimport nightcore as nc\n\namount = nc.Tones(2)\naudio = AudioSegment.from_file("example.mp3").nightcore(amount)\n```\n\n<a name="subclassing"></a>\n\n### Subclassing `RelativeChange` or `BaseInterval`\n\nCreating a `RelativeChange` subclass only requires overriding `as_percent(self)`. Overriding the `__init__()` method also requires a call to `super().__init__()` to set the amount, as `self.amount` cannot be assigned to.\n\n```python\nimport nightcore as nc\n\nclass NoChange(nc.RelativeChange):\n    def as_percent(self):\n        return 1.0  # 1.0 is no change (213 * 1 == 213)\n\nassert NoChange(8).amount == 8  # True\nassert NoChange(123) == NoChange(28980)  # True\n```\n\n`BaseInterval` implements `as_percent`, but all subclasses must set `n_per_octave`.\n\n```python\nimport nightcore as nc\n\nclass Cents(nc.BaseInterval):\n    n_per_octave = 1200\n\nassert Cents(100) == nc.Semitones(1)  # True\n```\n\n## License\n\nThis project is licensed under the MIT license.\n',
    'author': 'SeparateRecords',
    'author_email': 'me@rob.ac',
    'url': 'https://github.com/SeparateRecords/nightcore',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
